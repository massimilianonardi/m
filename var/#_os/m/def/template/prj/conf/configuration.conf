################################################################################
### PRE-BUILT VARIABLES
################################################################################
#
# - directories: BASE_DIR, SOURCE_DIR, BUILD_DIR, DIST_DIR, CONF_DIR, MAKE_DIR, LIB_DIR, REL_DIR
#   BASE_DIR is always fixed, the others depends on context (project, type, profiles, target, etc.)
#
# - files: CONF_FILE, LIB_FILE
#   current configuration
#
# - project: PROJECT, PROFILE
#   the current building project and profile



################################################################################
### GLOBAL VARIABLES
################################################################################
#
# - TYPE: none, auto, multi, project, cpp, database, java, java_web, javascript, makefile, sh, ssh
#   set this variable to specify how to compile. 
#   "none" does nothing, useful for subfolders with static files (images, documents, etc.) that doesn't need to be compiled. 
#   "auto" tries to autodetect type (currently not implemented).
#
# - PROFILES:
#   space separated list of different compiling profiles (eg: PROFILES=RELEASE DEBUG)
#
# - PROJECT:
#   project name



################################################################################
### TYPE-multi VARIABLES
################################################################################
#
# - PROJECTS_HI_PRI, PROJECTS_LO_PRI:
#   space separated lists of sub projects to be compiled at specified order before or after any other
#
# - PROJECTS_LIST:
#   space separated and ordered list of all sub projects to be compiled



################################################################################
### TYPE-project VARIABLES
################################################################################
#
# - PROJECT_MAKE: make
#   will compile project using the main makefile of mk, if empty will use the tool $(MK_FILE) if set, 
#   otherwise project mk will be used and if not exists, current mk will be used
#
# - MK_FILE:
#   alternative tool to use for compilation



################################################################################
### TYPE-cpp VARIABLES
################################################################################
#
# - TARGET_CONF: DEBUG, RELEASE
#
# - TARGET_OS: WIN, LINUX, OSX
#
# - TARGET_CPU: x86, AMD64, ARM
#
# - TARGET_ARCHITECTURE: 32, 64
#
# - CPP_INCLUDES, CPP_LIBRARIES_LINK, CPP_OUTPUT_TYPE, CPP_FILENAME, CPP_FILE_EXTENSION:
#   files with .cpp extension will be compiled as c++, files with .c extension will be compiled as c. 
#   if TARGET_CONF, TARGET_OS, TARGET_ARCHITECTURE are not defined, they default to the running system 
#   CPP_INCLUDES define the include search path as follows: 
#   CPP_INCLUDES=-I../dir1 -I../dir2 -I../dir3 $(addprefix -I, $(shell find ../src/dir4 -mindepth 0 -type d)) ### detect dir4 subdirectories
#   CPP_LIBRARIES_LINK define the libraries to link as follows: 
#   CPP_LIBRARIES_LINK=-L$(EXTERN_LIBRARIES_SEARCH_DIR) -Ldir1 -Ldir2 -Ldir3 -lLib1 -dynamic -lLib2 -dynamic -lLib3 -static
#   CPP_INCLUDES and CPP_LIBRARIES_LINK should take advantage of libraries.conf to define variables specific to each library. 
#   if CPP_OUTPUT_TYPE is empty, an executable is built, if it is "-shared" then a shared library is built, if it is "-static" then a static library is built. 
#   (NB -static is currently not supported)
#   CPP_LIBRARIES_RUNTIME_PATH embeds into executables the search path for libraries. 
#   the output file will be: $(DIST_DIR)/$(CPP_FILENAME)$(CPP_FILE_EXTENSION)
#   if CPP_FILE_EXTENSION is empty, compiler default is used (executable, shared or static library), 
#   in windows if set to a dot '.', then no file extension will be used. 
#   if CPP_FILENAME is empty or undefined it defaults to $(PROJECT). 



################################################################################
### TYPE-database VARIABLES
################################################################################
#
# - DATABASE: sql, postgres, oracle
#   specifies subtype "sql" is standard sql executed via jdbc, "postgres" and "oracle" use proprietary tools



################################################################################
### TYPE-java VARIABLES
################################################################################
#
# - java: JAVA_MAIN_CLASS, JAVA_CLASSPATH_BUILD, JAVA_CLASSPATH_RUN, JAVA_FILES_DIST, JAVA_FLAGS
#
#   if JAVA_MAIN_CLASS is empty, the resulting jar can only be used as library, not executed. 
#   JAVA_CLASSPATH_BUILD is the classpath passed to java to build. 
#   NB java treats its format depending on the system (on windows should be: C:\lib1.jar;D:\lib2.jar on linux: /usr/lib1.jar:/usr/lib2.jar)
#   JAVA_CLASSPATH_RUN is a list of blank space separated list of libraries to be searched at runtime (eg: path1/lib1.jar path2/lib2.jar)
#   JAVA_FILES_DIST can be a list of files to be copied into the current $(DIST_DIR). it is implemented as: $(CP) $(JAVA_FILES_DIST) $(DIST_DIR)
#   JAVA_FLAGS can be used to pass extra flags to java compiler



################################################################################
### TYPE-java_web VARIABLES
################################################################################
#
# - java_web: JAVA_WEB_CLASSPATH_BUILD, JAVA_WEB_LIBRARIES_DIST, JAVA_WEB_FILES_DIST, JAVA_WEB_FILES_DIST_DIR, JAVA_WEB_DEPLOY, JAVA_WEB_FLAGS
#
#   JAVA_WEB_CLASSPATH_BUILD is the classpath passed to java to build. 
#   NB java treats its format depending on the system (on windows should be: C:\lib1.jar;D:\lib2.jar on linux: /usr/lib1.jar:/usr/lib2.jar)
#   JAVA_WEB_LIBRARIES_DIST can be a list of files to be copied into the current $(BUILD_DIR)/WEB-INF/lib. 
#   it is implemented as: $(CP) $(JAVA_WEB_LIBRARIES_DIST) $(BUILD_DIR)/WEB-INF/lib
#   JAVA_WEB_FILES_DIST can be a list of files to be copied into $(JAVA_WEB_FILES_DIST_DIR)
#   JAVA_WEB_FILES_DIST_DIR if empty, defaults to war root
#   JAVA_WEB_DEPLOY if not empty, defines the application server dir where to deploy the built files
#   JAVA_WEB_FLAGS can be used to pass extra flags to java compiler



################################################################################
### TYPE-javascript VARIABLES
################################################################################
#
# - JAVASCRIPT_LIBRARIES_DIST:
#   can be a list of directories where libraries resides (*.js and *.css are prepended, other files are copied)
#
# - JAVASCRIPT_JS_CONF_FILE:
#   if empty, then automatic namespaced import is performed (folders are namespaces, filename is the symbol to export).
#   this file must be in json format with the following "module" structure: 
#   - "modules" property (required): it must be an array of objects of two acceptable formats: 
#     - another module object for defining a sub-namespace 
#     - a file object with a "file" property (required) specifing the file to include and a "symbols" property (optional) as a comma separated string of objects to make public. 
#   - "name" property (optional): if defined, creates a sub-namespace (with the provided name) surrounding the modules defined by the modules property. 
#   example:
#   {
#     "modules":
#     [
#       {"file": "lib1.js"},
#       {"file": "lib2.js", "symbols": ""},
#       {"file": "lib3.js", "symbols": "class3,var4"},
#       {
#         "name": "namespace1",
#         "modules":
#         [
#           {"name": "subnamespace1", "modules": [{"file": "subnamespace1", "symbols": "class1,class2"}]},
#           {"name": "subnamespace2", "modules": 
#           [
#             {"file": "lib4.js", "symbols": "class1,class2"},
#             {"file": "lib5.js", "symbols": "class5,class6"}
#           ]}
#         ]
#       }
#     ]
#   }
#
# - JAVASCRIPT_CSS_CONF_FILE:
#   if empty, then automatic import is performed (all files are simply concatenated).
#   this file must be in json format with the "module" structure, but without "name" and "symbols"
#
# - JAVASCRIPT_MINIFY:
#   if is not empty activates the minification after the composition and its value must be WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS or ADVANCED_OPTIMIZATIONS. 
#
# - JAVASCRIPT_GZIP:
#   if is not empty activates the gzip compression at the end of the compilation chain



################################################################################
### TYPE-makefile VARIABLES
################################################################################
#
# - EXT_MAKEFILE:
#   external makefile to invoke



################################################################################
### TYPE-sh VARIABLES
################################################################################
#
# no variables are used



################################################################################
### TYPE-ssh VARIABLES
################################################################################
#
# - SSH_HOST:
#   host to connect
#
# - SSH_USER:
#   username
