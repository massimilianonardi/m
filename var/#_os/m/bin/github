#!/bin/sh

#-------------------------------------------------------------------------------

github_parse_pkg()
{
  if [ -z "$1" ]
  then
    log_fatal "wrong arguments: $@"
    exit 1
  fi

  GITHUB_USER="${1%%/*}"
  GITHUB_PROJECT="${1#"$GITHUB_USER"}"
  GITHUB_PROJECT="${GITHUB_PROJECT#/}"
  GITHUB_PROJECT="${GITHUB_PROJECT%%/*}"
  GITHUB_VERSION="${1#"$GITHUB_USER"}"
  GITHUB_VERSION="${GITHUB_VERSION#/}"
  GITHUB_VERSION="${GITHUB_VERSION#"$GITHUB_PROJECT"}"
  GITHUB_VERSION="${GITHUB_VERSION#/}"

  log_debug "ARG: $1 - GITHUB_USER: $GITHUB_USER - GITHUB_PROJECT: $GITHUB_PROJECT - GITHUB_VERSION: $GITHUB_VERSION"
}

#-------------------------------------------------------------------------------

find_url()
(
  github_parse_pkg "$1"

  SEARCH_URL="https://api.github.com/search/repositories?q="
  [ -n "$GITHUB_USER" ] && SEARCH_URL="${SEARCH_URL}$GITHUB_USER"
  [ -n "$GITHUB_PROJECT" ] && SEARCH_URL="${SEARCH_URL}/$GITHUB_PROJECT"

  URLS_URL="$(web -q get "$SEARCH_URL" -)"
  RELEASE_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"releases_url"' | head -1 | sed 's/.*"releases_url": "//g;s/{\/id}".*//g')"
  TAG_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"tags_url"' | head -1 | sed 's/.*"tags_url": "//g;s/".*//g')"
#  TAG_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"git_refs_url"' | head -1 | sed 's/.*"git_refs_url": "//g;s/{\/sha}".*/\/tags/g')"

  log_trace "URLS_URL: $URLS_URL"
  log_trace "RELEASE_URL: $RELEASE_URL"
  log_trace "TAG_URL: $TAG_URL"

#  ZIPBALL_URL="$(web -q get "$RELEASE_URL" - | grep '"zipball_url"')"
#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="$(web -q get "$TAG_URL" - | grep '"zipball_url"')" || true
  ZIPBALL_URL="$(web -q get "$RELEASE_URL" - | grep '"browser_download_url"' | sed 's/.*"browser_download_url": "//g;s/".*//g')
$(web -q get "$RELEASE_URL" - | grep '"zipball_url"' | sed 's/.*"zipball_url": "//g;s/".*//g')
$(web -q get "$TAG_URL" - | grep '"zipball_url"' | sed 's/.*"zipball_url": "//g;s/".*//g')"
  log_trace "ZIPBALL_URL: $ZIPBALL_URL"

#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="$(web -q get "$TAG_URL" - | grep '"ref"' | sed "s|.*tags|https://api.github.com/repos/$GITHUB_USER/$GITHUB_PROJECT/zipball|g")" || true
#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/master.zip" || true

  if [ -z "$ZIPBALL_URL" ]
  then
    echo "$GITHUB_USER/$GITHUB_PROJECT/latest"
  elif [ -z "$GITHUB_VERSION" ] || [ "$GITHUB_VERSION" = "latest" ]
  then
    echo "$ZIPBALL_URL" | head -1
  elif [ "$GITHUB_VERSION" = "*" ]
  then
    echo "$ZIPBALL_URL"
  else
    echo "$ZIPBALL_URL" | grep "$GITHUB_VERSION" | head -1
#    echo "$ZIPBALL_URL" | grep "$GITHUB_VERSION\$"
  fi
)

#-------------------------------------------------------------------------------

find()
(
  github_parse_pkg "$1"

  SEARCH_URL="https://api.github.com/search/repositories?q="
  [ -n "$GITHUB_USER" ] && SEARCH_URL="${SEARCH_URL}$GITHUB_USER"
  [ -n "$GITHUB_PROJECT" ] && SEARCH_URL="${SEARCH_URL}/$GITHUB_PROJECT"

  URLS_URL="$(web -q get "$SEARCH_URL" -)"
  RELEASE_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"releases_url"' | head -1 | sed 's/.*"releases_url": "//g;s/{\/id}".*//g')"
  TAG_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"tags_url"' | head -1 | sed 's/.*"tags_url": "//g;s/".*//g')"
#  TAG_URL="$(echo "$URLS_URL" - | sed 's/,/\n/g' | grep '"git_refs_url"' | head -1 | sed 's/.*"git_refs_url": "//g;s/{\/sha}".*/\/tags/g')"

  log_trace "URLS_URL: $URLS_URL"
  log_trace "RELEASE_URL: $RELEASE_URL"
  log_trace "TAG_URL: $TAG_URL"

#  ZIPBALL_URL="$(web -q get "$RELEASE_URL" - | grep '"zipball_url"')"
#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="$(web -q get "$TAG_URL" - | grep '"zipball_url"')" || true
  ZIPBALL_URL="$(web -q get "$RELEASE_URL" - | grep '"zipball_url"') \n $(web -q get "$TAG_URL" - | grep '"zipball_url"')"
#  ZIPBALL_URL="$(web -q get "$RELEASE_URL" - | grep '"browser_download_url"' | sed 's/browser_download_url/zipball_url/g') \n $(web -q get "$RELEASE_URL" - | grep '"zipball_url"') \n $(web -q get "$TAG_URL" - | grep '"zipball_url"')"
  log_trace "ZIPBALL_URL: $ZIPBALL_URL"

#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="$(web -q get "$TAG_URL" - | grep '"ref"' | sed "s|.*tags|https://api.github.com/repos/$GITHUB_USER/$GITHUB_PROJECT/zipball|g")" || true
#  [ -z "$ZIPBALL_URL" ] && ZIPBALL_URL="https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/master.zip" || true

  if [ -z "$ZIPBALL_URL" ]
  then
    echo "$GITHUB_USER/$GITHUB_PROJECT/latest"
  elif [ -z "$GITHUB_VERSION" ] || [ "$GITHUB_VERSION" = "latest" ]
  then
    echo "$ZIPBALL_URL" | head -1 | sed 's/.*"zipball_url": "//g;s/".*//g' | sed 's/.*github.com\/repos\///g;s/\/zipball//g'
  elif [ "$GITHUB_VERSION" = "*" ]
  then
    echo "$ZIPBALL_URL" | sed 's/.*"zipball_url": "//g;s/".*//g' | sed 's/.*github.com\/repos\///g;s/\/zipball//g'
  else
#    echo "$ZIPBALL_URL" | grep "$GITHUB_VERSION" | sed 's/.*"zipball_url": "//g;s/".*//g' | sed 's/.*github.com\/repos\///g;s/\/zipball//g'
    echo "$ZIPBALL_URL" | sed 's/.*"zipball_url": "//g;s/".*//g' | sed 's/.*github.com\/repos\///g;s/\/zipball//g' | grep "$GITHUB_VERSION\$"
  fi
)

#-------------------------------------------------------------------------------

get()
(
  github_parse_pkg "$1"

  if [ -z "$GITHUB_USER" ] || [ -z "$GITHUB_PROJECT" ]
  then
    log_fatal "github get requires \$GITHUB_USER/\$GITHUB_PROJECT, provided: $@"
    exit 1
  fi

  if [ -z "$GITHUB_VERSION" ] || [ "$GITHUB_VERSION" = "latest" ]
  then
    DEST="$GITHUB_PROJECT"
    GET_URL="https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/master.zip"
  else
    DEST="$GITHUB_PROJECT-$GITHUB_VERSION"
#    GET_URL="https://api.github.com/repos/$GITHUB_USER/$GITHUB_PROJECT/zipball/$GITHUB_VERSION"
#    GET_URL="$(find_url "$GITHUB_USER" "$GITHUB_PROJECT" "$GITHUB_VERSION")"
    GET_URL="$(find_url "$1")"
  fi

  if [ -z "$2" ]
  then
    DEST="$(pwd)/$DEST"
  elif [ -d "$2" ]
  then
    DEST="$2/$DEST"
  else
    DEST="$2"
  fi

  web -q get "$GET_URL" "$DEST.zip"

  if [ -n "$SWITCH_x" ]
  then
    xtr -cs "$DEST.zip" "$DEST"
    rm -f "$DEST.zip"
  fi
)

#-------------------------------------------------------------------------------

stream()
(
# todo xtr stream of specific file
  log_debug "stream request for github file"
  log_fatal "stream request for github file -> not yet implemented"
  exit 1
)

#-------------------------------------------------------------------------------

main()
{
  case "$1" in
    "find_url") true;;
    "find") true;;
    "get") true;;
    "stream") true;;
    *) exit 1;;
  esac

  "$@"
}

#-------------------------------------------------------------------------------

ARGS_PARSE="true"
ARGS_SWITCHES="x"

. m.lib

#-------------------------------------------------------------------------------
