#!/bin/bash

#-------------------------------------------------------------------------------

clone()
(
  if [ -z "$1" ]
  then
    exit 1
  fi

  git clone "$@"
)

#-------------------------------------------------------------------------------

commit()
(
  if [ -z "$1" ]
  then
    exit 1
  fi

  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  echo "BRANCH: $BRANCH"
  [ -z "$BRANCH" ] && echo "empty branch!" && exit 1

  for k in *
  do
    [ -d "$k/.git" ] && mv "$k/.git" "$k/.git_"
  done

  git add --all && \
  git commit -m "$1" && \
  git push origin "$BRANCH"
  EXIT_CODE="$?"

  git status

  for k in *
  do
    [ -d "$k/.git_" ] && mv "$k/.git_" "$k/.git"
  done

  exit "$EXIT_CODE"
)

#-------------------------------------------------------------------------------

push()
(
  if [ -z "$1" ]
  then
    exit 1
  fi

  git push "$@"
)

#-------------------------------------------------------------------------------

pull()
(
  if [ -z "$1" ]
  then
    exit 1
  fi

  git pull "$@"
)

#-------------------------------------------------------------------------------

branch()
(
  if [ -z "$1" ]
  then
    git rev-parse --abbrev-ref HEAD
  elif [ "$1" = "list" ]
  then
    git branch -l
    git branch -r -l
  elif [ "$1" = "set" ]
  then
    echo todo branch change
  else
    exit 1
  fi
)

#-------------------------------------------------------------------------------

reset()
(
  git fetch origin

  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  echo "BRANCH: $BRANCH"
  [ -z "$BRANCH" ] && echo "empty branch!" && exit 1

  for k in *
  do
    [ -d "$k/.git" ] && mv "$k/.git" "$k/.git_"
  done

  git reset --hard origin/"$BRANCH"
  EXIT_CODE="$?"

  for k in *
  do
    [ -d "$k/.git_" ] && mv "$k/.git_" "$k/.git"
  done

  exit "$EXIT_CODE"
)

#-------------------------------------------------------------------------------

main()
{
  if [ "$#" -lt "2" ]
  then
    exit 1
  fi

  case "$1" in
    "clone") true;;
    "commit") true;;
    "push") true;;
    "pull") true;;
    "branch") true;;
    "reset") true;;
    "git") true;;
    *) exit 1;;
  esac

  COMMAND="$1"
  shift
  PRJ_DIR="$1"
  shift
  set -- "$COMMAND" "$@"
  cd "$PRJ_DIR"

  "$@"
}

#-------------------------------------------------------------------------------

. m.lib

#-------------------------------------------------------------------------------
