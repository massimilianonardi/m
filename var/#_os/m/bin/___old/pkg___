#!/bin/bash

#-------------------------------------------------------------------------------

find()
(
  for k in $(find_pkg "$@")
  do
    log_info "${k#$NET_M_PKG_DIR/}"
    echo "${k#$NET_M_PKG_DIR/}"
#    echo "$k"
  done
)

#-------------------------------------------------------------------------------

find_pkg()
(
  for k in "$@"
  do
    net find "$NET_M_PKG_DIR/$k"
#    if [ "$k" = "${k#/}" ]
#    then
#      net find "$NET_M_PKG_DIR/$k"
#    else
#      net find "$k"
#    fi
  done
)

#-------------------------------------------------------------------------------

parse_pkg()
{
#  if [ "$1" != "${1#/}" ]
#  then
#    set -- "${1#/*/*/}"
#  fi

  PACKAGE="$1"

  PKG_NAME="${1%%/*}"
  PKG_PLATFORM="${1#"$PKG_NAME"}"
  PKG_PLATFORM="${PKG_PLATFORM#/}"
  PKG_PLATFORM="${PKG_PLATFORM%%/*}"
  PKG_VERSION="${1#"$PKG_NAME"}"
  PKG_VERSION="${PKG_VERSION#/}"
  PKG_VERSION="${PKG_VERSION#"$PKG_PLATFORM"}"
  PKG_VERSION="${PKG_VERSION#/}"

  if [ -z "$PKG_PLATFORM" ]
  then
    log_warn "package platform not specified autodetecting: all, $PLATFORM"
    PKG_PLATFORM="all"
    if [ -z "$(find "$PKG_NAME/$PKG_PLATFORM")" ]
    then
      PKG_PLATFORM="$PLATFORM"
      if [ -z "$(find "$PKG_NAME/$PKG_PLATFORM")" ]
      then
        log_fatal "cannot determine platform"
        return 1
      fi
    fi
    log_info "package platform autodetected: $PKG_PLATFORM"
  fi

  if [ -z "$PKG_VERSION" ]
  then
    log_warn "package version not specified autodetecting latest available"
    for k in $(find "$PKG_NAME/$PKG_PLATFORM/*")
    do
      k="${k##*/}"
      PKG_VERSION="$(echo | awk "{print (\"$PKG_VERSION\" <= \"$k\") ? \"$k\" : \"$PKG_VERSION\"}")"
    done
    if [ -z "$PKG_VERSION" ]
    then
      log_fatal "cannot determine version"
      return 1
    fi
    log_info "package version autodetected: $PKG_VERSION"
  fi

  PACKAGE="$PKG_NAME"
  if [ -n "$PKG_PLATFORM" ] && [ "$PKG_PLATFORM" != "all" ]
  then
    PACKAGE="$PACKAGE-$PKG_PLATFORM"
  fi
  if [ -n "$PKG_VERSION" ] && [ "$PKG_VERSION" != "latest" ]
  then
    PACKAGE="$PACKAGE-$PKG_VERSION"
  fi

  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  log_debug "ARG: $1 - PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VERSION: $PKG_VERSION - PACKAGE: $PACKAGE - INSTALL_DIR: $INSTALL_DIR"
}

#-------------------------------------------------------------------------------

parse_pkg_installed()
{
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  if [ ! -d "$INSTALL_DIR" ]
  then
    log_fatal "package $1 is not installed: $INSTALL_DIR"
    exit 1
  fi

  if [ ! -f "$INSTALL_DIR/sys/name" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/name"
#    exit 1
  else
    PKG_NAME="$(cat "$INSTALL_DIR/sys/name")"
    if [ -z "$PKG_NAME" ]
    then
      log_fatal "package system file is not correct: PKG_NAME=$PKG_NAME"
      exit 1
    fi
  fi

  if [ ! -f "$INSTALL_DIR/sys/platform" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/platform"
#    exit 1
  else
    PKG_PLATFORM="$(cat "$INSTALL_DIR/sys/platform")"
    if [ -z "$PKG_PLATFORM" ]
    then
      log_fatal "package system file is not correct: PKG_PLATFORM=$PKG_PLATFORM"
      exit 1
    fi
  fi

  if [ ! -f "$INSTALL_DIR/sys/version" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/version"
#    exit 1
  else
    PKG_VERSION="$(cat "$INSTALL_DIR/sys/version")"
    if [ -z "$PKG_VERSION" ]
    then
      log_fatal "package system file is not correct: PKG_VERSION=$PKG_VERSION"
      exit 1
    fi
  fi

  log_debug "ARG: $1 - PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VERSION: $PKG_VERSION - PACKAGE: $PACKAGE - INSTALL_DIR: $INSTALL_DIR"
}

#-------------------------------------------------------------------------------

parse_pkg_ver_range()
{
#  if [ "$1" != "${1#/}" ]
#  then
#    set -- "${1#/*/*/}"
#  fi

  PKG_NAME="${1%\#*}"
  PKG_VER_MIN="${1#"$PKG_NAME"}"
  PKG_VER_MIN="${PKG_VER_MIN#\#}"
  PKG_VER_MAX="${PKG_VER_MIN#*:}"
  PKG_VER_MIN="${PKG_VER_MIN%:*}"

  if [ -z "$PKG_VER_MIN" ]
  then
    PKG_VER_MIN="0"
  fi

  if [ -z "$PKG_VER_MAX" ]
  then
    PKG_VER_MAX="latest"
  fi

  if [ "$PKG_NAME" != "${PKG_NAME%/*}" ] && [ -n "${PKG_NAME#*/}" ]
  then
    PKG_PLATFORM="${PKG_NAME#*/}"
    PKG_NAME="${PKG_NAME%/*}"
  else
    log_warn "package platform not specified autodetecting: all, $PLATFORM"
    PKG_NAME="${PKG_NAME%/*}"
    PKG_PLATFORM="all"
    if [ -z "$(find "$PKG_NAME/$PKG_PLATFORM")" ]
    then
      PKG_PLATFORM="$PLATFORM"
      if [ -z "$(find "$PKG_NAME/$PKG_PLATFORM")" ]
      then
        log_fatal "cannot determine platform"
        return 1
      fi
    fi
    log_info "package platform autodetected: $PKG_PLATFORM"
  fi
  log_debug "PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VER_MIN: $PKG_VER_MIN - PKG_VER_MAX: $PKG_VER_MAX"
}

#-------------------------------------------------------------------------------

findver()
(
  parse_pkg_ver_range "$1"

  for k in $(find "$PKG_NAME/$PKG_PLATFORM/*")
  do
    VERSION="${k##*/}"
    VERSION="${VERSION#$k}"
    echo | awk "\"$PKG_VER_MIN\" <= \"$VERSION\" && \"$VERSION\" <= \"$PKG_VER_MAX\" {print \"$k\"}"
  done
)

#-------------------------------------------------------------------------------

depend()
(
  parse_pkg "$1"

  for k in $(net stream "$NET_M_PKG_DIR/$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION/sys/depend")
#  for k in $(net stream "$1/sys/depend")
  do
    depend "$(depend_match_max "$k")"
  done

  echo "$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION"
#  echo "$1"
)

#-------------------------------------------------------------------------------

depend_match_max()
(
  parse_pkg_ver_range "$1"

  echo "$PKG_NAME/$PKG_PLATFORM/$PKG_VER_MAX"
)

#-------------------------------------------------------------------------------

dependinstalled()
(
  parse_pkg "$1"

  for k in $(net stream "$NET_M_PKG_DIR/$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION/sys/depend")
  do
    dependinstalled "$(depend_match_installed "$k")"
  done

  echo "$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION"
)

#-------------------------------------------------------------------------------

depend_match_installed()
(
  parse_pkg_ver_range "$1"

# if vermax is not installed but installed one acceptable then log warn
# forces one response and thus prevents ramifications
  echo "$PKG_NAME/$PKG_PLATFORM/$PKG_VER_MAX"
)

#-------------------------------------------------------------------------------

update()
(
# todo uninstall only if there are no packages that still require that version and do not support updated one
# uniform local pkg namning convention with net search
# check for new and old dependencies to add / remove
  uninstall "$@"
  install "$@"
)

#-------------------------------------------------------------------------------

install()
(
  parse_pkg "$1"

  if [ -d "$INSTALL_DIR" ] && [ "$PKG_PLATFORM" != "all" ]
  then
    log_warn "package already installed: $PACKAGE"

    if [ -n "$2" ]
    then
      lnk -cr "$DEP_DIR/$PACKAGE" "$DEP_DIR/$2/$PACKAGE"
      lnk -cr "$DEPREV_DIR/$2" "$DEPREV_DIR/$PACKAGE/$2"
    fi
  else
    mkdir -p "$DEP_DIR/$PACKAGE"
    mkdir -p "$DEPREV_DIR/$PACKAGE"

    if [ -n "$2" ]
    then
      lnk -cr "$DEP_DIR/$PACKAGE" "$DEP_DIR/$2/$PACKAGE"
      lnk -cr "$DEPREV_DIR/$2" "$DEPREV_DIR/$PACKAGE/$2"
    fi

    for k in $(net stream "$NET_M_PKG_DIR/$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION/sys/depend")
    do
      install "$(depend_match_installed "$k")" "$PACKAGE"
    done

    if [ -d "$INSTALL_DIR" ] && [ "$PKG_PLATFORM" = "all" ]
    then
      log_info "platform independent package was already installed from another platform: $PACKAGE"
      exit 0
    fi

    net get "$NET_M_PKG_DIR/$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION" "$INSTALL_DIR"

    if [ "$PKG_NAME" != "$(exec_export_var "PKG_NAME" parse_pkg_installed "$PACKAGE")" ]
    then
      log_fatal "package declaration do not match catalog path: $PKG_NAME != $(exec_export_var "PKG_NAME" parse_pkg_installed "$PACKAGE")"
      exit 1
    fi

    if [ "$PKG_PLATFORM" != "$(exec_export_var "PKG_PLATFORM" parse_pkg_installed "$PACKAGE")" ]
    then
      log_fatal "package declaration do not match catalog path: $PKG_PLATFORM != $(exec_export_var "PKG_PLATFORM" parse_pkg_installed "$PACKAGE")"
      exit 1
    fi

    if [ "$PKG_VERSION" != "$(exec_export_var "PKG_VERSION" parse_pkg_installed "$PACKAGE")" ]
    then
      log_fatal "package declaration do not match catalog path: $PKG_NAME != $(exec_export_var "PKG_VERSION" parse_pkg_installed "$PACKAGE")"
      exit 1
    fi

    integrate "$PACKAGE"
  fi
)

#-------------------------------------------------------------------------------

installed()
(
  if [ "$#" -lt "1" ]
  then
    for k in "$PKG_DIR/"*
    do
      if [ "$k" = "$PKG_DIR/*" ]
      then
        log_trace "no pkg installed!"
        break
      fi
      echo "${k#$PKG_DIR/}"
    done
  fi

  for k in "$@"
  do
#    for h in "$PKG_DIR/"*"$k"*
    for h in "$PKG_DIR/"$k
    do
#      if [ "$h" = "$PKG_DIR/*${k}*" ]
      if [ ! -e "$h" ]
      then
        log_trace "pkg search did not match *${k}*"
        break
      fi
      echo "${h#$PKG_DIR/}"
    done
  done
)

#-------------------------------------------------------------------------------

find_missing()
(
  find $(missing "$@")
)

#-------------------------------------------------------------------------------

missing()
(
  if [ "$#" -lt "1" ]
  then
    fatal "missing missing argument/s"
  fi

  for k in "$@"
  do
  (
    parse_pkg "$k"
    if [ ! -d "$INSTALL_DIR" ]
    then
      echo "$k"
    fi
  )
  done
)

#-------------------------------------------------------------------------------

uninstall()
(
# todo uninstall only if there are no packages that still require that version and do not support updated one
# if pkg is not required uninstall package and all dependencies if no other use them
# uninstall pkg then for each direct dep look if its deprev is empty then uninstall it
# if some dep were installed manually then they should probably be kept, or interactive ask for uninstalling deps
# need more commands: full auto, interactive (full list, ask if global action or one by one), just this no dep, force
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

# if not required by anyone proceed but keep dep links
#  parse_pkg "$1"
  log_info "reverse dependencies: $(ls -qA "$DEPREV_DIR/$1")"
  if [ -n "$(ls -qA "$DEPREV_DIR/$1")" ]
  then
    log_fatal "cannot remove package because others depend on it"
    exit 1
  fi
  rm -Rf "$DEPREV_DIR/$1"

  deintegrate "$1"
  rm -Rf "$PKG_DIR/$1"

# foreach dep in dep links uninstall
  for k in $(ls -qA "$DEP_DIR/$1")
  do
    log_trace "uninstall dependency: $k"
# remove it from revdep of its deps
  rm -Rf "$DEPREV_DIR/$k/$1"
    uninstall "$k"
  done

# remove dep links
  rm -Rf "$DEP_DIR/$1"
)

#-------------------------------------------------------------------------------

integrate()
(
  parse_pkg_installed "$1"

  if [ -f "$INSTALL_DIR/sys/postdownload" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/postdownload"
    . "$INSTALL_DIR/sys/postdownload"
    postdownload
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/postdownload"
  fi

  work "$PACKAGE"
  [ -z "$(ls -qA "$CONF_DIR")" ] && reset_conf "$1"
  [ -z "$(ls -qA "$DATA_DIR")" ] && reset_data "$1"
  [ -z "$(ls -qA "$HOME_DIR")" ] && reset_home "$1"
  true

  if [ -f "$INSTALL_DIR/sys/path" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/path"
    for k in $(cat "$INSTALL_DIR/sys/path")
    do
      log_trace "PATH=\$PKG_DIR/$PACKAGE/$k:\$PATH"
      echo "PATH=\$PKG_DIR/$PACKAGE/$k:\$PATH">>"$PATH_FILE"
    done
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/path"
  fi

  if [ -f "$INSTALL_DIR/sys/env" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/env"
    cat "$INSTALL_DIR/sys/env" | sed "s/\${PACKAGE}/$PACKAGE/g">>"$ENV_FILE"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/env"
  fi

  IFS_ORIG="$IFS"
  if [ -f "$INSTALL_DIR/sys/command" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/command"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/command")
    do
      IFS="$IFS_ORIG"
      CMD_PATH="${k#*=}"
      CMD_ALIAS="${k%"$CMD_PATH"}"
      CMD_ALIAS="${CMD_ALIAS%=}"
      if [ -z "$CMD_ALIAS" ]
      then
        CMD_ALIAS="${CMD_PATH##*/}"
      fi
      log_trace "CMD_ALIAS: $CMD_ALIAS - CMD_PATH: $CMD_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link $INSTALL_DIR/$CMD_PATH - $CMD_DIR/$CMD_ALIAS"
        lnk -cr "$INSTALL_DIR/$CMD_PATH" "$CMD_DIR/$CMD_ALIAS"
      else
        log_trace "link $INSTALL_DIR/$CMD_PATH - $CMD_DIR/$PKG_PLATFORM/$CMD_ALIAS"
        lnk -cr "$INSTALL_DIR/$CMD_PATH" "$CMD_DIR/$PKG_PLATFORM/$CMD_ALIAS"
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/command"
  fi

  if [ -f "$INSTALL_DIR/sys/app" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/app"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/app")
    do
      IFS="$IFS_ORIG"
      APP_PATH="${k#*=}"
      APP_ALIAS="${k%"$APP_PATH"}"
      APP_ALIAS="${APP_ALIAS%=}"
      if [ -z "$APP_ALIAS" ]
      then
        APP_ALIAS="${APP_PATH##*/}"
      fi
      log_trace "APP_ALIAS: $APP_ALIAS - APP_PATH: $APP_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link $INSTALL_DIR/$APP_PATH - $APP_DIR/$APP_ALIAS"
        lnk -cr "$INSTALL_DIR/$APP_PATH" "$APP_DIR/$APP_ALIAS"
      else
        log_trace "link $INSTALL_DIR/$APP_PATH - $APP_DIR/$PKG_PLATFORM/$APP_ALIAS"
        lnk -cr "$INSTALL_DIR/$APP_PATH" "$APP_DIR/$PKG_PLATFORM/$APP_ALIAS"
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/app"
  fi

  if [ -f "$INSTALL_DIR/sys/srv" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/srv"
    IFS=$'\n'
#    for k in $(cat "$INSTALL_DIR/sys/srv")
#    do
#      IFS="$IFS_ORIG"
#      SRV_PATH="${k#*=}"
#      SRV_ALIAS="${k%"$SRV_PATH"}"
#      SRV_ALIAS="${SRV_ALIAS%=}"
#      if [ -z "$SRV_ALIAS" ]
#      then
#        SRV_ALIAS="${SRV_PATH##*/}"
#      fi
#      log_trace "SRV_ALIAS: $SRV_ALIAS - SRV_PATH: $SRV_PATH"
#      if [ "$PKG_PLATFORM" = "all" ]
#      then
#        log_trace "link $INSTALL_DIR/$SRV_PATH - $APP_DIR/$SRV_ALIAS"
#        lnk -cr "$INSTALL_DIR/$SRV_PATH" "$APP_DIR/$SRV_ALIAS"
#      else
#        log_trace "link $INSTALL_DIR/$SRV_PATH - $APP_DIR/$PKG_PLATFORM/$SRV_ALIAS"
#        lnk -cr "$INSTALL_DIR/$SRV_PATH" "$APP_DIR/$PKG_PLATFORM/$SRV_ALIAS"
#      fi
#      IFS=$'\n'
#    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/srv"
  fi

  if [ -f "$INSTALL_DIR/sys/lib" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/lib"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/lib")
    do
      IFS="$IFS_ORIG"
      LIB_PATH="${k#*=}"
      LIB_ALIAS="${k%"$LIB_PATH"}"
      LIB_ALIAS="${LIB_ALIAS%=}"
      if [ -z "$LIB_ALIAS" ]
      then
        LIB_ALIAS="${LIB_PATH##*/}"
      fi
      log_trace "LIB_ALIAS: $LIB_ALIAS - LIB_PATH: $LIB_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link $INSTALL_DIR/$LIB_PATH - $LIB_DIR/$LIB_ALIAS"
        lnk -cfr "$INSTALL_DIR/$LIB_PATH" "$LIB_DIR/$LIB_ALIAS"
      else
        log_trace "link $INSTALL_DIR/$LIB_PATH - $LIB_DIR/$PKG_PLATFORM/$LIB_ALIAS"
        lnk -cfr "$INSTALL_DIR/$LIB_PATH" "$LIB_DIR/$PKG_PLATFORM/$LIB_ALIAS"
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/lib"
  fi

  if [ -f "$INSTALL_DIR/sys/postinstall" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/postinstall"
    . "$INSTALL_DIR/sys/postinstall"
    postinstall
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/postinstall"
  fi
)

#-------------------------------------------------------------------------------

deintegrate()
(
  parse_pkg_installed "$1"

#  work "$PACKAGE"
#  [ -z "$(ls -qA "$CONF_DIR")" ] && reset_conf "$1"
#  [ -z "$(ls -qA "$DATA_DIR")" ] && reset_data "$1"
#  [ -z "$(ls -qA "$HOME_DIR")" ] && reset_home "$1"
#  true

  if [ -f "$INSTALL_DIR/sys/path" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/path"
    for k in $(cat "$INSTALL_DIR/sys/path")
    do
      log_trace "removing PATH=\$PKG_DIR/$PACKAGE/$k:\$PATH"
      grep -vxF "PATH=\$PKG_DIR/$PACKAGE/$k:\$PATH" "$PATH_FILE" > "$PATH_FILE.tmp"
      mv "$PATH_FILE.tmp" "$PATH_FILE"
    done
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/path"
  fi

  if [ -f "$INSTALL_DIR/sys/env" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/env"
    cat "$INSTALL_DIR/sys/env" | sed "s/\${PACKAGE}/$PACKAGE/g">>"$ENV_FILE.diff"
    diff -w --old-line-format="" --unchanged-line-format="" --new-line-format="%L" "$ENV_FILE.diff" "$ENV_FILE" > "$ENV_FILE.tmp"
    while ! cmp -s "$ENV_FILE" "$ENV_FILE.tmp"
    do
      mv "$ENV_FILE.tmp" "$ENV_FILE"
      diff -w --old-line-format="" --unchanged-line-format="" --new-line-format="%L" "$ENV_FILE.diff" "$ENV_FILE" > "$ENV_FILE.tmp"
    done
    mv "$ENV_FILE.tmp" "$ENV_FILE"
    rm -f "$ENV_FILE.diff"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/env"
  fi

  IFS_ORIG="$IFS"
  if [ -f "$INSTALL_DIR/sys/command" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/command"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/command")
    do
      IFS="$IFS_ORIG"
      CMD_PATH="${k#*=}"
      CMD_ALIAS="${k%"$CMD_PATH"}"
      CMD_ALIAS="${CMD_ALIAS%=}"
      if [ -z "$CMD_ALIAS" ]
      then
        CMD_ALIAS="${CMD_PATH##*/}"
      fi
      log_trace "CMD_ALIAS: $CMD_ALIAS - CMD_PATH: $CMD_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link remove $INSTALL_DIR/$CMD_PATH - $CMD_DIR/$CMD_ALIAS"
        rm -f "$CMD_DIR/$CMD_ALIAS"
      else
        log_trace "link remove $INSTALL_DIR/$CMD_PATH - $CMD_DIR/$PKG_PLATFORM/$CMD_ALIAS"
        rm -f "$CMD_DIR/$PKG_PLATFORM/$CMD_ALIAS"
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/command"
  fi

  if [ -f "$INSTALL_DIR/sys/app" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/app"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/app")
    do
      IFS="$IFS_ORIG"
      APP_PATH="${k#*=}"
      APP_ALIAS="${k%"$APP_PATH"}"
      APP_ALIAS="${APP_ALIAS%=}"
      if [ -z "$APP_ALIAS" ]
      then
        APP_ALIAS="${APP_PATH##*/}"
      fi
      log_trace "APP_ALIAS: $APP_ALIAS - APP_PATH: $APP_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link remove $INSTALL_DIR/$APP_PATH - $APP_DIR/$APP_ALIAS"
        rm -f "$APP_DIR/$APP_ALIAS"
# todo remove parent empty dirs
      else
        log_trace "link remove $INSTALL_DIR/$APP_PATH - $APP_DIR/$PKG_PLATFORM/$APP_ALIAS"
        rm -f "$APP_DIR/$PKG_PLATFORM/$APP_ALIAS"
# todo remove parent empty dirs
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/app"
  fi

  if [ -f "$INSTALL_DIR/sys/srv" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/srv"
    IFS=$'\n'
#    for k in $(cat "$INSTALL_DIR/sys/srv")
#    do
#      IFS="$IFS_ORIG"
#      SRV_PATH="${k#*=}"
#      SRV_ALIAS="${k%"$SRV_PATH"}"
#      SRV_ALIAS="${SRV_ALIAS%=}"
#      if [ -z "$SRV_ALIAS" ]
#      then
#        SRV_ALIAS="${SRV_PATH##*/}"
#      fi
#      log_trace "SRV_ALIAS: $SRV_ALIAS - SRV_PATH: $SRV_PATH"
#      if [ "$PKG_PLATFORM" = "all" ]
#      then
#        log_trace "link remove $INSTALL_DIR/$SRV_PATH - $APP_DIR/$SRV_ALIAS"
#        rm -f "$APP_DIR/$SRV_ALIAS"
## todo remove parent empty dirs
#      else
#        log_trace "link remove $INSTALL_DIR/$SRV_PATH - $APP_DIR/$PKG_PLATFORM/$SRV_ALIAS"
#        rm -f "$APP_DIR/$PKG_PLATFORM/$SRV_ALIAS"
## todo remove parent empty dirs
#      fi
#      IFS=$'\n'
#    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/srv"
  fi

  if [ -f "$INSTALL_DIR/sys/lib" ]
  then
    log_debug "processing package system file: $INSTALL_DIR/sys/lib"
    IFS=$'\n'
    for k in $(cat "$INSTALL_DIR/sys/lib")
    do
      IFS="$IFS_ORIG"
      LIB_PATH="${k#*=}"
      LIB_ALIAS="${k%"$LIB_PATH"}"
      LIB_ALIAS="${LIB_ALIAS%=}"
      if [ -z "$LIB_ALIAS" ]
      then
        LIB_ALIAS="${LIB_PATH##*/}"
      fi
      log_trace "LIB_ALIAS: $LIB_ALIAS - LIB_PATH: $LIB_PATH"
      if [ "$PKG_PLATFORM" = "all" ]
      then
        log_trace "link remove $INSTALL_DIR/$LIB_PATH - $LIB_DIR/$LIB_ALIAS"
        rm -f "$LIB_DIR/$LIB_ALIAS"
      else
        log_trace "link remove $INSTALL_DIR/$LIB_PATH - $LIB_DIR/$PKG_PLATFORM/$LIB_ALIAS"
        rm -f "$LIB_DIR/$PKG_PLATFORM/$LIB_ALIAS"
      fi
      IFS=$'\n'
    done
    IFS="$IFS_ORIG"
  else
    log_debug "package system file is not present: $INSTALL_DIR/sys/lib"
  fi
)

#-------------------------------------------------------------------------------

reset()
(
  reset_conf "$@"
  reset_data "$@"
  reset_home "$@"
)

#-------------------------------------------------------------------------------

reset_conf()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

# todo instead of 'work "$PACKAGE"', work dirs should be parametric because of possible compatibility across some versions, or import previous version conf, etc.
  if [ -d "$INSTALL_DIR/def/conf" ]
  then
    work "$PACKAGE"
    copy -acfs "$INSTALL_DIR/def/conf" "$CONF_DIR"
  fi
)

#-------------------------------------------------------------------------------

reset_data()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

# todo instead of 'work "$PACKAGE"', work dirs should be parametric because of possible compatibility across some versions, or import previous version conf, etc.
  if [ -d "$INSTALL_DIR/def/data" ]
  then
    work "$PACKAGE"
    copy -acfs "$INSTALL_DIR/def/data" "$DATA_DIR"
  fi
)

#-------------------------------------------------------------------------------

reset_home()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

# todo instead of 'work "$PACKAGE"', work dirs should be parametric because of possible compatibility across some versions, or import previous version conf, etc.
  if [ -d "$INSTALL_DIR/def/home" ]
  then
    work "$PACKAGE"
    copy -acfs "$INSTALL_DIR/def/home" "$HOME_DIR"
  fi
)

#-------------------------------------------------------------------------------

clean()
(
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  for k in "$WRK_DIR"/*/"$PACKAGE"
  do
    log_debug "pkg clean work $k"
    [ -d "$k" ] && rm -Rf "$k"
  done
)

#-------------------------------------------------------------------------------

clean_conf()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  work "$PACKAGE"
  if [ -d "$CONF_DIR" ]
  then
    rm -Rf "$CONF_DIR"
  fi
)

#-------------------------------------------------------------------------------

clean_data()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  work "$PACKAGE"
  if [ -d "$DATA_DIR" ]
  then
    rm -Rf "$DATA_DIR"
  fi
)

#-------------------------------------------------------------------------------

clean_home()
(
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

#  parse_pkg_installed "$1"
  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  work "$PACKAGE"
  if [ -d "$HOME_DIR" ]
  then
    rm -Rf "$HOME_DIR"
  fi
)

#-------------------------------------------------------------------------------

loop_simple()
(
  if [ "$#" -lt "2" ] || [ -z "$1" ]
  then
    log_fatal "wrong arguments: $@"
    exit 1
  fi

  COMMAND="$1"
  shift
  for k in "$@"
  do
    "$COMMAND" "$k"
  done
)

#-------------------------------------------------------------------------------

loop_find()
(
  if [ "$#" -lt "3" ] || [ -z "$1" ] || [ -z "$2" ]
  then
    log_fatal "wrong arguments: $@"
    exit 1
  fi

  LIST_COMMAND="$1"
  shift
  COMMAND="$1"
  shift
  for k in $("$LIST_COMMAND" "$@")
  do
    "$COMMAND" "$k"
  done
)

#-------------------------------------------------------------------------------

main()
{
  . m-conf.lib
  . m-filesystem.lib
  . m-var.lib
  . m-exec.lib

  NET_ROOT_DIR=""
  NET_M_PKG_DIR="$NET_ROOT_DIR/m/pkg"
#  NET_M_SRC_DIR="$NET_ROOT_DIR/m/src"
#  NET_MAVEN_PKG_DIR="$NET_ROOT_DIR/maven/pkg"
#  NET_MAVEN_SRC_DIR="$NET_ROOT_DIR/maven/src"
#  NET_GITHUB_PKG_DIR="$NET_ROOT_DIR/github/pkg"
#  NET_GITHUB_SRC_DIR="$NET_ROOT_DIR/github/src"
#  NET_NPM_PKG_DIR="$NET_ROOT_DIR/npm/pkg"
#  NET_NPM_SRC_DIR="$NET_ROOT_DIR/npm/src"

  case "$1" in
    "find") true;;
    "findver") loop_simple "$@"; exit 0;;
    "depend") loop_find "find" "$@"; exit 0;;

    "dependinstalled") loop_find "find" "$@"; exit 0;;
    "install") loop_find "find" "$@"; exit 0;;
#    "install") loop_find "depend" "$@"; exit 0;;
    "installmissing") shift; loop_find "find_missing" install "$@"; exit 0;;
    "update") loop_find "installed" "$@"; exit 0;;

    "installed") true;;
    "missing") true;;
    "uninstall") loop_find "installed" "$@"; exit 0;;
    "integrate") loop_find "installed" "$@"; exit 0;;
    "deintegrate") loop_find "installed" "$@"; exit 0;;
    "reset") loop_find "installed" "$@"; exit 0;;
    "reset_conf") loop_find "installed" "$@"; exit 0;;
    "reset_data") loop_find "installed" "$@"; exit 0;;
    "reset_home") loop_find "installed" "$@"; exit 0;;
    "clean") loop_find "installed" "$@"; exit 0;;
    "clean_conf") loop_find "installed" "$@"; exit 0;;
    "clean_data") loop_find "installed" "$@"; exit 0;;
    "clean_home") loop_find "installed" "$@"; exit 0;;
#    *) exit 1;;
  esac

  "$@"
}

#-------------------------------------------------------------------------------

. m.lib

#-------------------------------------------------------------------------------
