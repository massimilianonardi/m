#!/bin/sh

#------------------------------------------------------------------------------

log()
(
#  true
  echo "$(date +"[%Y-%m-%d %H:%M:%S]")" "$@" 1>&2
)

#------------------------------------------------------------------------------

execute_remote_command()
(
  REMOTE_COMMAND="$1"

  if [ -z "$REMOTE_COMMAND" ] && [ -t 0 ]
  then
    exit
  fi

  if [ -z "$REMOTE_COMMAND" ]
  then
    REMOTE_COMMAND=$(cat)
  fi

  REMOTE_COMMAND=$(echo "$REMOTE_COMMAND" | sed 's/["\]/\\&/g')

  if [ "$REMOTE_USER" = "root" ]
  then
    setsid ssh -o 'StrictHostKeyChecking no' -l "$REMOTE_USER" "$REMOTE_HOST" "/bin/sh -c \"$REMOTE_COMMAND\""
  else
    (echo "$RSUDO_PASSWORD"; [ ! -t 0 ] && cat) | setsid ssh -o 'StrictHostKeyChecking no' -l "$REMOTE_USER" "$REMOTE_HOST" "sudo -k -S -p '' /bin/sh -c \"$REMOTE_COMMAND\""
  fi
)

#------------------------------------------------------------------------------

execute_remote_command_as_postgres()
(
  REMOTE_COMMAND="$1"

  if [ -z "$REMOTE_COMMAND" ]
  then
    REMOTE_COMMAND=$(cat)
  fi

  REMOTE_COMMAND=$(echo "$REMOTE_COMMAND" | sed 's/["\]/\\&/g')

  execute_remote_command "cd / && su postgres --preserve-environment -s /bin/sh -c \"$REMOTE_COMMAND\""
)

execute_remote_postgres_sql()
(
  REMOTE_DB="$1"
  SQL_COMMAND="$2"

  if [ -z "$SQL_COMMAND" ]
  then
    execute_remote_command_as_postgres "cat | psql '$REMOTE_DB'"
  else
    SQL_COMMAND=$(echo "$SQL_COMMAND" | sed 's/["\]/\\&/g')

    execute_remote_command_as_postgres "psql -d '$REMOTE_DB' -c \"$SQL_COMMAND\""
  fi
)

get_remote_postgres_db()
(
  REMOTE_DB="$1"

  if [ -t 0 ]
  then
    execute_remote_command_as_postgres "pg_dump '$REMOTE_DB'"
  else
    execute_remote_command_as_postgres "cat; pg_dump '$REMOTE_DB'"
  fi
)

put_remote_postgres_db()
(
  REMOTE_DB="$1"
  LOCAL_PATH="$2"

  if [ -z "$LOCAL_PATH" ] && [ -t 0 ]
  then
    exit
  fi

  if [ -z "$LOCAL_PATH" ]
  then
    execute_remote_command_as_postgres " \
      psql -d '$REMOTE_DB' -c \"SELECT pg_terminate_backend(pg_stat_activity.procpid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND procpid <> pg_backend_pid();\"; \
      psql -d '$REMOTE_DB' -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND pid <> pg_backend_pid();\"; \
      dropdb '$REMOTE_DB' && createdb '$REMOTE_DB' && (cat | psql '$REMOTE_DB')"
  else
    cat "$LOCAL_PATH" | execute_remote_command_as_postgres " \
      psql -d '$REMOTE_DB' -c \"SELECT pg_terminate_backend(pg_stat_activity.procpid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND procpid <> pg_backend_pid();\"; \
      psql -d '$REMOTE_DB' -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND pid <> pg_backend_pid();\"; \
      dropdb '$REMOTE_DB' && createdb '$REMOTE_DB' && (cat | psql '$REMOTE_DB')"
  fi
)

#------------------------------------------------------------------------------

delete_remote()
(
  REMOTE_PATH="$1"

  execute_remote_command "rm -rf '$REMOTE_PATH'"
)

replace_remote_to_local()
(
  REMOTE_PATH="$1"
  LOCAL_PATH="$2"

  REMOTE_PATH_TYPE=$(execute_remote_command "(([ -f '$REMOTE_PATH' ] && echo 'f') || (([ -d '$REMOTE_PATH' ] && echo 'd') || (echo '-1')))") && \
  log REMOTE_PATH_TYPE="$REMOTE_PATH_TYPE" && \
  if [ "$REMOTE_PATH_TYPE" = "f" ]
  then
    LOCAL_PATH_PARENT="${LOCAL_PATH%/*}"
    LOCAL_PATH_FILE="${LOCAL_PATH##*/}"
    REMOTE_PATH_PARENT="${REMOTE_PATH%/*}"
    REMOTE_PATH_FILE="${REMOTE_PATH##*/}"

    rm -rf "$LOCAL_PATH" && \
    mkdir -p "$LOCAL_PATH_PARENT" && \
    cd "$LOCAL_PATH_PARENT" && \
    execute_remote_command "cd '$REMOTE_PATH_PARENT' && tar -c -f - '$REMOTE_PATH_FILE'" | tar -x -f -
  elif [ "$REMOTE_PATH_TYPE" = "d" ]
  then
    rm -rf "$LOCAL_PATH" && \
    mkdir -p "$LOCAL_PATH" && \
    cd "$LOCAL_PATH" && \
    execute_remote_command "cd '$REMOTE_PATH' && tar -c -f - ." | tar -x -f -
  else
    log "replace_remote_to_local: $REMOTE_PATH doesn't exists"
  fi
)

replace_remote_to_local_scp()
(
  REMOTE_PATH="$1"
  LOCAL_PATH="$2"

  mkdir -p "$LOCAL_PATH"
  rm -rf "$LOCAL_PATH" && \
  setsid scp -r -o 'StrictHostKeyChecking no' ${REMOTE_USER}@${REMOTE_HOST}:"$REMOTE_PATH" "$LOCAL_PATH"
)

replace_local_to_remote()
(
  LOCAL_PATH="$1"
  REMOTE_PATH="$2"
  REMOTE_OWNER_GROUP="$3"
  REMOTE_PERMISSIONS="$4"

  if [ -f "$LOCAL_PATH" ]
  then
    LOCAL_PATH_PARENT="${LOCAL_PATH%/*}"
    LOCAL_PATH_FILE="${LOCAL_PATH##*/}"
    REMOTE_PATH_PARENT="${REMOTE_PATH%/*}"
    REMOTE_PATH_FILE="${REMOTE_PATH##*/}"

    cd "$LOCAL_PATH_PARENT" && \
    tar -c -f - "$LOCAL_PATH_FILE" | execute_remote_command \
    "rm -rf '$REMOTE_PATH' && \
    mkdir -p '$REMOTE_PATH_PARENT' && \
    cd '$REMOTE_PATH_PARENT' && \
    tar -x -f -" && \
    if [ -n "$REMOTE_OWNER_GROUP" ]; then execute_remote_command "chown -R '$REMOTE_OWNER_GROUP' '$REMOTE_PATH'"; fi && \
    if [ -n "$REMOTE_PERMISSIONS" ]; then execute_remote_command "chmod -R '$REMOTE_PERMISSIONS' '$REMOTE_PATH'"; fi
  elif [ -d "$LOCAL_PATH" ]
  then
    cd "$LOCAL_PATH" && \
    tar -c -f - . | execute_remote_command \
    "rm -rf '$REMOTE_PATH' && \
    mkdir -p '$REMOTE_PATH' && \
    cd '$REMOTE_PATH' && \
    tar -x -f -" && \
    if [ -n "$REMOTE_OWNER_GROUP" ]; then execute_remote_command "chown -R '$REMOTE_OWNER_GROUP' '$REMOTE_PATH'"; fi && \
    if [ -n "$REMOTE_PERMISSIONS" ]; then execute_remote_command "chmod -R '$REMOTE_PERMISSIONS' '$REMOTE_PATH'"; fi
  else
    log "replace_local_to_remote: $LOCAL_PATH doesn't exists"
  fi
)

replace_remote_to_remote()
(
  REMOTE_PATH="$1"
  LOCAL_PATH="$2"

#todo
)

#------------------------------------------------------------------------------

if [ "$#" -eq 1 ]
then
  echo "$RSUDO_PASSWORD"
  exit
fi

export DISPLAY=:0
export SSH_ASKPASS="$0"

log COMMAND_LINE="$@"

COMMAND="$1"
shift
log COMMAND="$COMMAND"

REMOTE_HOST="$1"
shift
log REMOTE_HOST="$REMOTE_HOST"

REMOTE_USER="$1"
shift
log REMOTE_USER="$REMOTE_USER"

log COMMAND_PARAMETERS="$@"

if [ -z "$RSUDO_PASSWORD" ]
then
  if [ -t 0 ]
  then
    echo "[rsudo] Enter password for ${REMOTE_HOST}@${REMOTE_USER}:" 1>&2
    stty -echo
    read -r RSUDO_PASSWORD
    stty echo
  else
    read -r RSUDO_PASSWORD
  fi
  export RSUDO_PASSWORD
fi

"$COMMAND" "$@"
