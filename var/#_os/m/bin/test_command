#!/bin/sh

#-------------------------------------------------------------------------------

test_files_start()
{
  TEST_DIR="/tmp/_test_files"

  mkdir -p "$TEST_DIR"
  cd "$TEST_DIR"

  mkdir -p ./aaa/bbb/ccc
  mkdir -p ./aaa/bbb/ccc/dir_empty
  mkdir -p ./aaa/ddd/eee
  mkdir -p ./aaa/colliding/fff
  mkdir -p ./aaa/colliding/sub-colliding
  mkdir -p ./000/111/222
  mkdir -p ./000/111/222/file_dir
  mkdir -p ./000/333/444
  mkdir -p ./000/colliding/555
  mkdir -p ./000/colliding/sub-colliding

  touch ./aaa/file_a1
  touch ./aaa/bbb/file_b1
  touch ./aaa/bbb/ccc/file_c1
  touch ./aaa/bbb/ccc/file_c2
  touch ./aaa/bbb/ccc/file_c3
  touch ./aaa/bbb/ccc/.file_ch1
  touch ./aaa/bbb/ccc/.file_ch2
  touch ./aaa/bbb/ccc/..file_ch3-not-hidden
  touch ./aaa/bbb/ccc/...file_ch4-not-hidden
  touch ./aaa/bbb/ccc/....file_ch5-not-hidden
  touch ./aaa/ddd/eee/file_e1
  touch ./aaa/ddd/eee/file_e2
  touch ./aaa/colliding/fff/file_f1
  echo "inside aaa" > ./aaa/colliding/sub-colliding/file_colliding
  touch ./000/111/222/file_0a
  touch ./000/111/222/file_0b
  touch ./000/111/222/xxx_file_xxx
  touch ./000/colliding/555/file_5a
  echo "inside 000" > ./000/colliding/sub-colliding/file_colliding

  ln -s ../aaa ./aaa/link-recursive
  ln -s ../aaa ./aaa/bbb/link-broken
  ln -s ./aaa/file_a1 ./link-deeper
  ln -s ../../../000/111/222/file_0a ./aaa/bbb/ccc/link-outer
  ln -s "$TEST_DIR"/000/111/222/file_0b ./aaa/bbb/ccc/link-absolute

  echo "--------------------------------------------------------------------------------"
  echo "TEST_DIR - START:"
  find "$TEST_DIR"
  echo "--------------------------------------------------------------------------------"
}

test_files_end()
{
  if [ "$TEST_DIR" = "${TEST_DIR#/tmp/*}" ]
  then
    echo "TEST_DIR=$TEST_DIR"
    echo "exiting to prevent deletions outside tmp directory"
    exit 1
  fi

  echo "--------------------------------------------------------------------------------"
  echo "TEST_DIR - END:"
  find "$TEST_DIR"
  echo "--------------------------------------------------------------------------------"

  rm -rf "$TEST_DIR"
}

#-------------------------------------------------------------------------------

test_linenum()
{
  # not working
  set -x
  echo "line: $LINENO"
  set +x
}

#-------------------------------------------------------------------------------

test_loop()
{
  test_files_start

  # DEST_DIR="${TEST_DIR}/aaa/bbb"
  DEST_DIR="${TEST_DIR}/aaa/bbb/ccc"
  # DEST_DIR="${TEST_DIR}/aaa/bbb/ccc/dir_empty"

  echo "SIMPLE EXPANSION"
  for k in "$DEST_DIR"/*
  do
    echo "$k"
  done

  echo "COMPLEX EXPANSION"
  # for k in "$DEST_DIR"/.* "$DEST_DIR"/*
  for k in "$DEST_DIR"/..?* "$DEST_DIR"/.[!.]* "$DEST_DIR"/*
  do
    echo "$k"
  done

  echo "FILTERED COMPLEX EXPANSION"
  for k in "$DEST_DIR"/..?* "$DEST_DIR"/.[!.]* "$DEST_DIR"/*
  do
    if [ -e "$k" ] || [ -L "$k" ]
    then
      echo "$k"
    fi
  done

  test_files_end
}

#-------------------------------------------------------------------------------

test_cm()
{
  test_files_start

  # touch ./a-copy-transformed
  # cp -rT ./000/colliding/sub-colliding/file_colliding ./a-copy-transformed # replaces file with file
  # cat ./a-copy-transformed
  # cp -rTf ./aaa ./a-copy-transformed # do not replaces existing file with directory
  # cp -rT ./aaa ./000 # merges aaa into 000 replacing colliding files
  # mv -f --update=all -t ./000 ./aaa/* # error existing colliding destinations
  # cat ./000/colliding/sub-colliding/file_colliding

  # touch ./a-copy-transformed
  # mkdir -p ./a-copy-transformed
  # cm -fT copy ./000/colliding/sub-colliding/file_colliding ./a-copy-transformed # replaces everything with file
  # cat ./a-copy-transformed
  # cm -Tf copy ./aaa ./a-copy-transformed # replaces everything with directory
  # cm copy ./aaa/* ./000 # error existing colliding destinations
  # cat ./000/colliding/sub-colliding/file_colliding

  # touch ./a-copy-transformed
  # mkdir -p ./a-copy-transformed
  # cm -fT move ./000/colliding/sub-colliding/file_colliding ./a-copy-transformed # replaces everything with file
  # cat ./a-copy-transformed
  # cm -Tf move ./aaa ./a-copy-transformed # replaces everything with directory
  cm move ./aaa/* ./000 # error existing colliding destinations
  cat ./000/colliding/sub-colliding/file_colliding

# copy and move must have same behaviour when something exists in destination directory
# ensure command line form of cp mv with no ambiguities (-t/-T ???)
# cm will never merge, only replace if -f

  test_files_end
}

#-------------------------------------------------------------------------------
#https://github.com/ko1nksm/readlinkf/blob/master/readlinkf.sh

test_link()
{
  mkdir -p /tmp/aaa/bbb/mmm/nnn
  touch /tmp/aaa/bbb/ccc
  ln -s ../aaa /tmp/aaa/bbb/ddd
  ln -s ./bbb/ccc /tmp/aaa/eee

  cd /tmp/aaa
  link read bbb
  link read bbb/ccc

  rm -rf /tmp/aaa
}

#-------------------------------------------------------------------------------

_test_path()
(
  EXPECTED="$1"
  shift
  # RESULT="$(path "$@")"
  RESULT="$(path "$@" 2>/dev/null)"
  EXIT_CODE="$?"
  echo "EXIT CODE: '$EXIT_CODE' --- path $@ --- RESULT: $RESULT --- EXPECTED: $EXPECTED"
)

test_path()
{
  test_files_start

  _test_path "./aaa/bbb" -c ./aaa/../aaa/./bbb
  _test_path "$TEST_DIR/aaa/bbb" -c $TEST_DIR/./aaa/../aaa/bbb
  _test_path "error - .// means relative './' or absolute '/'?" -c .//$TEST_DIR/aaa/../aaa/./bbb

  _test_path "true" -e aaa
  _test_path "false" -e zzz
  _test_path "true" -eL ./aaa/link-recursive
  _test_path "false" -eL zzz

  _test_path "$TEST_DIR/aaa" -a aaa
  _test_path "$TEST_DIR/aaa/bbb/ccc" -a aaa/bbb/ccc
  _test_path "error - doesn't exist" -a ccc

  _test_path "./aaa/file_a1" -l link-deeper
  _test_path "../aaa" -l ./aaa/link-recursive
  _test_path "$TEST_DIR/aaa/file_a1" -L link-deeper
  _test_path "$TEST_DIR/aaa" -L ./aaa/link-recursive
  _test_path "./000/111/222/file_0a" -L ./aaa/bbb/ccc/link-outer
  _test_path "./000/111/222/file_0b" -L ./aaa/bbb/ccc/link-absolute
  _test_path "$TEST_DIR/000/111/222/file_0a" -aL ./aaa/bbb/ccc/link-outer
  _test_path "$TEST_DIR/000/111/222/file_0b" -aL ./aaa/bbb/ccc/link-absolute

  _test_path "error - doesn't exist" -r eee bbb/ccc
  _test_path "../../.." -r . ./aaa/bbb/ccc
  _test_path "./aaa/bbb/ccc" -r aaa/bbb/ccc .
  _test_path "../../../aaa/bbb/ccc" -r aaa/bbb/ccc $TEST_DIR/000/111/222

  test_files_end
}

#-------------------------------------------------------------------------------

test_pkg()
{
  # log -l all -- pkg install item1/all/latest item2 item3
  # pkg installed .
  # log -l all -- pkg installed linux
  # log -l all -- pkg installed pulsar-linux-x86_64
  # log -l all -- pkg installed pulsar-*-x86_64
  # log -l all -- pkg installed pulsar-*
  # log -l all -- pkg installed "*"
  # pkg installed pulsar-*-x86_64
  # pkg installed pulsar-*
  # for k in $(pkg installed "*")
  # do
  #   echo "loop $k ok"
  # done
  # log -l all -- pkg dependinstalled "*"
  # pkg dependinstalled "*"
  # log -l all -- pkg dependmissing "*"
  # pkg dependmissing "*"
  # pkg parse_pkg pulsar/linux/1.0
  # pkg parse_pkg pulsar/linux/1.0:2.0
  # pkg parse_pkg pulsar/linux/1.0:
  # pkg parse_pkg pulsar/linux/:2.0
  # pkg parse_pkg pulsar/linux/:
  # pkg parse_pkg pulsar/*/*
  # pkg parse_pkg pulsar/*/
  # pkg parse_pkg pulsar//*
  # pkg parse_pkg pulsar//
  # pkg parse_pkg pulsar/*
  # pkg parse_pkg pulsar
  log -l all -- pkg install testpkg/all/latest
}

#-------------------------------------------------------------------------------

test_rsudo()
{
  . "/m/cmd/#rsudo_test_include"

  if [ -z "$RSUDO_PASSWORD" ]
  then
    if [ -t 0 ]
    then
      echo "[test_command rsudo] Enter password for ${REMOTE_HOST}@${REMOTE_USER}:" 1>&2
      stty -echo
      read -r RSUDO_PASSWORD
      stty echo
    else
      read -r RSUDO_PASSWORD
    fi
    export RSUDO_PASSWORD
  fi

  # rsudo execute "$REMOTE_HOST" "$REMOTE_USER" "ls -ld" # ask for password if not available in env
  # echo "$RSUDO_PASSWORD" | rsudo execute "$REMOTE_HOST" "$REMOTE_USER" "ls -ld" # command from arg
  # echo "ls -lA" | rsudo execute "$REMOTE_HOST" "$REMOTE_USER" "" # command from pipe converted into arg
  # rsudo execute "$REMOTE_HOST" "$REMOTE_USER" "" # error no command from arg or pipe
  # echo "ls -lA" | rsudo execute "$REMOTE_HOST" "$REMOTE_USER" "pwd; cat" # command from arg wich receive input from pipe
#   echo "ls -lA" | rsudo execute "$REMOTE_HOST" "$REMOTE_USER" << EOF # command from heredoc are streamed through pipe (converted manually by rsudo into arg), thus input from pipe is discarded
# pwd; cat
# EOF
#   (echo "ls -lA"; cat << EOF) | rsudo execute "$REMOTE_HOST" "$REMOTE_USER"
# pwd; cat
# echo "end of cat"
# EOF
# #   (echo "ls -lA"; cat /dev/stdin << EOF) | cat
# #   test
# # EOF
  # rsudo execute "$REMOTE_HOST" "$REMOTE_USER" sh -c "ls -ld"
  #
  # rsudo execute_as "$REMOTE_HOST" "$REMOTE_USER" postgres psql
  # echo "select * from auth.roles;" | rsudo sql "$REMOTE_HOST" "$REMOTE_USER" system
  # rsudo sql "$REMOTE_HOST" "$REMOTE_USER" system "select * from auth.roles;"
  # rsudo sql "$REMOTE_HOST" "$REMOTE_USER" system select \* from auth.roles\;
  # rsudo getdb "$REMOTE_HOST" "$REMOTE_USER" system | less
  # echo "sql prefix" | rsudo getdb "$REMOTE_HOST" "$REMOTE_USER" system | less
  # echo "sql prefix" | rsudo getdb "$REMOTE_HOST" "$REMOTE_USER" system > /tmp/!db.sql
  # rsudo getdb "$REMOTE_HOST" "$REMOTE_USER" system | rsudo putdb "$REMOTE_HOST" "$REMOTE_USER" system_duplicate
  # rsudo getdb "$REMOTE_HOST" "$REMOTE_USER" system > /tmp/!db.sql
  # rsudo putdb "$REMOTE_HOST" "$REMOTE_USER" system_duplicate /tmp/!db.sql
  # rm /tmp/!db.sql
  #
  # test_files_start
  #
  # rsudo delete "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/*" # not working because globbin must be outside quotes on server
  # rsudo delete "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}\"/*\"" # force glob outside quotes
  # rsudo delete "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/000/111/222/file_\"*\"" # force server glob by surrounding * with escaped quotes
  # solve simpler delete globbing support??? -> not easy
  #
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/link-recursive" "${TEST_DIR}/upload/link-aaa-recursive"
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/bbb/ccc/link-absolute" "${TEST_DIR}/upload/link-absolute"
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/file_a1" "${TEST_DIR}/upload/file_a1"
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/colliding/sub-colliding/file_colliding" "${TEST_DIR}/upload/file_colliding_renamed"
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/000" "${TEST_DIR}/upload/000" "admino:admino" "777"
  # rsudo put "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/000" "${TEST_DIR}/upload/0-0-0"
  #
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/link-recursive" "${TEST_DIR}/download/link-aaa-recursive"
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/bbb/ccc/link-absolute" "${TEST_DIR}/download/link-absolute"
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/file_a1" "${TEST_DIR}/download/file_a1"
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/aaa/colliding/sub-colliding/file_colliding" "${TEST_DIR}/download/file_colliding_renamed"
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/000" "${TEST_DIR}/download/000"
  # rsudo get "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}/000" "${TEST_DIR}/download/0-0-0"
  #
  # ls -lA "${TEST_DIR}/upload"
  # ls -lA "${TEST_DIR}/download"
  #
  # test_files_end
  #
  # rsudo delete "$REMOTE_HOST" "$REMOTE_USER" "${TEST_DIR}"
}

#-------------------------------------------------------------------------------

test_electron()
{
  electron /m/src/m/var/electron-app-vinted
}

#-------------------------------------------------------------------------------

test_test_args()
{
#  test_args --version
  test_args --help
#  test_args --info
#  log -l max -- test_args aaa bbb --version ccc ddd "eee fff"
#  test_args aaa bbb --help ccc ddd "eee fff"
#  test_args aaa bbb --info ccc ddd "eee fff"
  log -l max -- test_args aaa bbb -abc --test --test-all-name 111 222 333 -- ccc ddd "eee fff"
#  log -l max -- test_args aaa bbb -abc --test --test-all-name 111 222 333 ccc ddd "eee fff"
#  log -l max -- test_args aaa bbb -abc --test --test-all-name 111 222 333 --help ccc ddd "eee fff"
}

#-------------------------------------------------------------------------------

is_integer()
{
  [ "$1" -eq "$1" ] 2>/dev/null
}

_test_is_number()
{
  is_integer "$1" && echo "'$1' is an integer number - exit code: $?" || echo "'$1' is NOT an integer number - exit code: $?"
}

test_is_number()
{
  _test_is_number "a"
  _test_is_number "bbb"
  _test_is_number "2"
  _test_is_number "+2"
  _test_is_number "+02"
  _test_is_number "-2"
  _test_is_number "02"
  _test_is_number " 2"
  _test_is_number " 2 "
  _test_is_number "2.3"
  _test_is_number "2,3"
  _test_is_number " "
  _test_is_number ""
}

#-------------------------------------------------------------------------------

is_char_in_word()
{
  [ "$2" != "${2#*${1}}" ] 2>/dev/null
}

_test_is_char_in_word()
{
  is_char_in_word "$1" "$2" && echo "'$1' is in word '$2' - exit code: $?" || echo "'$1' is NOT in word '$2' - exit code: $?"
}

test_is_char_in_word()
{
  _test_is_char_in_word "a" "smart"
  _test_is_char_in_word "a" "dumb"
}

#-------------------------------------------------------------------------------

is_word_in_list()
(
  WORD="$1"
  LIST=" $2 "
  [ "$LIST" != "${LIST#* ${WORD} }" ] 2>/dev/null
)

_test_is_word_in_list()
{
  is_word_in_list "$1" "$2" && echo "'$1' is in list '$2' - exit code: $?" || echo "'$1' is NOT in list '$2' - exit code: $?"
}

test_is_word_in_list()
{
  _test_is_word_in_list "aaa" "aaa bbb ccc"
  _test_is_word_in_list "bbb" "aaa bbb ccc"
  _test_is_word_in_list "ccc" "aaa bbb ccc"
  _test_is_word_in_list "ddd" "aaa bbb ccc"
}

#-------------------------------------------------------------------------------

basic_regular_expression()
{
#  echo "$1 | ${1#-?} | ${1#-[:alpha:]} | ${1##-[:alpha:]} | ${1##-[:alpha:]*} |"
  echo "$1 | ${1#*${2}*} | ${1##*${2}*} | ${1#${2}*} | ${1#*${2}} |"
}

test_bre()
{
  # basic_regular_expression "-abcd"
  # basic_regular_expression "--abcd"
  # basic_regular_expression "-ab-cd"
  # basic_regular_expression "-ab--cd"
  # basic_regular_expression "-ab+cd"
  basic_regular_expression "-abcd" "b"
}

#-------------------------------------------------------------------------------

echo_last_arg()
{
  eval echo "\${$#}"
}

last_arg()
{
  z="$(echo_last_arg "$@")"
  echo "$@ | z=$z |"
  return 0

  n="$#"
  eval "z=\"\${$#}\""
  echo "$@ | z=$z |"
  # echo "$@ | 2 ${"$(($#))"} |"
  # echo "$@ | ${$#} | ${$(($#))} | ${$#} | ${$#} | ${$#} |"
  # echo "$@ | ${$#} | ${$(($#))} | ${$#} | ${$#} | ${$#} |"
  # echo "$@ | ${$#} | ${$(($#))} | ${$#} | ${$#} | ${$#} |"
}

test_lastarg()
{
  last_arg "-abcd" "b"
  last_arg "aaa" "bbb"
  last_arg "aaa" "bbb" "ccc" "ddd"
}

#-------------------------------------------------------------------------------

test_"$@"

#-------------------------------------------------------------------------------
