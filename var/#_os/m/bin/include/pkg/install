#!/bin/sh

#-------------------------------------------------------------------------------

install()
(
  # even if package is installed check and install also for dependencies:
  # check broken dep and pkg for all ver that depend on pkg specific to platform (eg java)
  if [ -n "$(match_installed_pkg "$1")" ]
  then
    log_warn "install - package already installed - REQUESTED: $1 - MATCHED: $PACKAGE - INSTALL_DIR: $INSTALL_DIR"
    return 0
  fi

  match_pkg "$1"
  log_debug "install - REQUESTED: $1 - MATCHED: $PACKAGE - INSTALL_DIR: $INSTALL_DIR - PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VERSION: $PKG_VERSION"

  # download m-pkg from m-store without bin into pkg-dir
  log_trace "reading required package from: $DATA_DIR/$PKG_NAME/ver/$PKG_PLATFORM/$PKG_VERSION/package"
  M_PKG="$(cat "$DATA_DIR/$PKG_NAME/ver/$PKG_PLATFORM/$PKG_VERSION/package")"
  log_trace "copying package: $DATA_DIR/$PKG_NAME/pkg/$M_PKG -> $INSTALL_DIR"
  cm -cT copy "$DATA_DIR/$PKG_NAME/pkg/$M_PKG" "$INSTALL_DIR"
  echo "$PKG_NAME" > "$INSTALL_DIR/sys/name"
  echo "$PKG_PLATFORM" > "$INSTALL_DIR/sys/platform"
  echo "$PKG_VERSION" > "$INSTALL_DIR/sys/version"

  # download bin from vendor website into m-pkg
  . "$DATA_DIR/$PKG_NAME/ver/$PKG_PLATFORM/$PKG_VERSION/link"
  if [ -z "$LINK" ]
  then
    log_fatal "download link is null"
    exit 1
  fi
  BIN_PATH="$INSTALL_DIR/bin"
  log_debug web get "$LINK" "$BIN_PATH"
  rm "$BIN_PATH"
  if [ -z "$LINK_HEADER" ]
  then
    web get "$LINK" "$BIN_PATH"
  else
    web --header "$LINK_HEADER" -- get "$LINK" "$BIN_PATH"
  fi

  # extract bin into m-pkg
  TMP_XTR="$BIN_PATH.xtr"
  log_debug "extract: LINK_EXTRACT=$LINK_EXTRACT - $BIN_PATH -> $TMP_XTR"
  if [ -z "$LINK_EXTRACT" ]
  then
    xtr -cs "$BIN_PATH" "$TMP_XTR"
  elif [ "$LINK_EXTRACT" = "none" ]
  then
    log_trace "cm -T move $BIN_PATH $TMP_XTR"
    # cm -T move "$BIN_PATH" "$TMP_XTR"
    cm -c move "$BIN_PATH" "$TMP_XTR"
  elif [ "$LINK_EXTRACT" = "exact" ]
  then
    xtr -c "$BIN_PATH" "$TMP_XTR"
  elif [ "$LINK_EXTRACT" = "link" ]
  then
    xtr -c "$BIN_PATH" "$BIN_PATH.orig"
    lnk -r "$BIN_PATH.orig"/* "$TMP_XTR"
  else
    log_fatal "unrecognized LINK_EXTRACT=$LINK_EXTRACT"
    exit 1
  fi
  rm "$BIN_PATH"
  cm -T move "$TMP_XTR" "$BIN_PATH"

  # read and install dependencies
  DEPEND="$(cat "$INSTALL_DIR/sys/depend")"
  if [ -n "$DEPEND" ]
  then
    pkg install $DEPEND
  fi

  # integrate m-pkg
  # integrate "$PACKAGE"
  integrate
)

#-------------------------------------------------------------------------------

uninstall()
(
  match_installed_pkg "$1"

  # deintegrate m-pkg, if fails because some other pkg depends on it return 1 (not exit)
  deintegrate "$PACKAGE"

  # uninstall unneeded dependencies
  # uninstalldepend "$PACKAGE"
  DEPEND="$(cat "$INSTALL_DIR/sys/depend")"
  if [ -n "$DEPEND" ]
  then
    pkg uninstall $DEPEND
  fi

  # delete package from pkg dir
  rm -rf "$INSTALL_DIR"



# todo uninstall only if there are no packages that still require that version and do not support updated one
# if pkg is not required uninstall package and all dependencies if no other use them
# uninstall pkg then for each direct dep look if its deprev is empty then uninstall it
# if some dep were installed manually then they should probably be kept, or interactive ask for uninstalling deps
# need more commands: full auto, interactive (full list, ask if global action or one by one), just this no dep, force

#  parse_pkg "$1"
  log_info "reverse dependencies: $(ls -qA "$DEPREV_DIR/$1")"
  if [ -n "$(ls -qA "$DEPREV_DIR/$1")" ]
  then
    log_fatal "cannot remove package because others depend on it"
    exit 1
  fi
  rm -Rf "$DEPREV_DIR/$1"

  deintegrate "$1"
  rm -Rf "$PKG_DIR/$1"

# foreach dep in dep links uninstall
  for k in $(ls -qA "$DEP_DIR/$1")
  do
    log_trace "uninstall dependency: $k"
# remove it from revdep of its deps
  rm -Rf "$DEPREV_DIR/$k/$1"
    uninstall "$k"
  done

# remove dep links
  rm -Rf "$DEP_DIR/$1"
)

#-------------------------------------------------------------------------------

update()
(
# todo uninstall only if there are no packages that still require that version and do not support updated one
# uniform local pkg namning convention with net search
# check for new and old dependencies to add / remove
  uninstall "$@"
  install "$@"
)

#-------------------------------------------------------------------------------

installdepend()
{
  true
}

#-------------------------------------------------------------------------------

uninstalldepend()
{
  true
}

#-------------------------------------------------------------------------------

installmissing()
{
  true
}

#-------------------------------------------------------------------------------
