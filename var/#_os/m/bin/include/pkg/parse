#!/bin/sh

#-------------------------------------------------------------------------------

compare_versions()
(
  if [ "$#" -lt "2" ]
  then
    log_fatal "compare_versions - wrong arguments: $@"
    exit 1
  fi

  if [ "$1" = "$2" ]
  then
    echo "0"
    return 0
  elif [ "$1" = "latest" ]
  then
    echo "-1"
    return 0
  elif [ "$2" = "latest" ]
  then
    echo "1"
    return 0
  fi

  MAJ_1="${1%%"."*}"
  MAJ_2="${2%%"."*}"
  log_trace "compare_versions - $@ - MAJ_1=$MAJ_1 - MAJ_2=$MAJ_2"
  if is_integer "$MAJ_1" && is_integer "$MAJ_2"
  then
    if [ "$MAJ_1" -lt "$MAJ_2" ]
    then
      echo "1"
    elif [ "$MAJ_1" -gt "$MAJ_2" ]
    then
      echo "-1"
    elif [ "$MAJ_1" -eq "$MAJ_2" ]
    then
      MIN_1="${1#$MAJ_1}"
      MIN_2="${2#$MAJ_2}"
      MIN_1="${MIN_1#"."}"
      MIN_2="${MIN_2#"."}"
      MIN_1="${MIN_1%%"."*}"
      MIN_2="${MIN_2%%"."*}"
      log_trace "compare_versions - $@ - MIN_1=$MIN_1 - MIN_2=$MIN_2"
      if is_integer "$MIN_1" && is_integer "$MIN_2"
      then
        if [ "$MIN_1" -lt "$MIN_2" ]
        then
          echo "1"
        elif [ "$MIN_1" -gt "$MIN_2" ]
        then
          echo "-1"
        elif [ "$MIN_1" -eq "$MIN_2" ]
        then
          BUILD_1="${1#${MAJ_1}"."$MIN_1}"
          BUILD_2="${2#${MAJ_2}"."$MIN_2}"
          BUILD_1="${BUILD_1#"."}"
          BUILD_2="${BUILD_2#"."}"
          BUILD_1="${BUILD_1%%-*}"
          BUILD_2="${BUILD_2%%-*}"
          log_trace "compare_versions - $@ - BUILD_1=$BUILD_1 - BUILD_2=$BUILD_2"
          if is_integer "$BUILD_1" && is_integer "$BUILD_2"
          then
            if [ "$BUILD_1" -lt "$BUILD_2" ]
            then
              echo "1"
            elif [ "$BUILD_1" -gt "$BUILD_2" ]
            then
              echo "-1"
            elif [ "$BUILD_1" -eq "$BUILD_2" ]
            then
              echo "0"
            fi
          elif [ -z "$BUILD_1" ] && [ -z "$BUILD_2" ]
          then
            echo "0"
          elif [ -z "$BUILD_1" ]
          then
            echo "1"
          elif [ -z "$BUILD_2" ]
          then
            echo "-1"
          else
            log_fatal "compare_versions - wrong arguments (BUILD): $@ - MIN_1=$MIN_1 - MIN_2=$MIN_2"
            exit 1
          fi
        fi
      elif [ -z "$MIN_1" ] && [ -z "$MIN_2" ]
      then
        echo "0"
      elif [ -z "$MIN_1" ]
      then
        echo "1"
      elif [ -z "$MIN_2" ]
      then
        echo "-1"
      else
        log_fatal "compare_versions - wrong arguments (MIN): $@ - MIN_1=$MIN_1 - MIN_2=$MIN_2"
        exit 1
      fi
    fi
  else
    log_fatal "compare_versions - wrong arguments (not numeric): $@"
    exit 1
  fi
)

#-------------------------------------------------------------------------------

parse_pkg()
{
  PKG_NAME="${1%%/*}"
  if [ "$PKG_NAME" = "$1" ]
  then
    PKG_FORMAT="name"
  else
    PKG_FORMAT="name+platform"
  fi

  PKG_PLATFORM="${1#"$PKG_NAME"}"
  PKG_PLATFORM="${PKG_PLATFORM#/}"
  PKG_PLATFORM="${PKG_PLATFORM%%/*}"

  PKG_VERSION="${1#"$PKG_NAME"}"
  PKG_VERSION="${PKG_VERSION#/}"
  PKG_VERSION="${PKG_VERSION#"$PKG_PLATFORM"}"
  PKG_VERSION="${PKG_VERSION#/}"

  if [ "$1" = "$PKG_NAME/$PKG_PLATFORM/$PKG_VERSION" ]
  then
    PKG_FORMAT="exact"
  fi

  # if [ -z "$PKG_PLATFORM" ] || [ "$PKG_PLATFORM" = "*" ]
  # then
  #   PKG_PLATFORM="$PLATFORM"
  # fi
  if [ "$PKG_PLATFORM" = "*" ]
  then
    PKG_PLATFORM="$PLATFORM"
  fi

  if [ "$PKG_VERSION" = "*" ]
  then
    PKG_VERSION=""
  fi

  PKG_VER_MIN="${PKG_VERSION%:*}"
  PKG_VER_MAX="${PKG_VERSION#*:}"

  if [ "$PKG_VERSION" = "${PKG_VER_MIN}:${PKG_VER_MAX}" ]
  then
    PKG_FORMAT="range"
    PKG_VERSION="$PKG_VER_MAX"

    # if [ -z "$PKG_VER_MIN" ]
    # then
    #   PKG_VER_MIN="0"
    # fi
    #
    # if [ -z "$PKG_VER_MAX" ]
    # then
    #   PKG_VER_MAX="latest"
    # fi
  fi

  if [ -z "$PKG_VER_MIN" ]
  then
    PKG_VER_MIN="0"
  fi

  if [ -z "$PKG_VER_MAX" ]
  then
    PKG_VER_MAX="latest"
  fi

  PACKAGE="$PKG_NAME"
  if [ -n "$PKG_PLATFORM" ] && [ "$PKG_PLATFORM" != "all" ]
  then
    PACKAGE="$PACKAGE-$PKG_PLATFORM"
  fi
  if [ -n "$PKG_VERSION" ] && [ "$PKG_VERSION" != "latest" ]
  then
    PACKAGE="$PACKAGE-$PKG_VERSION"
  fi

  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  log_debug "parse_pkg - ARG: $1 - PACKAGE: $PACKAGE - INSTALL_DIR: $INSTALL_DIR - PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VERSION: $PKG_VERSION - PKG_VER_MIN: $PKG_VER_MIN - PKG_VER_MAX: $PKG_VER_MAX - PKG_FORMAT: $PKG_FORMAT"

  # set | sed '/XDG/q' | grep PKG
}

#-------------------------------------------------------------------------------

parse_pkg_exact()
{
  parse_pkg "$@"

  if [ "$PKG_FORMAT" != "exact" ]
  then
    log_fatal "parse_pkg_range - package format is not 'exact' - PKG_FORMAT=$PKG_FORMAT"
    exit 1
  fi
}

#-------------------------------------------------------------------------------

parse_pkg_range()
{
  parse_pkg "$@"

  if [ "$PKG_FORMAT" != "range" ]
  then
    log_fatal "parse_pkg_range - package format is not 'range' - PKG_FORMAT=$PKG_FORMAT"
    exit 1
  fi
}

#-------------------------------------------------------------------------------

parse_pkg_installed()
{
  if [ -z "$1" ]
  then
    log_fatal "missing arguments"
    exit 1
  fi

  PACKAGE="$1"
  INSTALL_DIR="$PKG_DIR/$PACKAGE"

  if [ ! -d "$INSTALL_DIR" ]
  then
    log_fatal "package $1 is not installed: $INSTALL_DIR"
    exit 1
  fi

  if [ ! -f "$INSTALL_DIR/sys/name" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/name"
#    exit 1
  else
    PKG_NAME="$(cat "$INSTALL_DIR/sys/name")"
    if [ -z "$PKG_NAME" ]
    then
      log_fatal "package system file is not correct: PKG_NAME=$PKG_NAME"
      exit 1
    fi
  fi

  if [ ! -f "$INSTALL_DIR/sys/platform" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/platform"
#    exit 1
  else
    PKG_PLATFORM="$(cat "$INSTALL_DIR/sys/platform")"
    if [ -z "$PKG_PLATFORM" ]
    then
      log_fatal "package system file is not correct: PKG_PLATFORM=$PKG_PLATFORM"
      exit 1
    fi
  fi

  if [ ! -f "$INSTALL_DIR/sys/version" ]
  then
    log_fatal "package system file is not present: $INSTALL_DIR/sys/version"
#    exit 1
  else
    PKG_VERSION="$(cat "$INSTALL_DIR/sys/version")"
    if [ -z "$PKG_VERSION" ]
    then
      log_fatal "package system file is not correct: PKG_VERSION=$PKG_VERSION"
      exit 1
    fi
  fi

  log_debug "ARG: $1 - PKG_NAME: $PKG_NAME - PKG_PLATFORM: $PKG_PLATFORM - PKG_VERSION: $PKG_VERSION - PACKAGE: $PACKAGE - INSTALL_DIR: $INSTALL_DIR"
}

#-------------------------------------------------------------------------------
