#!/bin/sh

#-------------------------------------------------------------------------------

find_null()
(
  find "$@" -exec printf '%s\0' {} +
)

#-------------------------------------------------------------------------------

find_ls()
(
  if [ -n "$1" ]
  then
    if [ -d "$1" ]
    then
      cd "$1"
    else
      exit 1
    fi
  fi
  
  find "./" -path "./*/*" -prune -o -path "./*" ! -path "./" -print | sed "s|^\./||"
)

#-------------------------------------------------------------------------------

find_src()
(
  if [ "$MKCONF_DIR" = "$SOURCE_DIR/$MKCONF_SUBDIR" ]
  then
    find_ls "$SOURCE_DIR" | grep -vxF "$MKCONF_SUBDIR"
  else
    find_ls "$SOURCE_DIR"
  fi
)

#-------------------------------------------------------------------------------

loop_ls()
(
  find_ls "$1" | while read -r k
  do
#    echo ---$k---
    printf '%s\n' "$k"
  done
# really shift one arg
sh -c 'printf '%s' "$@"' "$@"
)

#-------------------------------------------------------------------------------

loop_find()
(
  find "$@" -exec sh -c '
  for k in "$@"
  do
    printf '%s\n' "$k"
  done
  ' find-script [] +
)

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

# find with patterns to output list a specific separator and with or without dirpath
# find exec script as: find args -exec sh -c "script" find_script {} +
# filterout as: grep -v -x -F -f <(echo list of elements to remove with newline as separator) <(echo list to process with newline as separator)
# filterout as: grep -v -x -F -e "list of elements to remove with newline as separator" <(echo list to process with newline as separator)
# filterin as: grep -q -x -F -f <(echo list of elements to remove with newline as separator) <(echo list to process with newline as separator)

#-------------------------------------------------------------------------------

mk_find_src()
(
  SKIP=".mk"
  find "$@" ! -name "$SKIP"
)

#-------------------------------------------------------------------------------

lsdir()
(
  if [ -z "$1" ]
  then
    DIR="."
  else
    DIR="$1"
  fi
  
  SKIP=".mk"
  
  cd "$DIR"
  find . -maxdepth 1 ! -name "." ! -name "$SKIP" | sed "s|^\./||"
)

#-------------------------------------------------------------------------------

lsdirall()
(
  ls -A "$1"
)

#-------------------------------------------------------------------------------

findexec()
(
  find "$1" -maxdepth 1 ! -name "." ! -name ".mk" -exec $2
)

#-------------------------------------------------------------------------------

findprint0()
(
  find "$1" -maxdepth 1 ! -name "." ! -name ".mk" -exec printf '%s\0' {} +
)

#-------------------------------------------------------------------------------

testargs()
(
  for k in "$@"; do echo "$k"; done
)

#-------------------------------------------------------------------------------

#.[!.]* ..?*
#The first of these two globs matches all filenames beginning with a dot, followed by any character other than a dot. 
#The second matches all filenames beginning with two dots and at least one other character. 
#Between the two of them, they match all filenames beginning with dot except for “.” and “..” which have their obvious special meanings.
#Keep in mind that if a glob does not match any filenames, it will remain as a single unexpanded word rather than disappearing entirely from the command. 
#You may need to account for this by testing for existence of matches or ignoring/hiding errors.
#
#handler () { case "$1" in *~) [ -f "$1" ] && rm -f "$1" ;; esac ; }
#myfind /tmp handler   # Remove all backup files found in /tmp
#
#For each file in the recursive traversal of “$1”, a function or command “$2” will be evaluated with the directory containing the file 
#as the present working directory and with the filename appended to the end of the command line. 
#The third positional parameter “$3” is used internally in the recursion to protect against symlink traversal; 
#it contains the expected physical pathname PWD should contain after the cd -P "$1" command completes provided “$1” is not a symbolic link.

myfind()
(
  cd -P -- "$1"
  [ $# -lt 3 ] || [ "$PWD" = "$3" ] || exit 1
  for i in ..?* .[!.]* *
  do
    [ -e "$i" ] && eval "$2 \"\$i\""
    [ -d "$i" ] && myfind "$i" "$2" "${PWD%/}/$i"
  done
)

#-------------------------------------------------------------------------------

#This function simply replaces every instance of «'» (single quote) within the string with «'\''» (single quote, backslash, single quote, single quote), 
#then puts single quotes at the beginning and end of the string. Since the only character 
#whose meaning is special within single quotes is the single quote character itself, this is totally safe. 
#Trailing newlines are handled correctly, and the single quote at the end doubles as a safety character 
#to prevent command substitution from clobbering the trailing newlines, should one want to do something like:
#quoted=$(quote "$var")

quote()
{
  printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
}

#-------------------------------------------------------------------------------

#myarray=$(save "$@")
#set -- foo bar baz boo
#eval "set -- $myarray"
#
#Here, the quoting has prepared “$array” for use with the eval command, to restore the positional parameters. 
#Other possibilities such as myarray=$(save *) are also possible, as well as programmatic generation of values for the ‘array’ variable.
#One could also generate an ‘array’ variable from the output of the find command, 
#either using a cleverly constructed command with the -exec option or ignoring the possibility of newlines in pathnames 
#and using the sed command for prepping find’s results for xargs.

findarray()
{
find "$@" -exec sh -c "for i do printf %s\\\\n \"\$i\" \\
| sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\\$s/\\\$/' \\\\\\\\/\"
done" dummy '{}' +
}

#Such a script allows things like:
#
#old=$(save "$@")
#eval "set -- $(findarray path)"
#for i do command "$i" ; done
#eval "set -- $old"


save()
{
  for i in "$@"
  do
    printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"
  done
  echo " "
}

#-------------------------------------------------------------------------------
