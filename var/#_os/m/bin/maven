#!/bin/sh

#-------------------------------------------------------------------------------

maven_parse_pkg()
{
  if [ -z "$1" ]
  then
    log_fatal "wrong arguments: $@"
    exit 1
  fi

  MAVEN_GROUP="${1%%/*}"
  MAVEN_ARTIFACT="${1#"$MAVEN_GROUP"}"
  MAVEN_ARTIFACT="${MAVEN_ARTIFACT#/}"
  MAVEN_ARTIFACT="${MAVEN_ARTIFACT%%/*}"
  MAVEN_VERSION="${1#"$MAVEN_GROUP"}"
  MAVEN_VERSION="${MAVEN_VERSION#/}"
  MAVEN_VERSION="${MAVEN_VERSION#"$MAVEN_ARTIFACT"}"
  MAVEN_VERSION="${MAVEN_VERSION#/}"

  log_debug "ARG: $1 - MAVEN_GROUP: $MAVEN_GROUP - MAVEN_ARTIFACT: $MAVEN_ARTIFACT - MAVEN_VERSION: $MAVEN_VERSION"
}

#-------------------------------------------------------------------------------

find()
(
  maven_parse_pkg "$1"

#  SEARCH_URL="https://search.maven.org/solrsearch/select?q=p:\"jar\""
#  [ -n "$MAVEN_GROUP" ] && SEARCH_URL="${SEARCH_URL} AND g:\"$MAVEN_GROUP\""
  SEARCH_URL="https://search.maven.org/solrsearch/select?q="
  [ -n "$MAVEN_GROUP" ] && SEARCH_URL="${SEARCH_URL}g:\"$MAVEN_GROUP\""
  [ -n "$MAVEN_ARTIFACT" ] && SEARCH_URL="${SEARCH_URL} AND a:\"$MAVEN_ARTIFACT\""
  if [ "$MAVEN_VERSION" = "*" ] || [ -z "$MAVEN_VERSION" ] || [ "$MAVEN_VERSION" = "latest" ]
  then
    SEARCH_URL="${SEARCH_URL}&core=gav"
  elif [ -n "$MAVEN_VERSION" ]
  then
    SEARCH_URL="${SEARCH_URL} AND v:\"$MAVEN_VERSION\""
  fi

  SEARCH_URL="${SEARCH_URL}&rows=100&wt=json"
  if [ -z "$MAVEN_VERSION" ] || [ "$MAVEN_VERSION" = "latest" ]
  then
    web -q get "$SEARCH_URL" - | sed 's/,/\n/g' | grep '"id":"' | sed 's/.*"id":"//g' | sed 's/"//g' | sed 's/:/\//g' | head -1
  else
    web -q get "$SEARCH_URL" - | sed 's/,/\n/g' | grep '"id":"' | sed 's/.*"id":"//g' | sed 's/"//g' | sed 's/:/\//g'
  fi
)

#-------------------------------------------------------------------------------

get()
(
  maven_parse_pkg "$1"

  if [ -z "$MAVEN_GROUP" ] || [ -z "$MAVEN_ARTIFACT" ] || [ -z "$MAVEN_VERSION" ]
  then
    log_fatal "net store get maven pkg requires full package description (\$MAVEN_GROUP/\$MAVEN_ARTIFACT/\$MAVEN_VERSION): $@"
    exit 1
  fi

  GET_URL="https://search.maven.org/remotecontent?filepath=$(echo "$MAVEN_GROUP" | sed "s/\./\//g")/$MAVEN_ARTIFACT/$MAVEN_VERSION"
  FILE="$MAVEN_ARTIFACT-$MAVEN_VERSION"

  DEST="$2"
  if [ -z "$2" ]
  then
    DEST="$(pwd)"
  elif [ ! -d "$2" ]
  then
    log_info "destination directory does not exist, creating it: $2"
    mkdir -p "$2"
  fi

  if [ -z "$SWITCH_j" ] && [ -z "$SWITCH_d" ] && [ -z "$SWITCH_s" ] && [ -z "$SWITCH_p" ]
  then
#    web -q get "$GET_URL/$FILE-uber.jar" "$DEST/$FILE.jar" || web -q get "$GET_URL/$FILE.zip" "$DEST/$FILE.zip" || web -q get "$GET_URL/$FILE.jar" "$DEST/$FILE.jar"
    if web -q get "$GET_URL/$FILE.zip" "$DEST/$FILE.zip"
    then
      xtr -cfs "$DEST/$FILE.zip" "$DEST/$FILE"
    else
      web -q get "$GET_URL/$FILE-uber.jar" "$DEST/$FILE.jar" || web -q get "$GET_URL/$FILE.jar" "$DEST/$FILE.jar" || rm -f "$DEST/$FILE.jar"
      web -q get "$GET_URL/$FILE-javadoc.jar" "$DEST/$FILE-javadoc.jar" || rm -f "$DEST/$FILE-javadoc.jar"
      web -q get "$GET_URL/$FILE-sources.jar" "$DEST/$FILE-sources.jar" || rm -f "$DEST/$FILE-sources.jar"
      web -q get "$GET_URL/$FILE.pom" "$DEST/$FILE.pom" || rm -f  "$DEST/$FILE.pom"
    fi
    rm -f "$DEST/$FILE.zip"
  else
    if [ -n "$SWITCH_z" ]
    then
      web -q get "$GET_URL/$FILE.zip" "$DEST/$FILE.zip" && xtr -cfs "$DEST/$FILE.zip" "$DEST/$FILE"
      rm -f "$DEST/$FILE.zip"
    fi

    if [ -n "$SWITCH_j" ]
    then
      web -q get "$GET_URL/$FILE-uber.jar" "$DEST/$FILE.jar" || rm -f "$DEST/$FILE.jar"
      web -q get "$GET_URL/$FILE.jar" "$DEST/$FILE.jar" || rm -f "$DEST/$FILE.jar"
    fi

    if [ -n "$SWITCH_d" ]
    then
      web -q get "$GET_URL/$FILE-javadoc.jar" "$DEST/$FILE-javadoc.jar" || rm -f "$DEST/$FILE-javadoc.jar"
    fi

    if [ -n "$SWITCH_s" ]
    then
      web -q get "$GET_URL/$FILE-sources.jar" "$DEST/$FILE-sources.jar" || rm -f "$DEST/$FILE-sources.jar"
    fi

    if [ -n "$SWITCH_p" ]
    then
      web -q get "$GET_URL/$FILE.pom" "$DEST/$FILE.pom" || rm -f "$DEST/$FILE.pom"
    fi
  fi

#  BIN_ZIP="$DEST"
  SRC_JAR="$DEST"

  if [ -n "$SWITCH_t" ]
  then
    if [ -d "$DEST/$FILE" ]
    then
      mv "$DEST/$FILE" "$DEST/bin"
    fi

    if [ -f "$DEST/$FILE.jar" ]
    then
      mkdir -p "$DEST/bin"
#      mv "$DEST/$FILE-uber.jar" "$DEST/bin"
      mv "$DEST/$FILE.jar" "$DEST/bin"
    fi

    if [ -f "$DEST/$FILE-javadoc.jar" ]
    then
      mkdir -p "$DEST/doc"
      mv "$DEST/$FILE-javadoc.jar" "$DEST/doc"
    fi

    if [ -f "$DEST/$FILE-sources.jar" ]
    then
      mkdir -p "$DEST/src"
      mv "$DEST/$FILE-sources.jar" "$DEST/src"
      SRC_JAR="$DEST/src"
    fi

    if [ -f "$DEST/$FILE.pom" ]
    then
      mkdir -p "$DEST/src"
      mv "$DEST/$FILE.pom" "$DEST/src"
    fi
  fi

#  if [ -n "$SWITCH_x" ] && [ -f "$BIN_ZIP/$FILE.zip" ]
#  then
#    xtr -cfs "$BIN_ZIP.zip" "$BIN_ZIP"
#    rm -f "$BIN_ZIP.zip"
#  fi

  if [ -n "$SWITCH_x" ] && [ -f "$SRC_JAR/$FILE-sources.jar" ]
  then
    xtr -c "$SRC_JAR/$FILE-sources.jar" "$SRC_JAR/src/main"
    rm -f "$SRC_JAR/$FILE-sources.jar"
  fi
)

#-------------------------------------------------------------------------------

stream()
(
# todo xtr stream of specific file
  log_debug "stream request for maven file"
  log_fatal "stream request for maven file -> not yet implemented"
  exit 1
)

#-------------------------------------------------------------------------------

main()
{
  case "$1" in
    "find") true;;
    "get") true;;
    "stream") true;;
    *) exit 1;;
  esac

  "$@"
}

#-------------------------------------------------------------------------------

ARGS_PARSE="true"
ARGS_SWITCHES="jdsptxz"

. m.lib

#-------------------------------------------------------------------------------
