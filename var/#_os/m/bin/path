#!/bin/sh

#-------------------------------------------------------------------------------

path_exist()
{
  [ -e "$1" ] 2>/dev/null
}

#-------------------------------------------------------------------------------

path_readlink()
(
  if [ -L "$1" ]
  then
#    TARGET=$(ls -ld -- "$1" 2>/dev/null) || exit 1
    TARGET="$(ls -ld -- "$1")"
    TARGET="${TARGET#*" $1 -> "}"
  elif [ -e "$1" ]
  then
    TARGET="$1"
    if [ "$TARGET" = "${TARGET#/}" ] && [ "$TARGET" = "${TARGET#./}" ] && [ "$TARGET" = "${TARGET#../}" ]
    then
      TARGET="./$TARGET"
    fi
  else
    log_fatal "path doesn't exist!"
    exit 1
  fi

  echo "$TARGET"
)

#-------------------------------------------------------------------------------

path_absolute()
{
  if [ -d "$1" ]
  then
    cd -L -- "$1" && pwd -L
  elif [ -f "$1" ]
  then
    # echo "$(cd -L -- "${1%/*}" && pwd -L)/${1##*/}"
    echo "$(cd -L -- "$(dirname -- "$1")" && pwd -L)/$(basename -- "$1")"
  else
    log_fatal "path doesn't exist!"
    exit 1
  fi
}

#-------------------------------------------------------------------------------

path_resolve_links_absolute()
(
  if [ -d "$1" ]
  then
    cd -P -- "$1" && pwd -P
  elif [ -f "$1" ] && [ -L "$1" ]
  then
    TARGET="$(ls -ld -- "$1")"
    TARGET="${TARGET#*" $1 -> "}"
    if [ "$TARGET" = "${TARGET#/}" ]
    then
      # relative link
      TARGET="$(dirname -- "$1")/$TARGET"
    fi
    echo "$(cd -P -- "$(dirname -- "$TARGET")" && pwd -P)/$(basename -- "$TARGET")"
  elif [ -f "$1" ]
  then
    echo "$(cd -P -- "$(dirname -- "$1")" && pwd -P)/$(basename -- "$1")"
  else
    log_fatal "path doesn't exist!"
    exit 1
  fi
)

#-------------------------------------------------------------------------------

path_resolve_links()
(
  if [ "$1" != "${1#/}" ]
  then
    path_resolve_links_absolute "$1"
  else
    # path_relativize "$(path_resolve_links_absolute "$1")" "$(pwd -P)"
    path_relativize "$(path_resolve_links_absolute "$1")" "$(pwd -L)"
  fi
)

#-------------------------------------------------------------------------------

path_clean()
(
  if [ "$1" != "${1#/}" ]
  then
    path_absolute "$1"
  else
    path_relativize "$(path_absolute "$1")" "$(pwd -L)"
  fi
)

#-------------------------------------------------------------------------------

path_relativize()
(
  # PATH_CONVERTED="$1"
  # PATH_REFERENCE="$2"
  PATH_CONVERTED="$(path_absolute "$1")" || exit "$?"
  PATH_REFERENCE="$(path_absolute "$2")" || exit "$?"

  if [ "$PATH_CONVERTED" != "${PATH_CONVERTED#$PATH_REFERENCE}" ]
  then
    PATH_CONVERTED=".${PATH_CONVERTED#$PATH_REFERENCE}"
  else
    PATH_REFERENCE_PREFIX="$PATH_REFERENCE"
    PATH_CONVERTED_PREFIX=""

    while [ "$PATH_CONVERTED" = "${PATH_CONVERTED#$PATH_REFERENCE_PREFIX}" ]
    do
      PATH_REFERENCE_PREFIX="${PATH_REFERENCE_PREFIX%/*}"
      PATH_CONVERTED_PREFIX="${PATH_CONVERTED_PREFIX}../"
    done

    PATH_CONVERTED="${PATH_CONVERTED#${PATH_REFERENCE_PREFIX}}"
    PATH_CONVERTED="${PATH_CONVERTED#/}"
    PATH_CONVERTED="${PATH_CONVERTED_PREFIX}${PATH_CONVERTED}"
    PATH_CONVERTED="${PATH_CONVERTED%/}"
  fi

  echo "${PATH_CONVERTED}"
)

#-------------------------------------------------------------------------------

main()
{
  # a absolute,
  # c canonicalize or clean,
  # e exist, operates after all other switches (especially r-relativize)
  # l readlink, 1-arg, incompatible with any other switch, just reads the link "content"
  # L resolve links, resolves path and basename links an gives the real path relative-canonicalized or absolute depending on source
  # r relativize 2-args
  # todo: "recursive L" -> 'R' with infinite loop detection

  if [ "$#" -gt "2" ]
  then
    log_fatal "wrong number of arguments! maximum 2 arguments, provided: '$#'"
    exit 1
  elif [ "$#" = "2" ] && [ -n "$SWITCH_l" ]
  then
    log_fatal "wrong number of arguments! this switch requires only 1 arguments, provided: '$#'"
    exit 1
  elif [ "$#" = "2" ] && [ -z "$SWITCH_r" ]
  then
    log_fatal "wrong number of arguments! 2 arguments requires 'r' switch, provided switches: '$#'"
    exit 1
  elif [ "$#" = "2" ] #&& [ -n "$SWITCH_r" ]
  then
    if [ ! -e "$1" ] || [ ! -d "$2" ]
    then
      log_fatal "first argument '$1' must exist and second argument '$2' must exist and must be a directory"
      exit 1
    fi

    ARG_1="$1"
    ARG_2="$2"

    if [ -n "$SWITCH_c" ]
    then
      ARG_1="$(path_clean "$ARG_1")" && ARG_2="$(path_clean "$ARG_2")" || exit "$?"
    fi

    if [ -n "$SWITCH_L" ]
    then
      ARG_1="$(path_resolve_links "$ARG_1")" && ARG_2="$(path_resolve_links "$ARG_2")" || exit "$?"
    fi

    if [ -n "$SWITCH_a" ]
    then
      ARG_1="$(path_absolute "$ARG_1")" && ARG_2="$(path_absolute "$ARG_2")" || exit "$?"
    fi

    if [ -n "$SWITCH_e" ]
    then
      path_exist "$(path_relativize "$ARG_1" "$ARG_2")"
      exit "$?"
    fi

    path_relativize "$ARG_1" "$ARG_2"
  elif [ "$#" = "1" ]
  then
    ARG_1="$1"

    if [ -n "$SWITCH_l" ]
    then
      if [ -n "$SWITCH_a" ] || [ -n "$SWITCH_c" ] || [ -n "$SWITCH_e" ] || [ -n "$SWITCH_L" ] || [ -n "$SWITCH_r" ]
      then
        log_fatal "switch 'l' is incompatible with any other switch!"
        exit 1
      fi

      # ARG_1="$(path_readlink "$ARG_1")" || exit "$?"
      path_readlink "$ARG_1"
    else
      if [ -n "$SWITCH_c" ]
      then
        ARG_1="$(path_clean "$ARG_1")" || exit "$?"
      fi

      if [ -n "$SWITCH_L" ]
      then
        ARG_1="$(path_resolve_links "$ARG_1")" || exit "$?"
      fi

      if [ -n "$SWITCH_a" ]
      then
        ARG_1="$(path_absolute "$ARG_1")" || exit "$?"
      fi

      if [ -n "$SWITCH_e" ]
      then
        path_exist "$ARG_1"
        exit "$?"
      fi

      echo "$ARG_1"
    fi
  else
    log_fatal "unknown error!"
    exit 1
  fi
}

#-------------------------------------------------------------------------------

ARGS_PARSE="true"
ARGS_SWITCHES="acelLr"

. m.lib

#-------------------------------------------------------------------------------
