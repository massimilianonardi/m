#!/bin/sh

#-------------------------------------------------------------------------------

dir_count()
(
  COUNT="0"

  for i in ..?* .[!.]* *
  do
    [ -e "$i" ] && COUNT="$((COUNT + 1))"
    [ -L "$i" ] && COUNT="$((COUNT + 1))"
  done

  echo "$COUNT"
)

#-------------------------------------------------------------------------------

extract()
(
  cd "$DESTINATION"

  if [ "$TYPE" = "tar" ]
  then
    tar xvf "$SOURCE"
  elif [ "$TYPE" = "gzip" ]
  then
    tar xvf "$SOURCE"
  elif [ "$TYPE" = "bzip" ]
  then
    tar xvf "$SOURCE"
  elif [ "$TYPE" = "xz" ]
  then
    tar xvf "$SOURCE"
  elif [ "$TYPE" = "zip" ]
  then
    unzip "$OPT_UNZIP" "$SOURCE"
  elif [ "$TYPE" = "zlib" ]
  then
    MOUNT_POINT="$(hdiutil attach "$SOURCE" | grep "/Volumes/" | tail -1)"
    MOUNT_POINT="/Volumes/${MOUNT_POINT##*\/Volumes\/}"
    cp -R -f "$MOUNT_POINT"/* "."
    hdiutil detach "$MOUNT_POINT"
  else
    log_fatal "unknown type: $TYPE"
#    echo "undefined"
    exit 1
  fi
)

#-------------------------------------------------------------------------------

main()
(
  SOURCE="$1"
  DESTINATION="$2"

  SOURCE="$(path -a "$1")"

  if [ -z "$DESTINATION" ]
  then
    log_trace "extracting to current working directory: $PWD"
    DESTINATION="$PWD"
  fi

  TYPE="$(ty "$SOURCE")"
  EXIT_CODE="$?"
  if [ "$EXIT_CODE" != "0" ]
  then
    log_fatal "EXIT_CODE: $EXIT_CODE"
    exit "$EXIT_CODE"
  fi

  if [ -d "$DESTINATION" ] && [ -z "$SWITCH_f" ]
  then
    log_fatal "extract destination already exists and -f switch not provided - DESTINATION: $DESTINATION"
    exit 1
  else
    if [ -d "$DESTINATION" ] && [ "$(cd "$DESTINATION"; dir_count)" -gt "0" ]
    then
      log_debug "destination already exists and is not empty: $(ls -q "$DESTINATION")"
      DESTINATION_EXISTS_AND_NOT_EMPTY="true"
    fi
    OPT_TAR=""
    OPT_UNZIP="-o"
  fi

  if [ ! -d "$DESTINATION" ] && [ -z "$SWITCH_c" ]
  then
    log_fatal "extract destination does not exist and -c switch not provided - DESTINATION: $DESTINATION"
    exit 1
  else
    mkdir -p "$DESTINATION"
  fi

  trace call exit extract

  if [ -n "$SWITCH_s" ] && [ -z "$DESTINATION_EXISTS_AND_NOT_EMPTY" ] && [ "1" = "$(cd "$DESTINATION"; dir_count)" ]
  then
    log_debug "smart extraction: moving single element to parent directory"
# todo make better failsafe with names with \n in it
    CONTENT="$(cd "$DESTINATION"; ls -q)"
    log_trace "smart extract destination check - content: $CONTENT"
# todo better moving against strict writing permissions
    TMP_DESTINATION="$DESTINATION.$(date +"[%Y-%m-%d_%H-%M-%S]").tmp"
    log_trace mv "$DESTINATION" "$TMP_DESTINATION"
    mv "$DESTINATION" "$TMP_DESTINATION"
    log_trace mv "$TMP_DESTINATION/$CONTENT" "$DESTINATION"
    mv "$TMP_DESTINATION/$CONTENT" "$DESTINATION"
    log_trace rm -Rf "$TMP_DESTINATION"
    rm -Rf "$TMP_DESTINATION"
  elif [ -n "$SWITCH_s" ] && [ -n "$DESTINATION_EXISTS_AND_NOT_EMPTY" ] && [ "1" = "$(cd "$DESTINATION"; dir_count)" ]
  then
    log_warn "smart extraction do not performed: destination was not empty"
  fi
)

#-------------------------------------------------------------------------------

ARGS_PARSE="true"
ARGS_SWITCHES="cfs"

. m.lib

#-------------------------------------------------------------------------------
