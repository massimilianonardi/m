#!/bin/sh

#-------------------------------------------------------------------------------
# global arguments
#-------------------------------------------------------------------------------

LOG=""

ARGS=""
for k in "$@"
do
  case $k in
    --no-log) LOG="stdout";;
    --log) LOG="file";;
    --log-all) LOG="all";;
    *) if [ -z "$ARGS" ]; then ARGS="\"$1\""; else ARGS="$ARGS \"$1\""; fi;;
  esac
  shift
done
eval set -- $ARGS
ARGS=""

[ -z "$LOG" ] && [ "$1" = "server" ] && LOG="file"
[ -z "$LOG" ] && [ "$1" = "client" ] && LOG="file"

#-------------------------------------------------------------------------------
# global variables
#-------------------------------------------------------------------------------

COMMAND="$1"

THIS_PID="$$"
THIS_ABS_PATH="$(realpath -s "$0")"
THIS_DIR="$(dirname "$THIS_ABS_PATH")"
THIS_NAME="$(basename "$THIS_ABS_PATH")"

CONF_DIR="$THIS_DIR/conf"
LOG_DIR="$THIS_DIR/log"
RUN_DIR="$THIS_DIR/run"

THIS_DATE_TIME="$(date +%Y-%m-%d_%H-%M-%S_%N)"
THIS_LOG_FILE="$LOG_DIR/${THIS_NAME}_${THIS_DATE_TIME}_${COMMAND}_${THIS_PID}.log"
THIS_LOG_STDOUT_FILE="$LOG_DIR/${THIS_NAME}_${THIS_DATE_TIME}_${COMMAND}_${THIS_PID}_stdout.log"
THIS_LOG_STDERR_FILE="$LOG_DIR/${THIS_NAME}_${THIS_DATE_TIME}_${COMMAND}_${THIS_PID}_stderr.log"

THIS_RUN_FILE_PREFIX="$RUN_DIR/${THIS_NAME}_${COMMAND}_${THIS_PID}"
LOCK_FILE_SUFFIX=".lck"
PID_FILE_SUFFIX=".pid"
CMD_FILE_SUFFIX=".cmd"

THIS_LOCK_FILE="${THIS_RUN_FILE_PREFIX}${LOCK_FILE_SUFFIX}"

KEY_HOST_FILE="$THIS_DIR/conf/key_host_rsa"
KEY_ID_FILE="$THIS_DIR/conf/key_id_rsa"
KEY_AUTH_FILE="$THIS_DIR/conf/keys_authorized_ids"
KEY_KNOWN_FILE="$THIS_DIR/conf/keys_authorized_hosts"

#-------------------------------------------------------------------------------
# initializations
#-------------------------------------------------------------------------------

[ ! -d "$LOG_DIR" ] && mkdir -p "$LOG_DIR"
[ ! -d "$RUN_DIR" ] && mkdir -p "$RUN_DIR"

#-------------------------------------------------------------------------------
# command lib
#-------------------------------------------------------------------------------

echo()
{
  printf %s\\n "$*"
}

#-------------------------------------------------------------------------------

log()
{
  echo "$(date +"[%Y-%m-%d %H:%M:%S]")" "$@"
}

#-------------------------------------------------------------------------------
# loop management
#-------------------------------------------------------------------------------

delay()
{
  sleep "$DELAY"
}

#-------------------------------------------------------------------------------

loop_until_success()
(
  EXIT_CODE="1"
  touch "$THIS_LOCK_FILE"
  while [ -f "$THIS_LOCK_FILE" ] && [ "$EXIT_CODE" != "0" ]
  do
    log LOOP UNTIL SUCCESS: "$@"
    "$@"
    EXIT_CODE="$?"
    log LOOP UNTIL SUCCESS: "$@" - EXIT_CODE="$EXIT_CODE"
    delay
  done
)

#-------------------------------------------------------------------------------

loop()
{
  touch "$THIS_LOCK_FILE"
  while [ -f "$THIS_LOCK_FILE" ]
  do
    log LOOP: "$@"
    "$@"
    delay
  done
}

#-------------------------------------------------------------------------------

main_loop()
{
  touch "$THIS_LOCK_FILE"
  while [ -f "$THIS_LOCK_FILE" ]
  do
    #log LOOP: main
    delay
  done
  stop pid "$THIS_PID"
}

#-------------------------------------------------------------------------------
# user commands
#-------------------------------------------------------------------------------

sshd()
(
  SSHD_PID_FILE="${THIS_RUN_FILE_PREFIX}_sshd${PID_FILE_SUFFIX}"
  SSHD_CONF_FILE="$CONF_DIR/sshd_${COMMAND}.conf"
  
  "/usr/sbin/sshd" -D -e -f "$SSHD_CONF_FILE" -h "$KEY_HOST_FILE" -o "PidFile \"$SSHD_PID_FILE\"" -o "AuthorizedKeysFile \"$KEY_AUTH_FILE\"" "$@" &
  PID="$!"
  log SSHD_PID=$PID
)

#-------------------------------------------------------------------------------

sshc()
(
  SSH_CONF_FILE="$CONF_DIR/ssh.conf"
  
  ssh -F "$SSH_CONF_FILE" -i "$KEY_ID_FILE" -o "GlobalKnownHostsFile \"$KEY_KNOWN_FILE\"" -o "UserKnownHostsFile \"$KEY_KNOWN_FILE\"" "$@"
)

#-------------------------------------------------------------------------------

sshrt()
(
  SSH_CONF_FILE="$CONF_DIR/sshrt.conf"
  
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
  then
    exit 1
  fi
  
  HOST="$1"
  PORT="$2"
  MAPPING="$3"
  
  LOCAL_PORT="${MAPPING%%:*}"
  REMOTE_PORT="${MAPPING##*:}"
  log MAPPING="$MAPPING" - REMOTE_PORT="$REMOTE_PORT" - LOCAL_PORT="$LOCAL_PORT"
  
  ssh -F "$SSH_CONF_FILE" -i "$KEY_ID_FILE" -o "GlobalKnownHostsFile \"$KEY_KNOWN_FILE\"" -o "UserKnownHostsFile \"$KEY_KNOWN_FILE\"" -N "$HOST" -p "$PORT" -R "$REMOTE_PORT":localhost:"$LOCAL_PORT" &
  SSH_PID="$!"
  log MAPPING="$MAPPING" - REMOTE_PORT="$REMOTE_PORT" - LOCAL_PORT="$LOCAL_PORT" - SSH_PID="$SSH_PID"
  SSH_PID_FILE="${THIS_RUN_FILE_PREFIX}_ssh_${SSH_PID}${PID_FILE_SUFFIX}"
  echo $SSH_PID>"$SSH_PID_FILE"
  wait "$SSH_PID"
  
  EXIT_CODE="$?"
  rm -f "$SSH_PID_FILE"
  if [ "$EXIT_CODE" = "0" ]
  then
    log MAPPING="$MAPPING" - REMOTE_PORT="$REMOTE_PORT" - LOCAL_PORT="$LOCAL_PORT" - SSH_PID="$SSH_PID" - EXIT_CODE="$EXIT_CODE" - Closed gracefully
  else
    log MAPPING="$MAPPING" - REMOTE_PORT="$REMOTE_PORT" - LOCAL_PORT="$LOCAL_PORT" - SSH_PID="$SSH_PID" - EXIT_CODE="$EXIT_CODE" - Terminated because of error
  fi
)

#-------------------------------------------------------------------------------

vncd()
(
  "$THIS_DIR/TightVNC/TightVNC_service_stop.cmd"
  "$THIS_DIR/TightVNC/TightVNC_service_uninstall.cmd"
  "$THIS_DIR/TightVNC/TightVNC_service_install.cmd"
  "$THIS_DIR/TightVNC/TightVNC_settings_import_service.cmd"
  "$THIS_DIR/TightVNC/TightVNC_service_start.cmd"
  echo vncd_stop> "${THIS_RUN_FILE_PREFIX}_vncd${CMD_FILE_SUFFIX}"
)

#-------------------------------------------------------------------------------

vncd_stop()
(
  "$THIS_DIR/TightVNC/TightVNC_service_stop.cmd"
  "$THIS_DIR/TightVNC/TightVNC_service_uninstall.cmd"
  log vncd_stopped
)

#-------------------------------------------------------------------------------

vncr()
(
  if [ -z "$1" ]
  then
    exit 1
  fi
  
  HOST="$1"
  if [ -n "$2" ]
  then
    HOST="$HOST:$2"
  fi
  
  "$THIS_DIR/TightVNC/tvnserver.exe" -controlservice -connect "$HOST"
)

#-------------------------------------------------------------------------------

vnc()
(
  cd "$THIS_DIR/TightVNC"
  #"$THIS_DIR/TightVNC/TightVNC_portable_viewer.cmd"
  "./TightVNC_settings_import_viewer.cmd"
  "./tvnviewer.exe"
  "./TightVNC_settings_export_viewer.cmd"
)

#-------------------------------------------------------------------------------

scp()
(
  cd "$THIS_DIR/WinSCP"
  "./WinSCP.exe"
)

#-------------------------------------------------------------------------------

retu_server()
(
  sshd "$@"
)

#-------------------------------------------------------------------------------

retu_client()
(
  HOST="127.0.0.1"
  PORT="22"
  #MAPPINGS="22:10022 5900:15900 5800:15800 3389:13389"
  MAPPINGS="22:10022 5900:15900"
  VNC_PORT=""
  
  ARGS=""
  while [ -n "$1" ]
  do
    k="$1"
    case $k in
      -h | --host) shift; HOST="$1";;
      -h=* | --host=*) HOST="${k#*=}";;
      -p | --port) shift; PORT="$1";;
      -p=* | --port=*) PORT="${k#*=}";;
      -m | --mappings) shift; MAPPINGS="$1";;
      -m=* | --mappings=*) MAPPINGS="${k#*=}";;
      --vnc-port) shift; VNC_PORT="$1";;
      --vnc-port=*) VNC_PORT="${k#*=}";;
      *) if [ -z "$ARGS" ]; then ARGS="\"$1\""; else ARGS="$ARGS \"$1\""; fi;;
    esac
    shift
  done
  eval set -- $ARGS
  
  #loop sshd &
  #loop vncd &
  sshd
  vncd
  #loop vncr "$HOST" "$VNC_PORT" &
  for k in $MAPPINGS
  do
    loop sshrt "$HOST" "$PORT" "$k" &
    sleep 10
  done
)

#-------------------------------------------------------------------------------

server()
{
  start retu_server "$@"
}

#-------------------------------------------------------------------------------

client()
{
  start retu_client "$@"
}

#-------------------------------------------------------------------------------
# main commands
#-------------------------------------------------------------------------------

status()
(
  TYPE="$1"
  if [ -z "$TYPE" ]
  then
    PATTERN_LCK="${THIS_NAME}_*.lck"
    PATTERN_PID="${THIS_NAME}_*.pid"
    PATTERN_CMD="${THIS_NAME}_*.cmd"
  else
    if [ "$TYPE" = "pid" ]
    then
      PID="$2"
      PATTERN_LCK="${THIS_NAME}_*_${PID}.lck"
      PATTERN_PID="${THIS_NAME}_*_${PID}_*.pid"
      PATTERN_CMD="${THIS_NAME}_*_${PID}_*.cmd"
    else
      PATTERN_LCK="${THIS_NAME}_${TYPE}_*.lck"
      PATTERN_PID="${THIS_NAME}_${TYPE}_*.pid"
      PATTERN_CMD="${THIS_NAME}_${TYPE}_*.cmd"
    fi
  fi
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_LCK")
  do
    log RUNNING: FILE="$k"
  done
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_PID")
  do
    log RUNNING: FILE="$k"
    PID="$(cat "$k")"
    if [ -n "$PID" ]
    then
      log RUNNING: PID=$PID
    else
      log RUNNING: PID is empty
    fi
  done
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_CMD")
  do
    log RUNNING: FILE="$k"
    CMD="$(cat "$k")"
    if [ -n "$CMD" ]
    then
      log RUNNING: CMD=$CMD
    else
      log RUNNING: CMD is empty
    fi
  done
)

#-------------------------------------------------------------------------------

start()
(
  DELAY="10"
  
  ARGS=""
  while [ -n "$1" ]
  do
    k="$1"
    case $k in
      --delay) shift; DELAY="$1";;
      --delay=*) DELAY="${k#*=}";;
      *) if [ -z "$ARGS" ]; then ARGS="\"$1\""; else ARGS="$ARGS \"$1\""; fi;;
    esac
    shift
  done
  eval set -- $ARGS
  
  "$@"
  main_loop
)

#-------------------------------------------------------------------------------

stop()
(
  TYPE="$1"
  if [ -z "$TYPE" ]
  then
    PATTERN_LCK="${THIS_NAME}_*.lck"
    PATTERN_PID="${THIS_NAME}_*.pid"
    PATTERN_CMD="${THIS_NAME}_*.cmd"
  else
    if [ "$TYPE" = "pid" ]
    then
      PID="$2"
      PATTERN_LCK="${THIS_NAME}_*_${PID}.lck"
      PATTERN_PID="${THIS_NAME}_*_${PID}_*.pid"
      PATTERN_CMD="${THIS_NAME}_*_${PID}_*.cmd"
    else
      PATTERN_LCK="${THIS_NAME}_${TYPE}_*.lck"
      PATTERN_PID="${THIS_NAME}_${TYPE}_*.pid"
      PATTERN_CMD="${THIS_NAME}_${TYPE}_*.cmd"
    fi
  fi
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_LCK")
  do
    log STOP: FILE="$k"
    rm -f "$k"
  done
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_PID")
  do
    log STOP: FILE="$k"
    PID="$(cat "$k")"
    if [ -n "$PID" ]
    then
      log KILL: PID=$PID
      kill $PID
      #kill $PID > /dev/null
    else
      log KILL: PID is empty
    fi
    rm -f "$k"
  done
  
  for k in $(find "$RUN_DIR" -type f -name "$PATTERN_CMD")
  do
    log STOP: FILE="$k"
    CMD="$(cat "$k")"
    if [ -n "$CMD" ]
    then
      log STOP: CMD=$CMD
      $CMD
    else
      log STOP: CMD is empty
    fi
    rm -f "$k"
  done
  
  #pkill -P "$THIS_PID"
)

#-------------------------------------------------------------------------------
# traps
#-------------------------------------------------------------------------------

interrupt_clean_up()
{
  EXIT_CODE="$?"
  
  log TERMINATE: termination signal trapped
  stop pid "$THIS_PID"
  log TERMINATE: exiting after termination signal
  
  exit $EXIT_CODE
}

exit_clean_up()
{
  EXIT_CODE="$?"
  
  log EXIT: cleanup
  stop pid "$THIS_PID"
  log EXIT: complete
  
  exit $EXIT_CODE
}

#-------------------------------------------------------------------------------
# main
#-------------------------------------------------------------------------------

main()
{
  trap "interrupt_clean_up" INT QUIT TERM HUP PIPE ABRT CHLD TSTP
  trap "exit_clean_up" EXIT
  
  log PID: "$THIS_PID"
  log COMMAND: "$@"
  "$@"
  EXIT_CODE="$?"
  log COMMAND: "$@" - complete
  exit $EXIT_CODE
}

#-------------------------------------------------------------------------------
# execute & log
#-------------------------------------------------------------------------------

if [ "$LOG" = "all" ]
then
  main "$@" 2>&1 | tee -a "$THIS_LOG_FILE"
else
  if [ "$LOG" = "file" ]
  then
    main "$@" 1>"$THIS_LOG_FILE" 2>&1
  else
    main "$@"
  fi
fi
EXIT_CODE="$?"
exit $EXIT_CODE

#-------------------------------------------------------------------------------
