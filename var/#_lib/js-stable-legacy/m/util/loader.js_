
// loads each file of the list into specified namespace. 
// namespaces tree is created automatically. 
// each file is a single unit. 
// each unit has private scope. 
// each unit can see globals, namespaces, inner objects and exported objects of other units into specific namespace
// visibility is dependant of the load order specified by the list

(function(root)
{
// anonymous self executing function start

function evalInContext(code)
{
  eval(code);
}

$.ajax(
{
  type: 'GET',
  url: 'pub/script/conf/modules.json',
  async: false,
  success: 
  function(data)
  {
//    var namespaces;
    var namespaces = {};
    var list = [];
    eval("list = " + data + ";");
    
    function importNamespace(url, namespace, symbols)
    {
      var root = window;

      function getNamespace(namespace)
      {
        if(namespace == "")
        {
          return root;
        }

        var context = root;
        var path = namespace.split(".");
        for(var i = 0; i < path.length; i++)
        {
          if(typeof context[path[i]] === "undefined")
          {
            context[path[i]] = {};
          }
          context = context[path[i]];
        }

        return context;
      }

      var context = getNamespace(namespace);

      $.ajax(
      {
        type: 'GET',
        url: url,
        async: false,
        success: function(data)
        {
          var exportCode = "";
          if(typeof symbols !== "undefined" && symbols != "")
          {
            var symbolsArray = symbols.split(",");
            for(var i = 0; i < symbolsArray.length; i++)
            {
              exportCode += "this." + symbolsArray[i] + " = " + symbolsArray[i] + ";\n"
            }
          }

          if(namespaces)
          {
            namespaces[namespace] = namespaces[namespace] || {};
            namespaces[namespace].context = context;
            namespaces[namespace].code = namespaces[namespace].code || "";
            namespaces[namespace].code += data + exportCode;
          }
          else
          {
            evalInContext.call(context, data + exportCode);
          }
        },
        error: function(){console.log('error');},
        contentType: 'application/x-www-form-urlencoded',
        dataType: 'text'
      });
    }
    
    for(var i = 0; i < list.length; i++)
    {
      importNamespace(list[i].url, list[i].namespace, list[i].symbols);
    }
    if(namespaces)
    {
      for(var i in namespaces)
      {
//        (function(){eval(namespaces[i].code);}).call(namespaces[i].context);
        evalInContext.call(namespaces[i].context, namespaces[i].code);
      }
    }
  },
  error: function(){console.log('error');},
  contentType: 'application/x-www-form-urlencoded',
  dataType: 'text'
});

// anonymous self executing function end
}(this));
