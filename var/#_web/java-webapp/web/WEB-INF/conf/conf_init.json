[
  {
    "class": "m.log.Log",
    "ifaces": ["m.log.Log"],
    "params":
    {
      "level": "all",
      "logger":
      {
        "class": "m.log.LogLineStandardOutput",
        "class": "m.log.LogFilter",
        "params":
        {
          "logger":
          {
            "class": "m.log.LogLineStandardOutput"
          },
          "caller":
          [
            "_app/m.auth",
            "_app/m.auth.BaseAuthorizationSession.",
            "_app/m.auth.BaseAuthorizationSession$",
            "app/m.auth.BaseAuthorizationSession.authorize",
            "_app/m.auth.BaseAuthorizationSession.updateAuthorizations",
            "_app/m.auth.BaseAuthorizationSession.mergeAuthorizations",
            "_app/m.auth.BaseAuthorizationSessionProfiler",
            "_app/m.auth.BaseAuthorizationSessionProfiler$",
            "_app/m.auth.BaseAuthorizationSessionProfiler.profileChange",
            "_app/m.auth.BaseAuthorizationSessionProfiler.updateProfiles",
            "_app/m.auth.BaseAuthorizationSessionProfiler.profileChangeAdd",
            "_app/m.auth.BaseAuthorizationSessionProfiler.profileChangeRem",
            "_app/m.auth.BaseAuthorizationSessionProfiler.checkRule",
            "_app/m.auth.BaseAuthorizationSessionProfiler.checkTrigger",
            "_app/m.auth.BaseAuthorizationSessionProfiler.triggerDelayed",
            "_app/m.auth.BaseAuthorizationSessionProfiler.trigger",
            "_app/m.auth.FSBaseAuthorizationSessionProfiler",
            "_app/m.service.Authentication",
            "app/m.service.Store",
            "_app/m.service",
            "app/m.file",
            "app/m.enc",
            "app/m.stream",
            "app/m.store",
            "_app/m.web.WebServletAuthorization",
            "_app/m.web.WebServletAuthorization.getSession",
            "app/m.web.WebServletAuthorization.execute",
            "app/m.web.WebServletAuthorization.executionError",
            "_app/"
          ]
        }
      }
    }
  },
  {
    "name": "fs.os.path",
    "class": "m.file.OSFileSystem",
    "params":
    {
      "root": "storepath.pathroot"
    }
  },
  {
    "name": "fs.os.file",
    "class": "m.file.OSFileSystem",
    "ifaces": ["m.file.FileSystem"],
    "params":
    {
      "root": "store.file"
    }
  },
  {
    "name": "fs.os.file.index",
    "class": "m.file.OSFileSystem",
    "ifaces": ["m.file.FileSystem"],
    "params":
    {
      "root": "store.file.index"
    }
  },
  {
    "name": "fs.os.file.data",
    "class": "m.file.OSFileSystem",
    "ifaces": ["m.file.FileSystem"],
    "params":
    {
      "root": "store.file.data"
    }
  },
  {
    "name": "fs.os.file.chroot",
    "class": "m.file.CHRootFileSystem",
    "ifaces": ["m.file.FileSystem"],
    "params":
    {
      "name": "fs.os.file"
    }
  },
  {
    "name": "store.file.os",
    "class": "m.store.FSStoreFile",
    "ifaces": ["m.store.StoreFile"],
    "params":
    {
      "_name": "fs.os.file",
      "name": "fs.os.file.chroot"
    }
  },
  {
    "name": "store.file.hash.sealed",
    "class": "m.store.HashStoreFileSealed",
    "ifaces": ["m.store.StoreFile"],
    "params":
    {
      "name": "store.file.os"
    }
  },
  {
    "name": "store.file.index.split",
    "class": "m.store.IndexSplitStoreFile",
    "ifaces": ["m.store.StoreFile"],
    "params":
    {
      "name": "store.file.os"
    }
  },
  {
    "name": "store.file.hash.sealed.index.split",
    "class": "m.store.HashStoreFileSealed",
    "ifaces": ["m.store.StoreFile"],
    "params":
    {
      "name": "store.file.index.split"
    }
  },
  {
    "name": "store.path",
    "class": "m.store.FSStorePath",
    "ifaces": ["m.store.StorePath"],
    "params":
    {
      "name": "fs.os.path",
      "store":
      {
        "_name": "store.file.os",
        "_name": "store.file.hash.sealed",
        "_name": "store.file.index.split",
        "name": "store.file.hash.sealed.index.split"
      }
    }
  },
  {
    "name": "store.file.fs",
    "class": "m.store.StoreFS",
    "ifaces": ["m.store.Store"],
    "params":
    {
      "_name": "fs.os.file",
      "name": "fs.os.file.chroot"
    }
  },
  {
    "name": "store.file.fs.index",
    "class": "m.store.StoreFS",
    "ifaces": ["m.store.Store"],
    "params":
    {
      "name": "fs.os.file.index"
    }
  },
  {
    "name": "store.file.fs.data",
    "class": "m.store.StoreFS",
    "ifaces": ["m.store.Store"],
    "params":
    {
      "name": "fs.os.file.data"
    }
  },
  {
    "name": "store.node.fs",
    "class": "m.store.StoreNodeStore",
    "ifaces": ["m.store.StoreNode"],
    "params":
    {
      "index": "store.file.fs.index",
      "data": "store.file.fs.data",
      "store": "store.file.fs"
    }
  },
  {
    "name": "fs.os",
    "class": "m.file.___OSFS",
    "ifaces": ["m.file.___FileSystem"],
    "params":
    {
      "root": "."
    }
  },
  {
    "name": "fs.os.rcd",
    "class": "m.file.___RestrictedFS",
    "ifaces": ["m.file.___FileSystem"],
    "params":
    {
      "name": "fs.os",
      "root": "."
    }
  },
  {
    "name": "fs.os.app",
    "class": "m.file.___RestrictedFS",
    "ifaces": ["m.file.___FileSystem"],
    "params":
    {
      "name": "fs.os",
      "root": "js-app"
    }
  },
  {
    "name": "db.pool",
    "class": "m.object.Pool",
    "args":
    {
      "class": "m.sql.RDBMSConnectionFactory",
      "args":
      {
        "_driver": "org.postgresql.Driver",
        "_url": "jdbc:postgresql://172.25.0.70/WEBGIS",
        "driver": "org.hsqldb.jdbc.JDBCDriver",
        "url_": "jdbc:hsqldb:file:hsqldb",
        "url": "jdbc:hsqldb:file:/m/data/db/hsqldb"
      },
      "params":
      {
        "user": "m",
        "password": ""
      }
    },
    "params":
    {
      "min": 0,
      "max": 4,
      "wait": 5000
    }
  },
  {
    "name_": "authz",
    "class": "m.auth.BaseAuthorizator",
    "iface_": "m.auth.Authorizator",
    "ifaces": ["m.auth.Authorizator"],
    "ifaces_": [{"class": "m.auth.Authorizator", "default": true}],
    "params":
    {
      "profiler":
      {
        "class": "m.auth.FSBaseAuthorizationSessionProfiler",
        "params":
        {
          "class": "m.file.___RestrictedFS",
          "params":
          {
            "name": "fs.os",
            "root": "conf/auth/profiler"
          },
          "rules":
          {
            "attribute/session/ip":
            {
              "_regex":
              {
                "expression": "^[0-9].(.*)",
                "expression_": "^[0-9]:(.*)",
                "replace": "subnet.$1"
              },
              "network": true,
              "_geolocation": true
            },
            "attribute/request/ip":
            {
              "_regex":
              {
                "expression": "^[0-9].(.*)",
                "expression_": "^[0-9]:(.*)",
                "replace": "subnet.$1"
              },
              "network": true,
              "_geolocation": true
            },
            "_attribute/time/interval":
            {
              "threshold":
              {
                "limit": 10000,
                "below": "session/dynamic",
                "above": "session/lazy"
              }
            },
            "_attribute/request/size":
            {
              "threshold":
              {
                "limit": -1,
                "below": "request/unsized",
                "above": "request/sized"
              }
            }
          },
          "triggers":
          {
            "_authentication-challenge/id":
            {
              "desc": "for critical user, ensures strict authentication process: if authn before timeout, this trigger will be cancelled",
              "value": "admin",
              "reset": true,
              "delay": 5000,
              "profiles.add": ["session/locked"]
            },
            "_attribute/request/command":
            {
              "desc": "implements sleepy session to be awakened with re-authentication",
              "delay": 20000,
              "profiles.add": ["session/sleepy"]
            },
            "authentication/id":
            {
              "desc": "implements awakens a sleepy session if any",
              "profiles.toggle": ["session/authenticated"],
              "_profiles.add": ["session/authenticated"],
              "profiles.remove": ["session/sleepy"]
            },
            "_session/authenticated":
            {
              "desc": "implements soft-trust by increasing authorizations with time used until untrusted behaviour occurs",
              "_reset": true,
              "delay": 10000,
              "profiles.add": ["session/mature"]
            },
            "_attribute/session/ip":
            {
              "geolocation": true
            },
            "_attribute/request/ip":
            {
              "geolocation": true
            },
            "network/public":
            {
              "geolocation": true
            },
            "___network/public-network":
            {
              "geolocation": true
            }
          }
        }
      },
      "authentications":
      {
        "id":
        {
          "name": "authn",
          "class": "m.auth.FSBaseAuthenticator",
          "params":
          {
            "hash": "MD5",
            "class": "m.file.___RestrictedFS",
            "params":
            {
              "name": "fs.os",
              "root": "conf/auth/authentication/id"
            }
          }
        }
      },
      "services":
      {
        "m/auth/": {"class": "m.service.Authentication", "params": {"name": "authn"}},
        "m/store/": {"class": "m.service.Store", "params": {"name": "store.file.fs"}},
        "m/node/": {"class": "m.service.StoreNode", "params": {"name": "store.node.fs"}},
        "m/bpmn/": {"class": "m.service.BPMN", "params": {"name": "fs.os.app"}},
        
        "m/authenticator.": {"class": "m.service.Authentication", "params": {"name": "authn"}},
        "m/data.read/web.app.file/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.app"}},
        "m/data.write/web.app.file/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.app"}},
        "m/data.read/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        "m/data.write/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        
        "m/error/":
        {
          "class": "m.service.WebError",
          "params":
          {
            "error": 555
          }
        },
        "m/proxy/":
        {
          "class": "m.service.WebInclude",
          "params":
          {
            "webapp": "proxy",
            "url": "",
            "append": true
          }
        },
        "geoserver/":
        {
          "class": "m.service.WebInclude",
          "params":
          {
            "webapp": "proxy",
            "url": "/http://localhost:9080/geoserver/",
            "append": true
          }
        },
        "m/app/":
        {
          "class": "m.service.App",
          "class_": "m.service.WebError",
          "params":
          {
            "error": 404
          }
        },
        "favicon.ico":
        {
          "class": "m.service.WebInclude",
          "params":
          {
            "url": "/m/data.read/web.app.file/favicon.ico",
            "append": true
          }
        },
        "m/":
        {
          "class": "m.service.WebInclude",
          "params":
          {
            "url": "/m/data.read/web.app.file/index.html",
            "url_": "/m/app/default",
            "append": true
          }
        },
        "":
        {
          "class": "m.service.WebRedirect",
          "params":
          {
            "url": "/m/"
          }
        }
      }
    }
  }
]
