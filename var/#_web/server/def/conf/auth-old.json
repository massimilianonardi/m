[
  {
    "name": "db.authn.exec",
    "class": "m.service.DBReadWrite", "params": {"name": "db.authn"}
  },
  {
    "name": "authn.mail",
    "class": "m.auth.MailAuthenticator",
    "params":
    {
      "server": "mail.server.com",
      "protocol": "imaps"
    }
  },
  {
    "name": "authn",
    "class": "m.auth.FSBaseAuthenticator",
    "ifaces": ["m.auth.Authenticator"],
    "params":
    {
      "hash": "MD5",
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/auth/authentication/id"
      }
    }
  },
  {
    "name": "authn.stack",
    "class": "m.auth.StackAuthenticator",
    "params":
    [
      {"name": "authn.mail"}
    ]
  },
  {
    "name": "authn.fs",
    "class": "m.auth.ZFSAuthenticator",
    "ifaces": ["m.auth.ZAuthenticator"],
    "params":
    {
      "hash": "MD5",
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/auth/authentication/id"
      }
    }
  },
  {
    "name": "authn.ldap",
    "class": "m.auth.ZLDAPAuthenticator",
    "params":
    {
      "server": "domain.local"
    }
  },
  {
    "name": "authn.mail",
    "class": "m.auth.ZMailAuthenticator",
    "params":
    {
      "server": "mail.server.com",
      "protocol": "imaps"
    }
  },
  {
    "name": "authn.stack",
    "class": "m.auth.ZStackAuthenticator",
    "params":
    [
      {"name": "authn.fs"},
      {"name": "authn.ldap"},
      {"name": "authn.mail"}
    ]
  },
  {
    "name": "authz-man.fs",
    "class": "m.auth.ZFSAuthorizatorManager",
    "ifaces": ["m.auth.ZAuthorizatorManager"],
    "params":
    {
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/authz"
      }
    }
  },
  {
    "name": "profiler.fs",
    "class": "m.auth.FSBaseAuthorizationSessionProfiler",
    "params":
    {
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/auth/profiler"
      },
      "rules":
      {
        "attribute/session/ip":
        {
          "_regex":
          {
            "expression": "^[0-9].(.*)",
            "expression_": "^[0-9]:(.*)",
            "replace": "subnet.$1"
          },
          "network": true,
          "_geolocation": true
        },
        "attribute/request/ip":
        {
          "_regex":
          {
            "expression": "^[0-9].(.*)",
            "expression_": "^[0-9]:(.*)",
            "replace": "subnet.$1"
          },
          "network": true,
          "_geolocation": true
        },
        "_attribute/time/interval":
        {
          "threshold":
          {
            "limit": 10000,
            "below": "session/dynamic",
            "above": "session/lazy"
          }
        },
        "_attribute/request/size":
        {
          "threshold":
          {
            "limit": -1,
            "below": "request/unsized",
            "above": "request/sized"
          }
        }
      },
      "triggers":
      {
        "_authentication-challenge/id":
        {
          "desc": "for critical user, ensures strict authentication process: if authn before timeout, this trigger will be cancelled",
          "value": "admin",
          "reset": true,
          "delay": 5000,
          "profiles.add": ["session/locked"]
        },
        "_attribute/request/command":
        {
          "desc": "implements sleepy session to be awakened with re-authentication",
          "delay": 20000,
          "profiles.add": ["session/sleepy"]
        },
        "authentication/id":
        {
          "desc": "implements awakens a sleepy session if any",
          "profiles.toggle": ["session/authenticated"],
          "_profiles.add": ["session/authenticated"],
          "profiles.remove": ["session/sleepy"]
        },
        "_session/authenticated":
        {
          "desc": "implements soft-trust by increasing authorizations with time used until untrusted behaviour occurs",
          "_reset": true,
          "delay": 10000,
          "profiles.add": ["session/mature"]
        },
        "_attribute/session/ip":
        {
          "geolocation": true
        },
        "_attribute/request/ip":
        {
          "geolocation": true
        },
        "network/public":
        {
          "geolocation": true
        },
        "___network/public-network":
        {
          "geolocation": true
        }
      }
    }
  },
  {
    "name": "authn.addb",
    "class": "m.auth.StackDBADAuthenticator",
    "params":
    {
      "server": "domain.local",
      "hash": "MD5",
      "name": "db.authn",
      "table": "auth.users",
      "column.id": "username",
      "column.credential": "password"
    }
  },
  {
    "name": "authn.db",
    "class": "m.auth.DBAuthenticator",
    "params":
    {
      "hash": "MD5",
      "name": "db.authn",
      "table": "auth.users",
      "column.id": "username",
      "column.credential": "password"
    }
  },
  {
    "name": "authn.ad",
    "class": "m.auth.ActiveDirectoryAuthenticator",
    "params":
    {
      "server": "domain.local"
    }
  },
  {
    "name": "authn.mail",
    "class": "m.auth.MailAuthenticator",
    "params":
    {
      "server": "mail.server.com",
      "protocol": "imaps"
    }
  },
  {
    "name": "authn",
    "class": "m.auth.FSBaseAuthenticator",
    "ifaces": ["m.auth.Authenticator"],
    "params":
    {
      "hash": "MD5",
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/auth/authentication/id"
      }
    }
  },
  {
    "name": "authn.stack",
    "class": "m.auth.StackAuthenticator",
    "params":
    [
      {"name": "authn.ad"},
      {"name": "authn.db"},
      {"name": "authn.mail"}
    ]
  },
  {
    "name": "profiler.fs",
    "class": "m.auth.FSBaseAuthorizationSessionProfiler",
    "params":
    {
      "class": "m.file.CHRootFileSystem",
      "params":
      {
        "name": "fs.os",
        "root": "conf/auth/profiler"
      },
      "rules":
      {
        "attribute/session/ip":
        {
          "_regex":
          {
            "expression": "^[0-9].(.*)",
            "expression_": "^[0-9]:(.*)",
            "replace": "subnet.$1"
          },
          "network": true,
          "_geolocation": true
        },
        "attribute/request/ip":
        {
          "_regex":
          {
            "expression": "^[0-9].(.*)",
            "expression_": "^[0-9]:(.*)",
            "replace": "subnet.$1"
          },
          "network": true,
          "_geolocation": true
        },
        "_attribute/time/interval":
        {
          "threshold":
          {
            "limit": 10000,
            "below": "session/dynamic",
            "above": "session/lazy"
          }
        },
        "_attribute/request/size":
        {
          "threshold":
          {
            "limit": -1,
            "below": "request/unsized",
            "above": "request/sized"
          }
        }
      },
      "triggers":
      {
        "_authentication-challenge/id":
        {
          "desc": "for critical user, ensures strict authentication process: if authn before timeout, this trigger will be cancelled",
          "value": "admin",
          "reset": true,
          "delay": 5000,
          "profiles.add": ["session/locked"]
        },
        "_attribute/request/command":
        {
          "desc": "implements sleepy session to be awakened with re-authentication",
          "delay": 20000,
          "profiles.add": ["session/sleepy"]
        },
        "authentication/id":
        {
          "desc": "implements awakens a sleepy session if any",
          "profiles.toggle": ["session/authenticated"],
          "_profiles.add": ["session/authenticated"],
          "profiles.remove": ["session/sleepy"]
        },
        "_session/authenticated":
        {
          "desc": "implements soft-trust by increasing authorizations with time used until untrusted behaviour occurs",
          "_reset": true,
          "delay": 10000,
          "profiles.add": ["session/mature"]
        },
        "_attribute/session/ip":
        {
          "geolocation": true
        },
        "_attribute/request/ip":
        {
          "geolocation": true
        },
        "network/public":
        {
          "geolocation": true
        },
        "___network/public-network":
        {
          "geolocation": true
        }
      }
    }
  },
  {
    "name": "authz",
    "class": "m.auth.BaseAuthorizator",
    "iface_": "m.auth.Authorizator",
    "ifaces": ["m.auth.Authorizator"],
    "ifaces_": [{"class": "m.auth.Authorizator", "default": true}],
    "params":
    {
      "profiler":
      {
        "class": "m.auth.FSBaseAuthorizationSessionProfiler",
        "params":
        {
          "class": "m.file.CHRootFileSystem",
          "params":
          {
            "name": "fs.os",
            "root": "conf/auth/profiler"
          },
          "rules":
          {
            "attribute/session/ip":
            {
              "_regex":
              {
                "expression": "^[0-9].(.*)",
                "expression_": "^[0-9]:(.*)",
                "replace": "subnet.$1"
              },
              "network": true,
              "_geolocation": true
            },
            "attribute/request/ip":
            {
              "_regex":
              {
                "expression": "^[0-9].(.*)",
                "expression_": "^[0-9]:(.*)",
                "replace": "subnet.$1"
              },
              "network": true,
              "_geolocation": true
            },
            "_attribute/time/interval":
            {
              "threshold":
              {
                "limit": 10000,
                "below": "session/dynamic",
                "above": "session/lazy"
              }
            },
            "_attribute/request/size":
            {
              "threshold":
              {
                "limit": -1,
                "below": "request/unsized",
                "above": "request/sized"
              }
            }
          },
          "triggers":
          {
            "_authentication-challenge/id":
            {
              "desc": "for critical user, ensures strict authentication process: if authn before timeout, this trigger will be cancelled",
              "value": "admin",
              "reset": true,
              "delay": 5000,
              "profiles.add": ["session/locked"]
            },
            "_attribute/request/command":
            {
              "desc": "implements sleepy session to be awakened with re-authentication",
              "delay": 20000,
              "profiles.add": ["session/sleepy"]
            },
            "authentication/id":
            {
              "desc": "implements awakens a sleepy session if any",
              "profiles.toggle": ["session/authenticated"],
              "_profiles.add": ["session/authenticated"],
              "profiles.remove": ["session/sleepy"]
            },
            "_session/authenticated":
            {
              "desc": "implements soft-trust by increasing authorizations with time used until untrusted behaviour occurs",
              "_reset": true,
              "delay": 10000,
              "profiles.add": ["session/mature"]
            },
            "_attribute/session/ip":
            {
              "geolocation": true
            },
            "_attribute/request/ip":
            {
              "geolocation": true
            },
            "network/public":
            {
              "geolocation": true
            },
            "___network/public-network":
            {
              "geolocation": true
            }
          }
        }
      },
      "authentications":
      {
        "id": {"name": "authn"}
      },
      "services":
      {
        "m/authentication/": {"class": "m.service.Authentication", "params": {"name": "authn"}},
        "m/conf/":
        {
          "class": "m.service.Configuration",
          "params":
          {
            "object": null,
            "filesystem":
            {
              "class": "m.file.CHRootFileSystem",
              "params":
              {
                "name": "fs.os",
                "root": "conf"
              }
            }
          }
        },
        "m/store/": {"class": "m.service.Store", "params": {"name": "store.file.fs"}},
        "m/node/": {"class": "m.service.StoreNode", "params": {"name": "store.node.store"}},
        
        "m/data/read/web.app.file/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.app"}},
        "m/data/write/web.app.file/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.app"}},
        "m/data/read/web.app.data/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.data"}},
        "m/data/write/web.app.data/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.data"}},
        "m/data/read/web.app.file/app/_files/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.data"}},
        "m/data/write/web.app.file/app/_files/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.data"}},
        "m/db/default-db/data/": {"name": "db.data.exec"},
        "m/data/read/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        "m/data/write/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        
        "m/authenticator.": {"class": "m.service.Authentication", "params": {"name": "authn"}},
        "m/data.read/web.app.file/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.app"}},
        "m/data.write/web.app.file/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.app"}},
        "m/data.read/web.app.data/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.data"}},
        "m/data.write/web.app.data/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.data"}},
        "m/data.read/web.app.file/app/_files/": {"class": "m.service.FileSystemRead", "params": {"name": "fs.os.data"}},
        "m/data.write/web.app.file/app/_files/": {"class": "m.service.FileSystemWrite", "params": {"name": "fs.os.data"}},
        "m/data.read/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        "m/data.write/db/": {"class": "m.service.DBReadWrite", "params": {"name": "db.pool"}},
        
        "geoserver":
        {
          "class": "m.service.ReverseProxy",
          "params":
          {
            "prefix": "/geoserver",
            "url": "http://localhost:8000/geoserver"
          }
        },
        "m/proxy/":
        {
          "class": "m.service.ReverseProxy",
          "params":
          {
            "prefix": "/m/proxy/"
          }
        },
        "m/error/":
        {
          "class": "m.service.WebError",
          "params":
          {
            "error": 555
          }
        },
        "m/app/":
        {
          "class": "m.service.App",
          "params":
          {
            "name": "fs.os.app"
          }
        },
        "m/app/conf/":
        {
          "class": "m.service.WebRewrite",
          "params":
          {
            "redirect": true,
            "rewrite": "/m/"
          }
        },
        "favicon.ico":
        {
          "class": "m.service.WebInclude",
          "params":
          {
            "url": "/m/data.read/web.app.file/favicon.ico",
            "append": false
          }
        },
        "m/":
        {
          "class": "m.service.WebInclude",
          "class": "m.service.WebRedirect",
          "params":
          {
            "url_": "m/data.read/web.app.file/index.html",
            "url": "/m/app/",
            "append": false
          }
        },
        "":
        {
          "class": "m.service.WebRedirect",
          "class": "m.service.WebError",
          "params":
          {
            "error": 204,
            "url": "/m/"
          }
        }
      }
    }
  }
]
