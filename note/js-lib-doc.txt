Class:

extends JavaScript language to support advanced features only provided by languages like C++ 
(TRUE MULTIPLE DYNAMIC DEEP INHERITANCE that works with legacy functions, advanced instantiation control, etc.).



features list:
- zero overhead
- true multiple dynamic deep inheritance
- advanced instantiation control
- real static class
- singleton
- composition
- polymorphism
- clever advanced properties management
- method chaining
- faster and more robust code



features description:
- zero overhead:
Class generally doesn't add code, it just adds predefined functions that are engineered to be the most robust and the fastest that implement a particular feature. 
Thus resulting classes are the most robust and the fastest they can be. 
Also Class itself is enginered using the same principles.

- true multiple dynamic deep inheritance:
This is the most wanted feature! 
Class allows to declare many base classes, instantiating a class will automatically call all superconstructors in proper order and with proper parameters. 
Every inherited method is chained to the original prototype, meaning that every change to base classes are dynamically immediately seen by any subclasses 
and at any level of inheritance, thus Class creates prototype graphs not chains! (NB the "zero overhead" statement is still valid, no use of Proxy or eval is ever made). 
Until now JavaScript supported only a sort of single inheritance by using prototype chains, but is broken because it lacks to call superclass constructors. 
Even "ECMAScript 6" is only a syntactic sugar of "ECMAScript 5" prototypes and same limitations apply. 
Many libraries claiming to support multiple inheritance are all actually "mixins", which is far from being "inheritance" and lead to unwanted behaviours, 
still superclass constructors must be called manually.

- advanced instantiation control:
Class allows to control instantiation by allowing or forbidding invokation with the "new" operator (eg new Test()) or direct call (eg Test()). 
Also in both cases developer can choose if a new instance must be generated, or to behave like a singleton, or like a true static class.

- real static class:
Class allows to associate a static instance to a direct call (eg Test()), but also the static instance is created with the class constructor, 
meaning that "this" is always valid for such "static" classes and that you can switch a class from normal to static or viceversa without changing the class code.

- singleton:
Without changing the class code you can switch class behaviour to return always a singleton instance despite the invokation with the "new" operator or direct call.

- composition
Class allows to define objects to instantiated automatically and with correct parameters at each class instantiation.

- polymorphism:
TODO

- clever advanced properties management:
Class allows to define properties as methods that act with "method chaining" (myprop() returns the value, myprop(value) sets the value and returns "this"). 
Also Class supports property listeners (not supported by JavaScript) and properties can have values and getter/setter/listener at the same time (not supported by JavaScript).

- method chaining:
Class uses "method chaining" and produces properties with "method chaining" because this tecnique allows to write much less and much clearer code 
thus preventing errors and making easier to read, understand, track and debug code.

- faster and more robust code:
Class predefines code for you enginered to be the most robust and fastest it can be, meaning that you have to write much less and much clearer code.



structure of a class definition:

function Test()
{
  // the following statement parameters control how to initialize properties base classes or composed object constructors
  return Test.construct(this, [arguments], {properties}, [[inherited]], {composed_obj1:[], ...});
}

Class(Test)
.instance(new, call, singleton, static)
.inherit(Base1) // base class can also be legacy javascript functions
.inherit(Base2)
.compose(Base3, "my_composed_obj_1")
.compose(Base4, "my_composed_obj_2")
.property("my_property_1")
.property("my_property_2", default)
.getter("my_property_1", my_getter_function)
.setter("my_property_1", my_setter_function)
.listener("my_property_1", my_listener_function)
.method("construct", construct_function) // called when the new operator is used
.method("stateless", stateless_function) // called when the new operator is NOT used
.method("my_method", my_method_function)
.properties() // allows to set properties all at once
;

// also native method definition is supported
Test.prototype.construct = function()
{
  // called when the new operator is used
};

Test.prototype.stateless = function()
{
  // called when the new operator is NOT used
};

Test.prototype.my_method = function()
{
  // my_method code
};



usage:

// minimal definition of a class named "Test"

function Test()
{
  return Test.construct(this);
}

Class(Test);



// most complex class definition

function Test(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
{
  return Test.construct(this, [arg1, arg2], {my_property: arg3}, [[arg4, arg5], [arg6]], {my_composed_obj:[arg7, arg8, arg9]});
}

Class(Test)
.instance(true, true, true, false)
.inherit(Base1)
.inherit(Base2)
.compose(Base3, "my_composed_obj")
.property("my_property")
.property("my_other_property", "my default value")
.getter("my_other_property", function(value)
{
  return value + " modified by getter method";
})
.setter("my_other_property", function(value)
{
  return value + " modified by setter method";
})
.listener("my_other_property", function(value, previous, args)
{
  console.log(value, previous, args);
})
.properties()
;

Test.prototype.construct = function(arg1, arg2)
{
  // called when the new operator is used eg new Test("some value", 5)
};

Test.prototype.stateless = function(arg1, arg2)
{
  // called when the new operator is NOT used eg Test("some value", 5)
};

Test.prototype.my_method = function(my_arg)
{
  // my_method code
};




API DOCUMENTATION: -------------------------------------------------------------

function Class(c)
  creates a Class object attached to the function "c" that can add features to "c" like multiple dynamic inheritance, instance control, properties, etc.
  the class object will be saved into "c.Class" and "c.prototype._class".
  "c" must have the following structure:
  function Test()
  {
    // the following statement parameters control how to initialize properties base classes or composed object constructors
    return Test.construct(this, [arguments], {properties}, [[inherited]], {composed_obj1:[], ...});
  }

Class.method = function(target, name, method)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.getter = function(target, property, callback)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.setter = function(target, property, callback)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.listener = function(target, property, callback)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.property = function(target, name, properties)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.properties = function(target)
  same feature of the equivalent method in Class.prototype, but it can be applied to an instantiated object

Class.constructTTFF = function(classBuilder, classFunction)

Class.constructTTFT = function(classBuilder, classFunction)

Class.constructTTTF = function(classBuilder, classFunction)

Class.constructTTTT = function(classBuilder, classFunction)

Class.constructTFFA = function(classBuilder, classFunction)

Class.constructTFTA = function(classBuilder, classFunction)

Class.constructFTAF = function(classBuilder, classFunction)

Class.constructFTAT = function(classBuilder, classFunction)

Class.constructFFAA = function()

Class.prototype.construct = function(context, args, properties, args_inherit, args_compose)

Class.prototype.stateless = function(context, args, properties, args_inherit, args_compose)

Class.prototype.inherit = function(base, dynamic, link)
  the first call is a native javascript inheritance previous prototype methods and properties are preserved if not overwritten by inheritance, 
  subsequent calls create Class handled inheritance, call without arguments resets inheritance and empties prototype, 
  "instance", "compose" and property defaults are also inherited.
  dynamic: if false do not operate inheritance but copy (similar to mixins), any other value operates true inheritance (default). 
  NB dynamic inheritance link to original prototype is made only for properties and methods present at the time "inherit" was called, 
  to link also future additions use the "link" parameter. 
  link (array of strings): specifies the names of properties and methods (present or future) to obey inheritance. 
  NB "link" parameter acts independently of the "dynamic" parameter.

Class.prototype.compose = function(callback, name)
  when instantiating the class, also a new instance of "callback" is created and its reference is saved into "this[name]" if "name" is provided, oterwise into "this[callback.name]".

Class.prototype.instance = function(invokeNew, invokeFunction, singletonNew, singletonFunction)
  "new" determines if class can be invoked with the new operator (eg "new Test()"), 
  "call" determines if class can be invoked without the new operator (eg "Test()"), 
  "singleton" determines if any invokation with the new operator always returns the same instance (created only at first call), 
  "static" determines if any invokation without the new operator always returns the same instance (created only at first call), 
  at each call the eventual refence to a previous singleton or static instance is deleted and initialization mechanism is reset, 
  defaults are respectively: true, true, false, false. 
  NB if singleton and static are true the instances returned with or without the new operator are the same. 
  If "static" is false, any invokation without the new operator are redirected to Test.prototype.stateless (only if it is an own function), 
  in any other case, invokations are redirected to Test.prototype.construct (only if it is an own function), 
  in the latter case "this._new" is a boolean that tells if the new operator was used for invokation.

Class.prototype.getter = function(property, callback)
  sets a function getter for property "name", function accepts one argument with the internal value of the property and it must return a value for the property.

Class.prototype.setter = function(property, callback)
  sets a function setter for property "name", function accepts same arguments as passed to the property function (even extra parameters are passed).

Class.prototype.listener = function(property, callback)
  sets a function listener for property "name", function accepts three arguments: 
  the first argument passed to the property function, the previous value stored in internal property and the arguments array passed to the property function.

Class.prototype.property = function(property, value)
  creates a property method named "name". Calling "name()" returns current value of the property, calling "name(value)" sets the property to value and returns "this". 
  actual property values are stored into "this._property_mypropertyname"
  "default" represents the default value of the property. 
  NB "default" is set into prototype, thus deleting property on an object wil reset to its default not undefined.

Class.prototype.properties = function()
  creates a method "properties(object)" that behaves as follows: 
  If value is omitted, it returns "this", otherwise for each property of object if a property function exists with the same name it is called with argument of property value, 
  otherwise property is copied into "this". 
  NB only property functions created by Class are used, other functions are ignored and thus overwritten by the object property.

Class.prototype.method = function(name, method)
  adds a method "method" with name "name".

---

implement / verify:

Class(Test).listener(...) -> class property listener binds at class level a function every time value changes (affects any new instance)
Class.listener(object, ...) -> object property listener binds a function only for a specific object instance
Class(Test).trigger(...) -> class trigger replace a function with a wrapper that call registered functions before and after the original one (generalization of property listener)
Class.trigger(object, ...) -> object trigger does the same thing only on a specific object instance

trigger/listener on m-classes, trigger on any object
trigger/listener/getter/setter vs inheritance (direct-native or linked)

2-way object binding -> operates on properties of an object instance (not classes/generic-methods)
similar to object property listener, but a group of objects that bind each other are actually listeners of one shadow object and also write to it
obj1.bind(obj2) binds the default property
obj1.bind(obj2, "p1", "p2", "p3", ...) binds the specified properties
Class(Test).bindable(...) -> properties that will support simple 1-way and 2-way binding
Class(Test).bind(registerProperty, valueProperty) -> binds dynamically objects by grouping by registerProperty value and notifying valueProperty value

implement a MStore that accepts /m/... paths and /m/net -> m.store.StoreService.js, /m/local -> m.store.StoreFile.js

---
