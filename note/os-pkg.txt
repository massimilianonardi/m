
---
add deb and snapcraft sub packages
review maven install for most general cases: detect all available files, special treatment for standard ones (jar, javadocs, zip, etc.), generic for particular (*-uber.jar)
make changes to net to detect bin-zip vs jar, because in the first case no lib file should be produced
---
ops on net store: find, depend
ops on installed packages: installed, uninstall, reset, reset_conf, reset_data, reset_home, integrate, deintegrate
ops on both: match, install, update
match is like find but restricts result based on platform and installed packages trying to minimize the resulting list
NB probelm with depend verions min:max because many ramifications and more than one solution
-> generalizable with alternatives, eg: depend on oracle-java | open-jdk, depend on java-8 | java-9
while depend on generic search should provide all ramifications, depend while installing should match installed
but this freedom in specification let developers state wrong or generic dependencies
when updating uninstall only if there are no packages that still require that version and do not support the updated one
---
compiled pkg:
  <name-platform-version>
    bin: all binaries
    cmd: eventual scripts/launchers needed to standardize or simplify binaries usage
    cert: digital signature and certificate of producer
    def: templates, conf and data defaults
    dep: files named as package on which it depends. content is min:max version of compatibility
    doc: standardized formats for system commands doc, man and help to show minimal translated doc (formation), man (reference) and help (examples)
    sys: bin/cmd links, menu links, bin/cmd paths, env dynamic vars, dependencies+ver-range
    ver: name, version, build, platform, date, info, licence
    
    licence: eventual file specifing the package licence (must be in package root so that it cannot be ignored)
---
def and doc should be separated because of possible redundancy
but def is strictly required, so it would be messy to always add a dependency for that also is usually minimal and much easier to handle if internal
doc could be minimal, huge and independent, or huge and interactive...
---
pkg install source should work flawlessy also when DEPEND_PRJ is not empty...when developing, it's ok, but when installing how should this variable treated???
pkg makes wrk/pkg/data/pkg/src become the src dir during the install before passing control to mk, then project dependencies will be downloaded there and built by mk
thus mk should add a command to download from netstore
OR mk stays the same, package conf has DEPEND relative to packages in DEPEND_PRJ, so pkg will...NO it doesn't work...
NB pkg, when installing a source package, to prevent conflicts with wip projects should change all mk dirs: master src, build, dist, run, etc.
---
update should be smart for versioned packages, determine exactly what package to be updated in case of more versions, ask for a confirm in case of major release upgrade, etc.
---
pkg download sources and unpacks into m/work/data/pkg/sources/<name-version> then call mk install to generate platform/s package into m/pkg
before a pkg is released, it is developed by someone (eventually through a collaboration platform)
NB sources in released packages in general are not equal to development sources because of note, var, cached intermediary files, cached dependencies (lib and mk), etc.
thus, development sources must be in different place than released pkg
developer sources place depends on user choices, project sources is the product of the development team and it must be managed by m-vos in an user independent manner
developmnet server/workstation must have source global repository of commits of the whole team and all pkg/lib dependencies installed
thus m/src makes sense as m global repository for development sources
NB in this approach mk commands on the dev server are issued at system level idependent from user impersonating root/system just like pkg
NB mk install generates pkg dir with all its contents, it defaults pwd or m/src as source and pwd or m/pkg as destination but are parametric
when pkg calls mk install for released packages as source, it specifies m/work/data/pkg/sources/<name-version> as source and destination is pkg as default
m init install should have a check for m/src and compile all projects after the pkg install list
or m init install only declares 2 vars INSTALL_LIST_PKG and INSTALL_LIST_SRC and m init actually performs pkg install and then mk install o those vars/lists
---
abstract pkg: lib or standard (eg java) many products may provide its functionality. its unique dependency defines the standard, otherwise i must choose
eg pkg java has open-jdk as dep -> it is the standard, if i want oracle i must not do "install java", but "install oracle-jdk"
virtual pkg group: an empty pkg that serves as group by listing many packages as dependencies (eg "install web" -> apache, tomcat, java, etc.)
sub-commands: cache, depend, install, status, update, uninstall
pkg standard es pkg "java" can be provided by oracle-jdk or open-jdk
---

some tolerated packages are subsystems: they handle self update and internal component download/install/update/uninstall

type pkg: unpack from cache into install dir and call integrate on sys/system.conf
type src: unpack from cache into sources cache/temporary dir and call mk install (mk will call back pkg integrate) and delete temporary sources (still have src archive cached)
pkg-sources are available also for development with the command mk get/pull
other types require composing before and after unpack from cache
type ark/ext: extractable archive
type exe/bin: extractable binary
type deb/rpm: extractable linux package
type jar: jar library or executable (detectable via manifest)

cross platform meta packages need a universal method to install platform sub package automatically when invoked eg java install link to current platform and a link to all platforms that invoked installer instead 

pkg install from source will download source, cached in data dir and compile for each platform when needed
