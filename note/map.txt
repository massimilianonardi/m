
map:
  user -> many maps
  for each map -> on/off, opacity, many views
  for each view -> on/off, opacity, tree of groups
  for each group -> on/off, opacity, layer
  for each layer -> on/off, opacity, server params (gmaps/bing base map style, wms layers/styles)
  each server param can be of type: on/off, select, value
data:
  object with named sources (bing, wms_server1, wms_server2) with params specification (sort of capabilities offered)
  -> MapSource class ???
  ui is built by composition of controls of on/off, opacity and server params for map/view/group/layer with ol bind control
  ui is built choosing a master control class and passing an object with data structure and styles specific to ui control and references to map sources

gui gis. browser, stack editor, opacity, metadata, filtering, definire workflow per effetti lato server e lato client (clusters con numero, ecc.)

---

mapcache per layer statici e mapserver mappe dinamiche per gli altri (file map parametrici con variabili, o file map generati al momento o java map script).
wms/wfs solo tramite geoserver autenticato e nei limiti delle sue funzionalit√†
servizi geografici custom (attraverso auth e proxy) basati su json, geojson, png, binary attachments
