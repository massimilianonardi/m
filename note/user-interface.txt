- ui data + lang: eventLangLoad sets ui parts depending on lang and then calls eventDataLoad
  eventDataLoad checks if exists lang translation for its data, if so produces translatedData and uses it for rendering data, if not translatedData is equal to data
  think about to translate data to ui controls eg country acronym to flag picture

- ui module: class derived from m.mod.Module and m.ui.Element
  in m.modules there are predefined modules (ui modules are based on generic ui) preloaded and custom modules loaded at runtime
  NB anything can be loaded at runtime except m.mod.* that is required for loading modules at runtime
  modules for web ui can be added into a parent node in the current window context "as is" or by mean of jsp page that loads module (passed by parameter) with a predefined script

- ui is abstract -> Element. gui, 3dui and aui are derived -> GElement/GraphicElement, 3DElement, AudioElement, etc.
  ui only logical connections, relations and editable data. gui also specific features eg. background image

- development server: application ide that let write code in c/c++/java/javascript, compile server side for any platform and download package
  everything with versioning, policies, workflow, etc.
  also integrated with git/github for download/upload/checkin/checkout/etc.
  can read in readonly files being checkedout and edited by someone else and see each save and 
  also with possibility to send request for temporary more frequent save to see real time editing (the editing person may accept requested frequency or accept and modify frequency)
  collaboration: possibility to chat and voice/video call or temporary takeover of the file editing

- resize event for elements:
  hidden iframe with inline blank page via srcdoc property
  NB it must use position absolute, so it must be esured that parent has not position static or blank (static is default)
  first simple implementation as a new ui object that will be added by other objects that need it
  desired implementation an object to derive, but without Element redundancy or dependancy

global variable default ui (html, svg, webgl, audio, opengl, keyboard, mouse, etc.). ui has input and output
generic interface builds based on global variable
first element generated is root others are children -> ui=tree model
generic interface abstracts any interface,
generic class interface abstracts any ui for such class (eg gui for any 2D graphical interface)
specific interface is the most low level
developer starts with generic interface and uses lower level interface api only if really needed
controls should be abstractable for any interface (verify this assertion)
style is specific for interface and even application
ui is based on: element, elementeditable, container (window) -> for html container is root window and iframes, 
element is div with background image ability and elementeditable is div with special code for input

ui
  Element
  ElementEditable
  ElementContainer
sys
  net
    data
      DataProviderNet
  web
    ui
      webgl
      svg
      html
        Element -> inherit ui.Element
        ElementEditable -> inherit ui.ElementEditable
        ElementContainer -> inherit ui.ElementContainer

m.ui.def = m.sys.web.ui.html
var root = new m.ui.def.ElementContainer()
var root = m.ui.Element()
var child = root.create() // === root.child(0)
var child2 = root.create() // === root.child(1)
var root2 = m.ui.Element()
child.parent(root2) // if not directly supported by the low level ui, it must be implemented with object copy, but it must be supported -> NO!!! it must be forbidden!!!
child.parent(root, child2) // parent remains the same but moves it after the sibiling child2, so now -> child2 === root.child(0) and child === root.child(1)
child.parent(root, 1) // same behaviour but reference is and integer index and not an object
child.create(list_box.js) vs new ListBox()
root = m.ui.Element(true)
child = m.ui.Element()
child.parent(root)
lb = new m.ui.ListBox()

m.ui.g2d -> generic graphical 2d ui

element creation not with new because lets sys engine decide how to allocate resources (teoretically elements can be part of a pool where return after no longer needed and reused)
override all properties to fire events, or do it at this level and provide getters/setters override facility
NB property data is to be overridden and not eventDataLoad because class Data can be used synchronously and thus data property does not fire event...
maybe it should be rethinked as firing event inside data and remove from load callback -> no, dataload event has more arguments than data and is meant for async
there may need to rethink events: changeRemotely, changeLocally, dataLoad
.property("show", undefined, undefined, Element.prototype.eventElementShow) -> no, setter is responsible for actual setting internal property, not firing events
  // generic ui event
  // 
  // list of generic ui events:
  // --------------------------
  // focus
  // blur
  // select
  // menu
  // contextmenu
  // show
  // hide
  // resize
  // scroll
  // copy/cut/paste
  // drag events
  // 
  // input events:
  // -------------
  // input
  // keypress
  // keyup
  // keydown
  // mouseenter
  // mouseleave
  // mouseover
  // mouseout
  // mouseup
  // mousedown
  // mouseclick
  // mouseclickdouble
  // mouseclickright
  // mousewheel
  // 
  // abstract custom list:
  // ---------------------
  // enabled -> when switched
  // visibility -> when showed or hidden
  // focus -> gained or lost (receives input...all or only keyboard???)
  // selection -> gained or lost
  // 
  // toughts:
  // --------
  // 
  // events by generic ui state change of the element
  // events by specific ui state change of the element
  // events by user input (generalized, or by specific device)
  // specific ui may override generic ui control trasparently to user or offer user custom specific controls
connections kept in a global obj, elements offer methods that wraps this global obj

invent mechanism to construct groups: destruct and unique = id, destruct and many = class, struct unique/many = graph connection/parenting
actions on groups may reflect on each element of group directly or act on global engine properties without interaction with specific element directly (eg css)

must: grouping/find/select/query and apply methods like styling (simple translate to css rules and selectors) and creating (TBD)

data struct mapping for data and lang properties of elems (or everything else) translate common data structures to specific structure 
(string, image, image-url, text+image, list, id-list+text-list, etc.)

each assign of id a global obj is queried if obj.id exists then error, else obj.id = this-elem

each assign of class a global object is used classes.classname.push(this-elem)

gui struct is forced to be a tree model, or can be a generic graph?

use a global object for struc too, or use elems to store connections?

destruction of an elem must require remove from any list/query/etc

a sys ui has its own predefined styles and a configuration of properties to specify event mapping (ie mouse click -> select)
composed controls may have custom events (ie context menu event) -> no, all ui events are defined onto base element

elem data: from meta i have data type, elem control knows internally its compatible data type/s, thus gets data translator from translators[data.meta.type][elem.dataType]

style, ui events, input, input events are all handled internally by specific ui and may have very different behaviours or constraints (ie browser limitation to simulate events, etc.)

ui events:
----------
abstract input modeling
every system input modelling must map into it
abstract ui controls have their own actions that can be mapped to abstract input model events
ui controls configuration can be global (based on control js-class, ui-class, ui-id) or rule based 
(depends on every attribute controls can have plus their layout hierarchy position)
one possibility is to hide input system and expose only actions and generic input mapping, in such 
scenario basic ui element implementation configures all possible input mappings for its environment
remains to decide if low level event should be accessable from multiple controls or not

each low level ui constructor must register all input events and expose its own event methods in the abstract input model
low level ui conf specify the mapping to abstract model to be done here, 
while generic abstract ui conf specify mapping from abstract model to actions implemented by specific control
input types: button, button_down, button_up, abs_val, rel_val, abs_norm_val, rel_norm_val where val can be a scalar or a vector
input: device_id, device_type, input_type, input_val

rule-based configuration to select elements

profile merge: role conf is an object (especially layer layout) and small changes can be applied to single user. 
the optimum should be to use multiple roles (or small authorizations grant eg "can_see_adv_layers") and merge...
the problem arises when layout is not application fixed, but role fixed. in the first case we may grant access 
to layers that appear in the proper layout position, in the latter case they not! -> how to manage?
different layout for each role is a general problem and using single layout here only hides the problem.
high level solution is multiple role sequence (first is highest priority) and final conf is result of merging in reverse order.
such conf merging problem, may think of exetending merging functionality by deciding the merging element 
if a sub element si to merge or replace into original.
fast solution may be to subclass eg: new ArrayMerge/ArrayAppend([...]), instead of [...]
another solution can be to specify paths to merge/replace/append to the merge function call

abstract input model:
<device_id, device_type, input_type, input_value>
device_id (optional): provided by environment
device_type (optional, extensible): defined into model 
-> keyboard, mouse, touchpad, trackball, etc. 
(it's only descriptive because a keyboard may have a touchpad integrated, what is really important is input_type)
input_type (required, fixed/hardly-extensible): provided by environment 
-> instant, state_enter, state_exit, value_absolute, value_relative, value_absolute_normalized, value_relative_normalized
(NB values are vectors, but maybe can be a json???)
(think if value_relative_normalized is meaningful and also value_absolute, maybe value_relative, value_absolute_normalized are sufficient??? -> NO!!!)
input_value (required): provided by environment

javascript input events:
- instant: keypress, click, dblclick
- state_enter: keydown, mousedown, [mouseenter, mouseover] -> events generated indirectly from input interpretation relative to dom elements
- state_exit: keyup, mouseup, [mouseleave, mouseout]
- value_???: mousemove, wheel, [scroll]

in html element eventConfigurationChange conf must be get from merging several conf paths (classes, id, other rules, etc.)
the above is obtained by setting a conf path array that is set at each subclass and id set, parent set, etc. and also by developer
each specific class has its own actions methods that resulting conf will specify for each html input event
rethink general event listening (class events with prototype methods, event class, etc.)

ui element conf (style, events, etc.) depends on many factors (js-class, css-class, id, layout, etc.), but is (and must be) sys independent.
it should be designed a ui-conf management that is extremely fast and updates instantaneously sending proper "changed" events.



difference data vs value: data is needed to build control, value is result of user interaction
when to reset: only on new data, but also on meta to restructure data (new data -> enter/leave, new meta -> reset = leave-all-old + enter-all-new)
reset vs data-enter/leave: data structure events (enter/exit/move) can be generated by data functions on data of same type. each event need a standard data path specification
ui events call
config listeners for monitoring configuration changes
ui config listener does a reset on root element to rebuild entirely
advanced selection for all elems
children/connections for all elems

every ui elem provide both functionalities by implementing "reset" as "clear" + many data-enter manually invocated and only implementing a data-enter and a data-exit

conf is a data storage with validation rules for structure (sub-objects allowed to create/modify) and values (accepted values for sub-objects)
conf get must provide a value from a prioritized list of paths and a default value (NB validation guarrantee correct values if present) -> get([path1, path2, ...], default
this mechanism allows having a general configuration that user profile can override (if validation allows it) or having a general configuration for elements 
of the same class and override configuration for a specific element

basic ui element should handle the above conf for event mapping into reset

dom -> domlang (lang changed) -> domdata (data changed) -> domdatatable
only registered lang listeners are called
dom calls rendering upon construction leaving empty the lang and data part, langchanged and datachanged do the necessary rendering part
dom is updated rendering for data change and ui change: labels and icons are ui changes, but update requires structured minimal change of ui, while data requires most changes
css must not have lang elements -> images with text must be loaded by the ui control
structure is built at creation, lang part on lang change, data part on data change
lang can be remote data or direct data
small lang class for ui elems to inherit for responding to changes, one or few big lang classes that actually reload data and dispatch only to ui elems that actually changed
lang is: generic ui strings (one big lang very reused) + specific application strings (many small langs reusable)
-> one lang file for each ui elem (joined into one big ui lang file) and one lang file for each app/mod
one master static Lang, elem lang searches for the master to register as listener to spefic node
tbd: howto build and who/when/how load the master ui lang file
Lang accepts many raw data and many urls and merge objects substituting leafs (strings) with the most recent
listeners can un/register for many nodes, Lang automatically merge overlapping registrations NB removal from a subnode has no effect because hard to implement and quite meaningless

ui elem:
  construct: add class
  render: create empty skeleton based on current properties
  langChanged: update proper skeleton parts
  changed: update proper skeleton parts
each elem expects data in its own data-format and lan in it own lang-format
while empty data is a normal state, empty lang is not and elem must have some default system (either fixed values or calculated as table name and field names from data)
NB some lang may be applied to data (eg column names, or some column values (instead of decode/left_join a column of yes/no -> translate from lang: tables.decode.yn))
listeners can register for receiving updates only when nodes of interest have changed, in any case the full lang object is provided, listeners can grab everything
this is fast and flexible (otherwise queries are slower for path decoding and will not have the flexibility to query other lang data, but that could have modified)
how to use lang data is up to the elem, thus also the methods to programatically change bahaviour are up to the elem
lang: app.appname..., data.url..., ui.dom.classname...
start=classadd->register->render
render=rendercore->renderdata(currdata)->renderlang(currlang)
datachanged=setcurrdata->renderdata(data)
langchanged=setcurrlang->renderlang(lang)
data and translated data, render core, lang and data
core at start, lang only at lang change and only for the static part, data at data or lang changed and only for the dynamic part

in general event handlers are unique, if many handlers are needed, the unique handler is substituted with dymanically created one which holds all 
by means of function addlistener(original_unique_listener, listener_to_add)

form needs for each field (method addfield, or from table data):
- visible (true/false)
- label
- type (only needed for db writes and will be filled by sql queries)
- data
- uicontrol (input text, input password, datepicker, etc.)
- validator (text, number, integer, date, email, etc.) -> validator is part of uicontrol -> eg. new email_uicontrol().validator(new email_validator());
form needs globally: a global validator (validate entire set of data), 
a generic layout for a field list, or a custom field structure and a proper layout generator -> json of field names/indexes
-> uicontrol input (not derived from data?) -> eg new myinput(label, data, validator).params(p);

ui element: id, add, remove, parent, unparent, html, select, escape, class/style/attribute/event, visible, enabled

ui element:
on construct -> render
on property change -> render
on data change -> render
on lang change -> render

ui ergonomy:
1 - navigation system -> common
2 - working system (edit system) -> depends on context, but common logic
- navigation:
complex network (graph), generally without constraints, but ergonomics require to regroup with a maximum children constraint
several navigation systems: one by browsing, one by search, one by tag filtering, etc.
one navigation address (breadcrumb, or better...) to see where we are -> may be extremely long, especially if many network regroup for ergonomic above

---

form json structure definition:
- type: text/area, file, camera, date, select, button, email, number, range, password, phone, time, table, signature, hidden, currency, check, radio, map->address/coords, form, etc.
- id/name
- label -> lang
- hint/placeholder
- properties: read-only, active/disabled, etc.

ui vs object data binding: getters for lazy update (easy and js-native), setter listeners for dynamic updates (complicated and custom implementation)

dhj (dynamic html javascript) / hjt (html javascript template): html with (declarative headers???) html + ${var-name}, @{if-else/for/while}, etc.
NB dynamic generation listens for object modifications (data-binding) not only for fiels but also for loops -> entire or section update depending of the object updated
NB first only html, then custom ui language (ie html tag extensions, or better -> json)

---
