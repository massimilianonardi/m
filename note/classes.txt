implement shadowing:
new/copy/merge making two objects linked but one shadowing the other.
source is deep merged into target and every subobject into source will have a new setter that replicates changes into target if they are not shadowed 
(get old val in source, call previous setter if any, if old val in source === old val in target, put new val in target)
shadowing params can be: max depth to link, names list to link at any level (combine with level=1 to limit to first level), list of paths to link

force Base to be instanceof Class and/or add a boolean to transform Base into a class (to allow dynamic inheritance)
Base can be a string and compiled to a function later (reproduce order of class modifiers and method/props override)

reimplement "polymorph" -> accessor to base class

implement inheriting with predefined args (even partial) for base class
inherit a function with fixed bind both new and call -> no proto is different!
need predefined args, fixed arg link, arg link with default fallback when not passed (arg length < arg linked)
.inherit(base, args, dynamic, link)
.inherit(base, [5, "test", $arg1]) -> .inherit(base, [5, "test", Test.$arg1]) or .inherit(base, [5, "test", Class.arg("arg1")])
then if some array element is instanceof ClassArgs (class returned by Class.arg("arg1") for every arg) then create link...
pass static args with inherit and use "Function.length" to expand to formal length with undefined or a link to specific arg
-> .inherit(base, function(arg1, arg2){base(...)}) -> function to be called in construction with same args as passed? and right context?
-> .inherit(base, [...fixed values...]) or .inherit(base, function(...arguments...){return [...calculated...];})

class private variables: at new instance create _private under context and each private property under it, those must be not enumerable and maybe something else
converge compose and private not only with a new but also call -> general callback -> same problem to get args passed
Test.private() access private vars if this not instance of Test then error guarrantees tha can be called only inside Test and its methods -> true private vars
it returns and internal closure object not accessible to any other
almost any kind of private variables cannot work with mixins, but can with true inheritance??? verify both!!!

javascript interface / abstract class: Class(Test).abstract("my_abstract_method") sets Test.prototype.my_abstract_method = Class.abstract, where 
Class.abstract is a function that always throws with an error message explaining that the method was not implemented by the subclass
in Class.method find a way to set automatically an empty method, or an empty method returning this
Class(Test).abstract(force=true) sets the default value for abstract methods/properties/compose/etc for force implementation, then 
Class(Test).abstractMethod("mymethod", force=false) can override class default. force=true creates a method that throws, force=false an empty method. 
the force parameter both as global and local permits a class definition that most suits developer needs while being the most readable as possible. 

function that wraps other function with argument control -> standardization and optimization of runtime input checking -> much more powerful, useful and secure 
than compile type checking of other languages. 

"method" function throws if method already exists -> function "override" must be used -> much clearer class definition (think analogous for properties and everything else). 

rethink about class events and triggers: now class events are simple functions, inheriting class can replace it completely, replace it and call explicitly the 
"super" method of the inherited class, or replace it calling Class.trigger(). it should be one best solution for all situations. 

class events: when overriding, a flag indicates if new will call "super" or not (in case args changed, then super must be called manually). 
class events are plain methods with particular prefix. 
events: base-class events -> inherited from derived-class and overridable/expandable -> same thing for object instances. 
the problem is that for events inheriting means chaining the listeners array. 
events inheritance must be handled by some method of Event class that will be used by Class when inheriting classes and also for property listeners. 

rethink class properties getter/setter/listener paradigm:
at least for listener use events, but also for getter/setter in inheritance it builds a chain of functions but maybe its too heavy on performance. 

- event listening:
  single handler switchable to multiple handlers
  a class can derive (compose) event at design time
  classes designed to handle events, should name event methods as: event<class_name><event_name> -> this will avoid name conflicts when deriving multiple classes with events
  any object can be extended to handle event listening on any method by calling "new Event(obj)" that creates "obj.event = new Event(obj)"
  list:
    object method -> attach variables to object and replace method with chain, no notify need, monitor obj inside master obj
    class/prototype event -> same as above, in the simplest case, zero overhead (only one method and no support variables), monitor obj variables on prototype, no notify need
    class and obj event handling and listeners must integrate gracefully (obj must see also class listeners)
    subgroup based on some objects properties of class/prototype event -> explicit notify need, no internal methods, monitor obj variables on prototype

classes order of inheritance definition matters! -> problem with automatic namespace build -> or ordered build must be used, or classes inheritance must be dynamic!
classes must be responsible for listeners, events, fire...both for prototype wide and for single instance...also properties change event for single property (now only for global)
classes must provide an override feature (both for prototype wide and for single instance) to allow method replace returning this

---

events: on class for each type of event, on class for each subtype after calling super, on invokation

module: accepts functions, code as string and data path as string -> this.data(func/code) or this.path(path).read()
general implementation based on Function, specialized implementations can be provided, 
eg: on browser is based on script tag with innerHTML and in case of remote code and if not any modification as prefix/suffix/strict/etc use the src attribute
think about removing modifications ability for better generalization and use always src attribute.

module for code as string: set props and data or path, at this point create closure that will be executed at data load (async) or will be put on a queue (sync).
there can be more named queues other than main unnamed queue.
queue graph: when a callback generates other callbacks that should be inserted where the current callback is in queue position, setting the ready flag not when 
the callback completes, but when all subcallbacks are called: add at end of subqueue a call to suerqueue to notify completion (how???).
simple: queue.add(callback)
graph: queue.add(callback, delegate = true)

---
