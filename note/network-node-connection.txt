
- firewall: node connections are constrained to one or multiple defined ip ranges (eg lan, wan, internet, or custom) -> can be delegated to os or external firewall

- depending of the context ip, other nodes can be: unreachable, reachable full duplex, reachable outbound, reachable inbound

- exact rules about ip must be defined -> simplest: detect own internet address and use only that

- ip geolocation db for advanced connection rules

- at installation predefined bootstrap: ip list of known nodes, list of https links of ip lists, manual ip, alternatively start net scanning
after bootstrap node have built its own ip list of known nodes

- conn-alg = connection algorithm: algorithm that establishes initial connections and closes or opens new ones during normal execution
tries to keep 1/3 connections nearby, 1/3 mid range, 1/3 far
tries to keep 1/3 connections to fast nodes, 1/3 mid range, 1/3 slow
tries to keep 1/3 connections to big nodes, 1/3 mid range, 1/3 small
tries to keep 1/3 connections to trusted nodes, 1/3 mid range, 1/3 untrusted
must be defined a distance metrics for each criteria and an alg to equally distribute

- distributed-alg: commands for the net and how to manage them with other nodes

- node-cmd = node command: command flow that happen between two nodes only

- handshaking: process between two nodes to consider a connection established

--------------------------------------------------------------------------------

determine machine ip and if lowest ip area is lan, wan, or internet
determine higher area ip from other nodes
different configurations for different areas, or same as particular case
for each area loop through known ips to establish required connections matching established criteria
from each established connection retrieve current network node awareness so that, when required, proper node will be contacted minimizing hops

--------------------------------------------------------------------------------

node-id, ext-ip, known-inet-ip (ip/port, id, timestamp ordered list), known-wan-ip, known-lan-ip
for each known list: if ext-ip is null start from beginning, otherwise start from myip::next
connect, if offline goto next
send net-os-ver, receive net-os-ver, if mismatch then close
send node-id, if null or invalid other returns new id, otherwise returns null
goto list size div 16
repeat until 16 connections
NB for internet must be found a geo-alg to scatter connections equally around the globe
periodically loop keep-alive-command on active connections, if offline connect another next, otherwise update last online time in list
accept connections
for each connection
receive net-os-ver, send net-os-ver, if mismatch then close
if given id is null or invalid generate a statistically unique id and return it, otherwise return null
for each list starting from myip
slow loop of online-cmd, if ok update universal time in list for checked ip
very slow loop of get-known-ips-cmd, unknown ip/port are inserted in order, known are updated with time if newer, if duplicate id, mark all to be invalid

--------------------------------------------------------------------------------

net-os:
manages node registration and connections for maximum resiliency (ip area, geolocation, performance, level of trust, etc.)
output interface is: get active connection, get known ip list, establish direct connection, execute command on connection, update params for id

connector: establish/accepts connection with other node, manages encryption and key renegotiation, executes net-commands over the established connection
net-command: command over a single connection
net-request: command that requires a complex algorithm that executes several net-commands over multiple connections opened following a particular awarenes algorithm

availability degree is max for public and free and unrestricted across whole earth
availability decreases as data is restricted to groups/users
availability increases with credits assigned
credits are earned by giving service (function of served space, uptime, transfer rate)
credits can be bought/transferred

to get credits: at first it is possible only to download the 10 (tbd how later) most popular segments (to ease earning credits with high probability of a request)
to prevent abuse of the 10 limit: any node can generate a 10 list but cannot upload anything, or can upload only after a proof of a signed list from another node
for each succesful upload, receiver checks hashes and if good returns a signed receipt
after 5 receipts (even all relative to the same segment), it can be requested an 2nd level certificate from a node authorized to such operation using the receipts for verification
2nd level certificate enables to most popular and safe operations (node has proved to not be a spammer or similar)
certificates have an expiration time (lower certificates expires earlier) so at any time if node do not behave, certificates are not renewed

--------------------------------------------------------------------------------

4 redundant or load balanced servers with keepalive, 16 keepalive failover servers, 32 online backup servers
a node establish server connection with nodes with higher lot and client connection with nodes od lower lot and user clients
each action in parallel to the 4 servers check redundancy compliance of result
when action is requested, if can be accomplished autonomously, then respond, otherwise forward request to higher 4
every node not anon parteciate to global statistics to monitor net efficiency/security

--------------------------------------------------------------------------------
