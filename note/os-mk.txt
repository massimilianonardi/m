
---
implement target uninstall (maybe also start, stop)

implement interactive log/building (better as feature of log), where there are check steps where execution pauses waiting for user input to allow user to perform step by step

implement DEPEND_EXEC/DEPEND_SRV which are commands to be executed or services to be started/stopped on run targets NB completely decoupled from DEPEND_PRJ/PKG
actually it is achievable via run command and its usefulness can arise only if it will provide auto initialization for db (build/destroy test data) 
or application servers (tomcat, jetty, glassfish, etc.)
-> already provided by using depend-pkg to install servers, run target to perform start/init/run-cmd/stop chains and test target to provide a test environment and data

think about a way of subtypes, eg: pkg/java -> structure as pkg but bin is considered a plain java and replaced with its compilation
-> no! use "file" projects to make compositions of basic projects. also pkg is the standard format for install targets that translates a built bin into pkg

think about to make profiles work as subproject: myprj -> myprj/debug or myprj/.mk/debug or myprj/.mk/profile/debug
that way a single project may behave as several projects. useful if i want to package different versions of a project inside a multi
eg: myprj/win32 myprj/linux64

make depend work with profiles: referenced project name will have profile appended to dir

make hotseex level uninfluent if hotseex is not true, test if at this time is messing

use a source skip var that must be set accordingly to the current project structure (if conf subdir is inside src subdir)

translate/lang: log_info $(lang FILE_EXIST_ERROR $dir $file)
lang includes proper language file
lang calls: eval eval printf %s "${$1}" -> shell resolution: eval eval printf %s ${FILE_EXIST_ERROR} -> eval printf %s the file $3 already exist in directory $2

how to run test of mk itself:
from a stable m install: mk os run -> mk os run
SRC_DIR is still original, if required can be manually reset to the run environment, but test sources must be copied there
in the run environment all dev versions of os components override originals
original tools are also accessible unless manual path and env reset are performed

NB writings to source dirs from code execution or mk, are forbidden
test if read-only permissions on links can prevent source pollution when hotseex is enabled

trace: similarly to log level, make exit if error occurs beneath/below certain execute level (for execution traced)

add mk release where .mk/version keeps actual number that command will increase on master
add mk deploy especialy for ssh and webapps
add mk package to create packages
add mk publish to upload to net store
add mk get/pull to download from net store or url
add mk create to create an empty project (no params accepted, or maybe only through env vars)

mk external plugins as installable packages and autodetect dependencies into projects

---

nested type autodetection
leave auto as type of project for testing purposes, but since it is inherently slower add an --autoconf switch to automatically generate conf files
maybe more automation: if no conf or no type, then type auto, then if no conf generate conf.

postgres makefile with global transaction

scp/sftp makefile

java lib client for universal sql

better netbeans projects with premade build-commands and/or configurations for complete integration
