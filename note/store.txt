
folder system must be built on top of a fs with deduplication, copy on write and versioning, but does not need to be aware of it

- creation signatures (server, user) for sealed files should be in a separate store only for clarity and separation, they can also be with sealed files
- all modifiable data and attribute should be separate (eg folders, tags, signatures post creation, etc.)
- one possible implementation of separation: every file (data, singature, attributes, etc.) is stored on hash-store, then associations by path system

storing by hash is not auth friendly, if store is directly exposed then auth should be defined for each hash. 
for better auth management, elems should be not exposed directly, but through an aggregation service (path/classes/tags/etc.) and then configure auth on that. 
alternatively auth must be extended on elems (like windows acl) -> absolutely not, eventually a separate store that does the acl + link to sss files
in case of aggregation services, careful attention must be applied at adding/tagging elements to ensure policies are observed.

xdelta for versioning: based on peaks of the cross-correlation to detect the most complex scenarios where cut and paste is applied across doc

document versioning for laws: the most complex versioning scenario
one document changes many docs simultaneously -> doc by composition of other sub-docs/refs by means of composition rules (versions aware)
different docs have small changes -> diff/xdelta/etc. -> new official version
to group all diffs of different docs into one official doc signed and officilized is actually a new feature never appeared in any other versioning system
it requires an easy dedicated protocol where in this doc (json or xml) there is one section for each doc with exact reference to it and inside each 
section the diff/xdelta of the related doc
this feature should be enhanced with advanced query features like getting the final revision of each doc at specific date, 
final revisions of each doc modified by the group-doc, etc.
also advanced editing with all docs at hand and compose the group-doc as a doc with inline current versions of docs sections declared to be modified

permission implicit into path so that even the node that stores the path service cannot access paths without explicit permission

---

sealed with index = hash vs sealed with index = rnd + hash index system -> hash-index
raw fatfs and sealed as derived vs sealed and fatfs independent -> independent even with sealed ability to delete because of the index=hash guarrantee

problem: multimount indexes -> adding mount point prefix make exernal references to those link vulnerable to mount point name change...unless managed internally by a path store
problem: clever implementation of path-store based on file-store
problem: store-path must derive and expose file-store? better not because i can forbid user to keep internal refs that i can always give through the internal file-store object
problem: paths and links to folders/files on os-path-store -> may they be allowed???
- rel-symlinks folders -> yes (copy friendly)
- no hard-links because not distinguishable and not copy friendly
- rel-symlinks files -> yes (copy friendly), but attention must be made to distinguish between path links and file-reference inside ref-file (two level of linking fsln+ref)

typical: online node store, local link "sealed" read-only store, clustered local hash sealed store, clustered local rw versioned store on top the sealed store, global multimount store
typical: path-rev store with paths on osfs and files on the global moultimount file store

path on file store for max security and privacy, path on osfs for ease of use, external copy, etc.
path on file store can benefit of versioning also for folders and not only files
to access versioning on files can be easy, access on paths should be well thought

reading sealed files must be not seekable and with on-the-fly hashing and at the end give result of verify -> everytime file is checked!!!
this guarrantees the integrity especially for legal pourposes if also certifcates check, then its the maximum achievable set of features

---

basic os file act on raw paths but use a public path method to allow easy subclassing
then subclass for root remapping and enforcing

one generic store path on store file and one store path on os fs
store file sealed part is straightforward for local use but when retrieving parts from different nodes it must be thought well the global workflow that 
is even mor complex than clustering that only apparently has similar problems
part uses sealed file and exposes directly then part has methods specific to check only without dl bcoz part is a file store so if incomplete at dl attempt i receive error

then new iface key-value (where value is actually a pointer to value) and file and db implementations
then store are built on top of kv when possible and file or db to take advantage of particularities
then rev and seal paths as extends of store path...think how

need binary format for m data streams or a clever json for the moment
mstreams are self explanatory must be distinguishable from any other stream
has mtype inside
has also mver inside
can be binary and then json but for the moment is still troublesome better self explanatory json

---

multimount-store-file: can be union with stack of precedence for index collisions, or index prefix for each and collision resistant but mod-indexes
multimount-store-path: mount under path, can be more than one under same path as union-fs with stack precedence for collisions
key-functionality: cache -> meaningful for store-path, much less or none for store-file

idx-part: has store file for ref-part-files and store file for part-files
search ref if found return file composing with parts, if not found search for complete file in the secondary store

---

initially store-path is fully cached (the directory tree and file hashes) -> store-path-cache and method to keep updated exchanged among nodes
NB gui for tree/list-view must implement "virtual-dom"-like functionality with paged/streamed/cached big lists to prevent graphical/ram limits
rev functionality is very important: for files (hashes -> easy) and folders (difficult -> think optimal implementation)
store-path has an official-forced root with mounted repositories at some paths, mounts at same paths results in a union store-path
store-path allows user to add mount/union other repositories inserted manually or accept some proposed from connected nodes
need net-store-file interaction for cache update

net store-file: full global reachability -> some files/parts locally, some hashes point to mounted and cached nodes
store-file-union: no redundancy direct node map (fully cached) -> problem with managing duplicates and unuseful -> remove it
store-file-redundant: map (fully cached) hash->node-list+node-params/attribs -> at each mount full list is retirved and cached by updating internal map
NB it is a simple store-file, does not map the final files but a ref file including list of nodes and relative attributes/params
method/algorithm to retrieve the final file by parallelizing parts nodes etc. is managed by another service, this one only map hash to nodes
initially, for test purposes,  net-store-file is exactly store-file-redundant and caches all nodes ever connected
then it will be a subclass with a search alg + some cache optimized by un/connected nodes, repositories, node rank, file/part popularity, user preferences, etc.
search alg + cache file alg, must guarrantee to reach every file under some net limit conditions, then users should promote for those conditions
net store has a store file for redundant map info and ability to connect to other nodes through net

part-ref (compose file from parts) and ext-ref (get file from external source (http/kad/bt/etc.) with external client (browser/client/etc.)) should 
be managed by gui/client as a particular file type and be stored as any other file on the net with same policies or 
should be managed by net-store-file internally with dedicated policies for storing/sharing/etc. (similar question for store-path)???
similar question also for data/obj-files and queries

---

todo:

- reverse links for store-path

- versioning: branch linearly automatic + manual branch split/merge
internal/external exact reference to a specific version is hash
external reference to latest/leaf of a branch is universal-id of that branch (cannot be hash for obvious reasons)

- versioning command line tool to query/export massively to structured and readable filesystem folders

- mount/union store file and path systems: implemented as stacked by priority with stacked search is universal service
then advanced implementation can cache stack indexes and references for maximum performance
NB implementing as stack rather than with sub-paths is universal and does not depend on particular configuration
it automatically hides same path or hashes present on lower stacks -> for file-hash is not a problem because it is the same file, for paths must be aware

- store for external multiprotocol references: http, ftp, scp, bt, kad, etc.

- multipart store file: parametric partitioning algorithm
ready parts scattering across nodes and file parts maximum security and encryption
ready for acl and group sharing with maximum security

- store path based on store file as json-docs instead of fs-folders -> critical to achieve full versioning and signing of folders
every kind of higher level of storage should be based on store file to achieve automatically versioning and signing

- store object: generalization/extension of store path. 
can also be provided by an embedded sql-table/nosql-object/geojson-spacial db engine to query/edit inside a file-object-db 
(h2, derby, hypersql/hsqldb, orientdb, mongo, etc.). they can be useful as local cache for indexing, queries and visualization, 
but storage as single json-docs files (name=id=hash/timestamp) to allow transparent hashing, versioning and signing. 
NB store json-docs not binary files
tricks: filename as json for quick attributes, OR BETTER two level of json-docs one for small quick attributes in it that reference full detail doc
simple: store path + hidden attribute files -> one inside each folder, one for each file next to it in its folder
OR make duplicate root with only attributes -> attributes-store-path = another store companion of the original store path
if store path is rev, then can also query all attributes for same file but referenced in different folders (hence multiple attributes)
this allows reusing fsstorepath and fast fs find by name/path (not attributes search -> must use objdb cache for that)
if using quick tags/attributes in filename also then also advanced search can be achieved by fs (attributes as prefix with unique terminator)
if using objdb can reuse its features
if using custom mapreduce feature will not depend on external products and have same poor performance, but can be improved later with clever feature
OR attributes can be implemented on store file iface and with store path based on file all is automatically supported
the difference is that one unique attribute per file against many for references in folders -> think if extend to achieve both
NB attributes of a file mean classification, tags, properties, folders, etc. -> for advanced indexing -> freely changeble
while docs associated to file, they contain structured part of file content -> cannot be easily changed without signature, validation, etc.
eg. genre of a song is an attribute (personal), while artist, title, etc. are structured content
while attributes can be separate files without file reference, structured-content need to contain file index/hash and it will act as substitute
OR hash file, hash doc, then hash tuple of hashes -> advanced doc-file (binary + attributes)
-> having a parallel store path for indexing-attributes it's an easy solution for classification and slow search good for user (not for enterprise)

- store doc: schemaless json-doc with internal references to other files. 
with schema would be easy to define a type fileref, but every doc must have a schema. to remove this constraint need a generic way to 
define a sub-standard of json to allow file refs in a schemaless json-doc
NB no folder (or other things) ref allowed!
OR define type/schema instead of ref and then can be anything also ref to folders -> "@<type>:<field-name>": "<field-value>"
-> feature client-side, but server-side need validation and dead refs when deleting
client send form with doc with refs to form fields containing files, server saves files and replaces refs into doc with index/hash
or client send files and doc with already server indexes/hashes, but server need a way to know if refs are inside form or already hashes
server during validation flags the doc with valid or with unknown refs inside (can arrive from another store not reachable)
store-doc with refs is the basis for a forum, files/media classification, doc-management, etc.

folder can be use through api, but should be represented by a json doc with predefined folder-schema, then everything is a file (binary or json).
json and binary file can live on their own or as a couple to achieve maximum feature of both formats
json + binary = jbo and is represented by the json [json-hash, bin-hash] and then hashed for index 
-> new store file for new index, but json and binary are saved into the global store file 
where bin is provided by stream method and json is provided by attribute method NB search api should allow to filter by hashes of bin or json
need api to merge/split json of same bin...too complicated!
-> bin hash must be key/index and attributes is a sub store path only for that file with internal index/hash refs and accepts json files only

---
