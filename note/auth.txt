
net: node-path/service-path/command-path (eg mynode/file/path-to-file-or-dir)
node: must register path-to-service, service: must register path-to-command

command is the leaf of node and thus also for the net, it is the most basic element and to comply to the action-reaction model 
of the universe, it has one input (action) and one output (reaction), command represent thus a physical law

to keep analogy with real world physics, in and out should be able to be abstracted as instantaneous, but actually they are streams
input stream -> command -> output stream

the problem is that except for linux/unix shells/commands all programming languages are intrinsically against that pattern and extremely flawed
thus the need for abstraction of that model and implement as possible "code firewalls" for each language until m-lang is developed

for object/prototype/instance oriented languages: service=class/prototype instance, command=instance method
for functional languages: service=namespace or function name prefix + data pointer of instance for functions, command=function + instance data

another flaw/limit of languages (that unix/linux os doesn't have) is the lack of a secure session context and the intrinsic lack of capability to create
with c/c++ it is possible using minimal processes and os api, but forces to use os architecture
those limits prevent a transparent and secure architecture by design, thus every service/command is assumed to explicitly respect the security contract
explicit security contract: every command is accessed through the currently available authorization session or a new one if not available
every command internal action should be reconducted to a secure command whenever it is possible and minimize the use of low level api
every use of low level api should be reconducted and implemented as service/commands whenever is possible

---

general flow:
- agent establishes a session with server over a stream
- agent send request to server over a stream
- server respond to agent over a stream
- agent terminates the session with server

-> general ifaces: server, agent, stream, request
-> implicit ifaces: object, session, history-data

NB on http, a new stream at each request -> session id is very fragile reference
on https, always the same tls stream secured and distinguished by exchanged keys
-> either case http/s is extremely unsecure -> need ssh over tcp with dedicated node client not browser

identity is a strong concept that must be proved by some kind of authentications depending of the level of trust required
identity concept is not associated with a single person and a signle person may have multiple identities, but for legal pourposes should be 1-1

---

smartphone auth:

app (or webapp with persistant storage) pub/pri keys associated to an account
the procedure to activate the phone, must be strongly secure

alternative:
webapp -> access to restricted path -> login page with user activated login methods: 
username + password, 
local/portable pub/pri keys, 
2f username, request-id + personal device confirmation via challenge, 
qr-code challenge + device scan for challenge

local/portable pub/pri keys, 
server send to browser/webapp a challenge token
from browser/webapp load pub/pri keys from local or portable storage, browser locally encripts and signs the challenge token with pub/pri keys and send to server
server verifies the challenge and returns the authn token

2f username, request-id + personal device confirmation via challenge, 
qr-code challenge + device scan for challenge + fingerprint

---

review authz for multifactor authn
review authn for pub/pri keys challenge, strong authn and multi factor aware
bind identity and advanced digital signature to user/agent
define info strcture/schema of the identity certificate

---

client connects to server
server initializes an anon session returning its token/cookie
client shows webpage with qr-code=token/cookie
client asks server for login confirmation
server keeps request alive until a login event for such session and register itself into a global map <session-id, thread-instance>
webpage on smartphone opens camera for qr-code scan
sp-client decodes qr-code -> token/cookie
sp-client sends mobile-auth-command with: session=token/cookie + username=device-id + password=null
server authenticates the session with id=token, retrieves the proper thread-instance from global map and notifies login
server thread wakes upfrom notification, acknowledges the login for its session and returns to client: "true"
client receives "true" and proceed on restricted content

---

anon session
cli ask challenge for a particula auth
anon session + <authentication>/<challenge> + <timestamp> ??? + <expiry> ???
cli resolves challenge and send auth/id/solution (and challenge???)
NB challenge must be associated to session and not auth wich may be used by many sessions
NB challenge implies -> session attribute change -> challege is managed by session but resolved by auth
NB auth of session takes no challenge as arg but auth of auth does and is only invoked by session
NB session class takes care of actions that use may ask, profiler should manage all the flow control (validity of challenge, session, etc.)

---

issue: user can forge session id to access other user session info (csrf attack)
on session creation, generate a token associated and return it
NB that means session is created by explicit request because i should expect token and not anything else
thus: automatic general shared unauthenticated web session -> ondemand contained unauthenticated m-session -> eventual authentications, etc.
on higher levels of trust server returns token that client must use to validate further requests with higher security

issue: session of multi form authentication (desktop + mobile). if mobile is contaced from server, then no session but can be joined to original, 
but if user has to contact server, then he must have the functionality to join an already opened session.
join session is required because the two authentications must be in the same container to have any meaning.

---
