
- build system:
  checks if it is running externally of the project directory, if so and if build completes ok, then and only then it removes the "make" subdir into 
  the project folder and it copies itself.
  this way i have an external command but i also allow to build project on other systems that do not have the build command, 
  but have make/gcc/java/nodejs/postgres/etc.
  make is the fundamental requirement. 
  at first, before anything else checks if current system have the requirements for the project types it should compile (gcc/java/nodejs/postgres/etc.). 
  add a PROJECT_TYPE=database. 
  let have a project tree by adding a PROJECT_TYPE=project that operates recursion on that dir using its own project conf 
  (conf and src dirs are those in subdirectory, other are still on the root). 
  manage versions keeping distinct sources and dist files (delete build files) allowing different projects to use different versions of others. 
  also run versions. 

PROGRAMMING LANGUAGE
--------------------

supporta tutti i livelli di compilazione:
interprete real-time, jit compiler, bytecode machine independent, low-level superoptimized machine code

supporta il moduling/packaging dei sorgenti/compilati ed il loro accesso astratto

supporta la real-time reflection

source code in file di testo utf-8 unix line terminators dove si specificano i simboli da esportare ed i simboli da importare by link or inline

supporta moduli e namespaces sia a compile time (c++) che a run-time (javascript)

supporta il precompiler (però più evoluto del c++)

supporta i code templates (c++)

supporta sia la programmazione ad oggetti (c++) che quella prototipale (ma più avanzata del javascript) e multiple dynamic inheritance

supporta le lambda/closures

ha una libreria standard per l'accesso astratto al hardware ed al sistema operativo



compiler parses special comments for dynamic compiling:

- package
as first not empty and trimmed line and trimmed file beginning
//@package PACKAGE_NAME
eg: //@package m.util

- compiler preprocessor variables
/*<VARIABLE_NAME>*/
anywhere in the code is replaced by actual value of "VARIABLE_NAME"
where VARIABLE_NAME is the name of a variable that compiler provides (eg. filename, or line)

- compiler preprocessor defines
//@define NAME
/*
sequence of charachters to be replaced in the code
*/

OR -> compiler preprocessor commands anywhere and enclosed by a special js comment:
/*@preprocessor
...preprocessor commands...
@preprocessor*/

OR -> compiler preprocessor commands as javascript anywhere and enclosed by a special js comment:
/*@preprocessor
...javascript preprocessor commands executed by preprocessor...
@preprocessor*/

difference depend/import: depend on module to be compiled and must be preceding, import need a module at runtime and can be following

eg.
/*@preprocessor

@package m.util

@define trace
{
m.global.trace(/*<filename>*/, /*<line>*/, this, arguments);
}

@preprocessor*/

var a;
function Test(arg)
{
  /*<trace>*/
  /*<debug:a,arg>*/
}

- build:
  - in-code (preprocessor) build profile detection for debug instructions (eg log) -> //@profile:debug: <instruction>
  - uniform handling extern symbols -> auto build is clear and allows local visibility, custom build may break local visibility
    -> declare externals as local var with proper reference, or use global reference for every extern symbol
    or modify build to pass context and expicitly each its subobject
  - externals (load time) and dependencies (build time) are strictly correlated
  - build time variables substitution -> symbols replaced with build values eg. __FILE__ replaced with current file name, etc.
    symbols are declared as //@variable:__FILE__, alias:??? with alias to resolve ambiguities against real code
    or better: substitution definition in comment -> //@__FILE__ -> replaced with /path/to/filename.js (without quotes)



summary:
--------

preprocessor commands have precedence above everything even inside strings (eg var a = "/*#MYCONST*/" -> var a = "my const value replaced by preprocessor")
comment start + "#" means preprocessor command + [:arg1 [, arg2] ...] + comment end

#preprocessor command is the only predefined one, other are defined by it

/*#preprocessor:

[javascript code executed by the preprocessor]

*/

// javascript code
var a;
function Test(arg)
{
  /*#trace*/
  /*#debug:a,arg*/
  //#trace: a, arg
  //#debug

  myfunction(/*#sum:a,b*/); // passes sum (defined at preprocessing time) a+b to myfunction -> NB this breaks compatibility with code not preprocessed!!!
}
