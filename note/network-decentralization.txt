
- very basic network element is file

- many services can exist based on files each one with different requirements for decentralization

- each node is born without anything, then user can add data, or more generally the net through the decentralization service

- dcntr-alg = decentralization algorithm: the parametric algorithm that tries to determine the best file-part dislocation amongst all nodes

- dcntr-srv = decentralization service: service that each node runs to communicate with other nodes to apply the decentralization algorithm

- dcntr-alg features:
manual user choice for whole files to share
can create a private self-sustainable data/services cluster with high availability, fast replication, load balancing, fail over, real time, streaming, raid
swarm optimizations for messaging and downloading, but maintain the user requested anonimity
file cache decentralization based on file attributes: popularity, rarity, importance, public/private access, bought level of availability, rating
must keep an approximated estimation of file presence, redundancy and availability into the net and maybe also a map

--------------------------------------------------------------------------------

each node rates specific performances of itself and other nodes signing and certificating them
each rating is a set of subratings of the same performance indicator on different range of time and with different algorithms
each rating has a default scalar value that "best represent" overall performance and has to be chosen with consistent criteria among all performance indicators
can also be defined higher level indicators based on lower level indicators (eg <speed, uptime, storage> -> availability), or even a global one (the global node rating)
some indicators may have very specific and peculiar indicators (eg uptime can have detailed values for timeslots of the day utc/ltz, seasonal patterns etc.)
ratings may and should be very complex objects for advanced algorithms, but still must offer a default scalar value for easy algorithms

- base performance indicators:
node-size = storage size
node-presence = uptime
node-speed = speed / bandwidth / transfer rate (for both upload and download)

keeping ratings of all net nodes can be huge
live cache is limited by keeping some candidates in each considered indicator-value-cluster
nodes will aggregate in clusters by idicators and with certificates proof
at each cluster is associated a "service-price" that represent its performance
"service-price" is the cost of on-demand services, while low-level net services are priceless since they work to keep the net at best performance and are not used by user
belonging in higher rated cluster, allows higher revenue savings that can be spent for on-demand requests
clusters must be fluid: nodes should regularly and randomly move through equivalent clusters trying to keep clusters sizes and characteristics homogenous

since nodes rate each other, a secure mechanism must be found to prevent that malicious nodes can rate each other for things never done

possible simple dcntr-alg: at each connection if storage has still capacity ask other node to fill, if instead has too much asks other node to accept some, if both excess...
two nodes exchange their respective cache with file and node ratings, then apply hosmosis alg -> exchange parts to meet file indicators target (if one has a part poorly shared etc.)
