
m-os

install options:
- as virtual guest os into an host os (windows, macos or linux)
- as standalone os based on m-boot bootloader, linux kernel (stock, ubuntu, debian, kali, ubuntu studio, etc.), custom initramfs, m-shell (text-ui + gui)
- as navi (native + virtual) folder/image that can be booted from a virtual machine engine (vmware, qemu, etc.) with persistence or booted natively

how to install:
  host: portable storage with bootable m-os preconfigured to start the full installer for other devices (partition, copy, install m-os, configure boot, etc.)
  guest: from a preinstalled or portable instance of m-net-store (standalone m guest os with electron+java)
  guest: host-os specific installer or self-extracting archive to download and extract sources and execute installer from sources
  guest: manual download and exctract of archive with installer for every host-os that then executes universal installer
  guest: command line to execute = wget/curl download self extracting script + piped to sh -> extract minimal copy + execute guest universal installer
  guest: from host-installed-git with a git clone command
  
- m universal installer:
  install m-os from m-os sources (with initial git database)
  it is included in m-os sources (obviously)
  run as standalone from sources (no fingerprints, no too special requirements)
  simple minimal install + advanced install from installed minimal m-os
  minimal net command and data to perform minimal advanced install requires for advanced net command, then full advanced install
  full advanced install offers wine, wsl and all emulation tools to make run tools from other host-os (eventually with managed virtual machine + shared folders)
  performs installation for current platform and host-os and asks to install for other platforms/os (if possible)
  
- m-desktop as virtual-os = electron app with systray (NB m-desktop for standalone is a c/c++ engine)
  it can be used as m-os desktop, but obviously a dedicated optimized desktop is preferred
  it is needed to provide m-os concept to other os and web
  
  packages generally need some downloads from m-net + compose of downloads + integrate
  full autonomous packages will be the majority in the future, now need to adapt external to pkg format
  packages for simple netstore will be conceptually similar to advanced, but technically first is sh based, latter is json
  real package is one archive that contains all files needed, external packages are part internal packages but some file are retrived externally and 
  composed
  packages for advanced netstore are m-net folders with full m-os compliant directory structure that m-pkg knows how to download and install
  obviously they can contain links or references to other files/directories. references can be to internal paths of custom archives
  eg m-net provides files and folders, data (objects, tables, etc.), etc. and also external archives
  packages for simple netstore 

---

command format:

swithces: posix style and the can never have parameters (because as name says "switch", not "control")
options/controls: gnu style long options that may have parameters. two syntaxes allowed "--option p1 p2 ..." and "--option='params'"
arguments/parameters: generic parameters

free: everything can be placed everywhere, switches can be splitted, switches and options may be repeated, command decides how to resolve conflicts, 
options always have unlimited number of args requiring terminators (another option or --)

exact: like free, but options by default do not have params that must be specified by an integer or -1 for "variable" (ie until option/terminator)

strict: like exact, but a fixed number of arguments may be required at the beginning and/or at the end by default --help, --info and --version are 
preimposted to show help (provided by function args_help), info and version

simple: <command> <params>
free: <command> [<params>] [-<switches>] [<params>] [--<option> [option-params] ... --] [<params>] -> only the sub-format <command> ... -- <params> is unambiguous
advanced: <command> <fixed-number-params> [-<switches>] [--<option> [option-params] | ...] -- <params> -> unambiguous except for options and its params cannot be --
perfect: <command> <fixed-number-params> [-<switches>] [--<option>[=<option-params>] | ...] -- <params> -> unambiguous except for options and its params cannot be --
strict: <command> <fixed-number-beginning-params> [-<switches>] [--<option>[=<option-params>] | ...] -- <fixed-number-params> <params> <fixed-number-params>

ARGS_PARSE: true|anything
ARGS_FORMAT: easy|smart|strict

ARGS_SWITCH_ON: value for switch and option flag on (default = "true")
ARGS_SWITCH_OFF: value for switch and option flag off (default = "")

ARGS_SWITCH: all allowed switches with no spaces
ARGS_SWITCH_PREFIX: prefix for default variable name receiving switch value (default = "SWITCH")
ARGS_SWITCH_FUNCTION_PREFIX: prefix for default function name receiving switch value (default = "switch")

ARGS_SWITCH_<switch>: name of the variable to receive switch value (default = "$ARGS_SWITCH_PREFIX_<switch>")
!!!ARGS_SWITCH_FUNCTION_<switch>: name of the function to receive switch value (default = "$ARGS_SWITCH_FUNCTION_PREFIX_<switch>")

ARGS_OPTION: space separated options without the -- prefix
ARGS_OPTION_PREFIX: prefix for default variable name receiving switch value (default = "OPTION")
ARGS_OPTION_FUNCTION_PREFIX: prefix for default function name receiving switch value (default = "option")

ARGS_OPTION_PREFIX_<option>: overrides default prefix for variable name receiving option value (default = "$ARGS_OPTION_PREFIX")
ARGS_OPTION_FUNCTION_PREFIX_<option>: overrides default prefix for function name receiving option value (default = "$ARGS_OPTION_FUNCTION_PREFIX")
ARGS_OPTION_<option>: fixed number of args it must have or -1 to autodetect (until another option or -- terminator)
ARGS_OPTION_<option>_<n>: name of the variable to receive option param (default = "$ARGS_OPTION_PREFIX_<option>_<n>")
!!!ARGS_OPTION_FUNCTION_<option>_<n>: name of the function to receive option param (default = "$ARGS_OPTION_FUNCTION_PREFIX_<option>_<n>")

---
ARGS_SWITCH: all allowed switches with no spaces
ARGS_SWITCH_VARIABLE_PREFIX: prefix for default variable name receiving switch value (default = "SWITCH")
ARGS_SWITCH_FUNCTION_PREFIX: prefix for default function name receiving switch value (default = "switch")

ARGS_SWITCH_VARIABLE_<switch>: name of the variable to receive switch value (default = "$ARGS_SWITCH_VARIABLE_PREFIX_<switch>")
ARGS_SWITCH_FUNCTION_<switch>: name of the function to receive switch value (default = "$ARGS_SWITCH_FUNCTION_PREFIX_<switch>")

ARGS_OPTION: space separated options without the -- prefix
ARGS_OPTION_VARIABLE_PREFIX: prefix for default variable name receiving option params (default = "OPTION")
ARGS_OPTION_FUNCTION_PREFIX: prefix for default function name receiving option params (default = "option")
ARGS_OPTION_FUNCTION: default function name receiving option params for every options (default = "$ARGS_OPTION_FUNCTION_PREFIX")

ARGS_OPTION_<option>: fixed number of args it must have or -1 to autodetect (until another option or -- terminator) or "<"+<integer> for max args to autodetect
ARGS_OPTION_<option>_VARIABLE_PREFIX: overrides default prefix for variable name receiving option params (default = "$ARGS_OPTION_VARIABLE_PREFIX")
ARGS_OPTION_<option>_FUNCTION_PREFIX: overrides default prefix for function name receiving option params (default = "$ARGS_OPTION_FUNCTION_PREFIX")
ARGS_OPTION_<option>_FUNCTION: overrides default function name receiving option params (default = "$ARGS_OPTION_<option>_FUNCTION_PREFIX")
ARGS_OPTION_<option>_VARIABLE_<n>: name of the duplicate variable to receive option param (default = "$ARGS_OPTION_VARIABLE_PREFIX_<option>_<n>")
ARGS_OPTION_<option>_FUNCTION_<n>: name of the override  function to receive option param (default = "$ARGS_OPTION_FUNCTION_PREFIX_<option>_<n>")
---

ARGS_FIXED, ARGS_START, ARGS_END: similar to ARGS_OPTION

help vars: defaults = "undocumented"
ARGS_HELP_SWITCH_<switch>
ARGS_HELP_OPTION_<option>
ARGS_HELP_FIXED_<n>
ARGS_HELP_START_<n>
ARGS_HELP_END_<n>

m-vos (Virtual Operative System) or m-os: portable dev environment
- even one single application is a whole m system (extremely light) + application
- <pkg>: specified by a name (required), version (optional) and os/platform (optional)
- a package may have some parts different for version and/or os/platform and other parts not.
  NB it is even possible that binaries are platform independent and data is not (eg netbeans)
---
block device: 
  partitions. as few as possible even if and when they will be easily resizable because will affect filesystems performance with fragmentation and physical layout
  currently crappy standards, thus only one partition hacked to be more standard as possible and bootable everywhere
file system: 
  main fs will act as a block device and files as partitions. think about security.
filesystem itself has no user access conrol.
uac is provided by m.os.
protection for general unauthorized access is guarranteed by encryption of block device underlying filesystem and or hardware control.
---
hw/bootdevice/partition/bootloader/kernel/init
hw:<bios|efi>/bootdevice:<mbr|gpt>/partition:<fat32|ntfs|btrfs>/bootloader/kernel/init
m = /bootloader/kernel/init
---
- legacy bootloaders to bridge into m bootloader:
$m.boot (mbr, fat32/ntfs)
$m.boot.efi (gpt, fat32)

- usb fat32 formatted pendrive with minimal bootloader that loads from file the uuid of boot disk and chainloads to it (2 pendrives: bios-mbr, efi-gpt)
- main m partition fs should be btrfs as default choice (to be accessible only from m or posixes) or ntfs for portability (to be accessible from windows also)
- main m partition should be encrypted
- key may be asked to user, or stored securely by boot process preceding m and passed transparently to decryptor
- different encriptions or keys: partition, boot, kernel, pkg+env+usr/system, usr/<user>
---
$m/
  boot
  krn
  pkg
  src
  usr
  vfs
  work
$m/
  pkg: bootloader, kernel, initramfs, pkg, pkg with src to compile and delete src+conf
  src: multi user and multi host development sources for projects
  upk: used by packages, package only related files (user is package itself) also vfs, boot conf and menu, etc
  usr: user only related files (for pkg and personal)
<virtual directories mounts (dev/mnt/proc/sys/tmp/etc.)>
data
vol
---
pkg
  <name-platform-version>
---
src: only development branch with git, explicit source releases are stored somewhere else. checkout on user dir and merged back on team manager approved checkin
  <name> or <name-version>?
    conf: also mk version dependency (as MK_PRJ_VER -> range of compatibles mk versions) and other dependencies
      ide
    ver: project version + build + status (released, fixed, abandoned, ongoing, etc.)
    license: file containing source licence, must be in sources root so taht it cannot be ignored. NB pkg licence is generated from src and is in general different from src lic
---
vfs
  app
  app-<os_type>
  app-<platform>
  cmd
  cmd-<os_type>
  cmd-<platform>
  pkg
  pkg-<os_type>
  pkg-<platform>
  depend
    <required-pkg>
      ...list of packages that depend on it...
  src
    <name-version>
      ...links to all related dirs...
---
usr
  conf
    <user>
  data
    <user>
  home
    <user>
  log
    <user>
  tmp
    <user>
---
work
  conf
    <pkg_name-platform-conf_version>
  data
    <pkg_name-platform-data_version>
  log
    <pkg>
  tmp
    <pkg>
---
data
  doc
  prj
  media
  mnt
  vol
---
$m/work/data/pkg/package
  <version> = <product-version>-<package+template-version>
  latest
---
vfs also for dependecies and reverse dependecies tracking and links to vfs apps and reverse
or use files in work/data/pkg/depend and work/data/pkg/links
---
extensions that an app can manage are named in pkg
documents specifications are independent from apps and define associated icons/themes (or dependent from os theme), extensions, etc.
---
