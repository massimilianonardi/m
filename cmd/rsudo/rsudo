#!/bin/sh

#------------------------------------------------------------------------------

log()
{
  echo "$(date +"[%Y-%m-%d %H:%M:%S]")" "$@" 1>&2
}

#------------------------------------------------------------------------------

execute()
{
# (
  if [ "$#" -eq "0" ] || [ -z "$*" ]
  then
    if [ -t 0 ]
    then
      exit 1
    fi

    set -- /bin/sh -s
  fi

  for k in "$@"
  do
    shift
    set -- "$@" \""$k"\"
  done

  setsid ssh -n -o 'StrictHostKeyChecking no' -l "$REMOTE_USER" "$REMOTE_HOST" sudo -K\; sudo -n true 1>/dev/null 2>/dev/null
  SUDO_NO_PASS="$?"

  if [ -z "$EXECUTE_AS" ]
  then
    if [ "$REMOTE_USER" = "root" ]
    then
      RSUDO_SSH_COMMAND=""
    elif [ "$SUDO_NO_PASS" = "0" ]
    then
      RSUDO_SSH_COMMAND="sudo --"
    else
      RSUDO_SSH_COMMAND="sudo -S --prompt='' --"
    fi
  else
    if [ "$REMOTE_USER" = "root" ] || [ "$SUDO_NO_PASS" = "0" ]
    then
      RSUDO_SSH_COMMAND="sudo --user=\"$EXECUTE_AS\" --"
    else
      RSUDO_SSH_COMMAND="sudo -S --prompt='' --user=\"$EXECUTE_AS\" --"
    fi
  fi
  # RSUDO_SSH_COMMAND="pwd 1>&2; cd /; $RSUDO_SSH_COMMAND"
  RSUDO_SSH_COMMAND="pwd 1>&2; $RSUDO_SSH_COMMAND"
  log "RSUDO_SSH_COMMAND=$RSUDO_SSH_COMMAND"

  if [ "$SUDO_NO_PASS" = "0" ]
  then
    log "no password provided to sudo"
    setsid ssh -o 'StrictHostKeyChecking no' -l "$REMOTE_USER" "$REMOTE_HOST" "$RSUDO_SSH_COMMAND" "$@"
  else
    log "password provided to sudo"
    (echo "$RSUDO_PASSWORD"; [ ! -t 0 ] && cat) | setsid ssh -o 'StrictHostKeyChecking no' -l "$REMOTE_USER" "$REMOTE_HOST" "$RSUDO_SSH_COMMAND" "$@"
  fi
# )
}

#------------------------------------------------------------------------------

shell()
{
# (
  if [ "$#" -eq "0" ] || [ -z "$*" ]
  then
    exit 1
  fi

  execute /bin/sh -c "$@"
# )
}

#------------------------------------------------------------------------------

execute_as()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  EXECUTE_AS="$1"
  shift

  execute "$@"
# )
}

#------------------------------------------------------------------------------

shell_as()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  EXECUTE_AS="$1"
  shift

  shell "$@"
# )
}

#------------------------------------------------------------------------------

sql()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  REMOTE_DB="$1"
  shift

  SQL_COMMAND="$@"

  if [ -z "$SQL_COMMAND" ]
  then
    execute_as postgres psql "$REMOTE_DB"
  else
    execute_as postgres psql "$REMOTE_DB" -c "$SQL_COMMAND"
  fi
# )
}

getdb()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  REMOTE_DB="$1"

  if [ ! -t 0 ]
  then
    cat
  fi

  execute_as postgres pg_dump "$REMOTE_DB"
# )
}

putdb()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  REMOTE_DB="$1"
  LOCAL_PATH="$2"

  if [ -z "$LOCAL_PATH" ] && [ -t 0 ]
  then
    exit 1
  fi

  # sql "" "SELECT pg_terminate_backend(pg_stat_activity.procid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND procid <> pg_backend_pid();" 1>/dev/null 2>/dev/null
  # sql "" "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$REMOTE_DB' AND pid <> pg_backend_pid();" 1>/dev/null 2>/dev/null
  execute service postgresql restart
  execute_as postgres dropdb "$REMOTE_DB"
  # execute_as postgres dropdb "$REMOTE_DB" 1>/dev/null 2>/dev/null
  # execute_as postgres dropdb --if-exists "$REMOTE_DB" 1>/dev/null 2>/dev/null

  if [ -z "$LOCAL_PATH" ]
  then
    shell_as postgres "createdb '$REMOTE_DB' && psql '$REMOTE_DB'"
  else
    cat "$LOCAL_PATH" | shell_as postgres "createdb '$REMOTE_DB' && psql '$REMOTE_DB'"
  fi
# )
}

#------------------------------------------------------------------------------

delete()
{
# (
  if [ -z "$1" ]
  then
    exit 1
  fi

  REMOTE_PATH="$1"

  execute rm -rf -- "$REMOTE_PATH"
# )
}

get()
{
# (
  if [ -z "$1" ] || [ -z "$2" ]
  then
    exit 1
  fi

  REMOTE_PATH="$1"
  LOCAL_PATH="$2"

  REMOTE_PATH_TYPE="$(execute ls -ld "$REMOTE_PATH" | cut -c 1 | tr '-' 'f' | tr 'l' 'L')"

  if [ ! "$?" -eq "0" ]
  then
    exit 1
  fi

  log REMOTE_PATH_TYPE="$REMOTE_PATH_TYPE"

  if [ "$REMOTE_PATH_TYPE" = "L" ]
  then
    TARGET="$(execute ls -ld -- "$REMOTE_PATH")"
    TARGET=${TARGET#*" $REMOTE_PATH -> "}
    rm -rf -- "$LOCAL_PATH" && mkdir -p "${LOCAL_PATH%/*}" && ln -s "$TARGET" "$LOCAL_PATH"
  elif [ "$REMOTE_PATH_TYPE" = "f" ]
  then
    rm -rf -- "$LOCAL_PATH" && mkdir -p "${LOCAL_PATH%/*}" && execute cat "$REMOTE_PATH" > "$LOCAL_PATH"
  elif [ "$REMOTE_PATH_TYPE" = "d" ]
  then
    rm -rf -- "$LOCAL_PATH" && mkdir -p "$LOCAL_PATH" && cd "$LOCAL_PATH" && shell "cd '$REMOTE_PATH' && tar -c -f - ." | tar -x -f -
  else
    log "get: $REMOTE_PATH doesn't exists"
    exit 1
  fi
# )
}

put()
{
# (
  if [ -z "$1" ] || [ -z "$2" ]
  then
    exit 1
  fi

  LOCAL_PATH="$1"
  REMOTE_PATH="$2"
  REMOTE_OWNER_GROUP="$3"
  REMOTE_PERMISSIONS="$4"

  if [ -L "$LOCAL_PATH" ]
  then
    TARGET=$(ls -ld -- "$LOCAL_PATH")
    TARGET=${TARGET#*" $LOCAL_PATH -> "}
    shell "rm -rf -- '$REMOTE_PATH' && mkdir -p '${REMOTE_PATH%/*}' && ln -s '$TARGET' '$REMOTE_PATH'"
  elif [ -f "$LOCAL_PATH" ]
  then
    cat "$LOCAL_PATH" | shell "rm -rf -- '$REMOTE_PATH' && mkdir -p '${REMOTE_PATH%/*}' && cat > '$REMOTE_PATH'"
  elif [ -d "$LOCAL_PATH" ]
  then
    cd "$LOCAL_PATH" && tar -c -f - . | shell "rm -rf -- '$REMOTE_PATH' && mkdir -p '$REMOTE_PATH' && cd '$REMOTE_PATH' && tar -x -f -"
    # cd "$LOCAL_PATH" && tar -c -f - . | execute tar -t -f -
  else
    log "put: $LOCAL_PATH doesn't exists"
    exit 1
  fi

  if [ ! "$?" -eq "0" ]
  then
    exit 1
  fi

  if [ -n "$REMOTE_OWNER_GROUP" ]; then execute chown -R "$REMOTE_OWNER_GROUP" "$REMOTE_PATH"; fi && \
  if [ -n "$REMOTE_PERMISSIONS" ]; then execute chmod -R "$REMOTE_PERMISSIONS" "$REMOTE_PATH"; fi
# )
}

s2s_direct()
{
  if [ -z "$1" ] || [ -z "$2" ]
  then
    exit 1
  fi

  SOURCE_PATH="$1"
  DEST_PATH="$2"
  REMOTE_OWNER_GROUP="$3"
  REMOTE_PERMISSIONS="$4"

  #todo
}

s2s_proxy()
{
  if [ -z "$1" ] || [ -z "$2" ]
  then
    exit 1
  fi

  SOURCE_PATH="$1"
  DEST_PATH="$2"
  REMOTE_OWNER_GROUP="$3"
  REMOTE_PERMISSIONS="$4"

  #todo
}

#------------------------------------------------------------------------------

if [ "$#" -eq 1 ]
then
  echo "$RSUDO_PASSWORD"
  exit
fi

export DISPLAY=:0
export SSH_ASKPASS="$0"

log COMMAND_LINE="$@"

COMMAND="$1"
shift
log COMMAND="$COMMAND"

REMOTE_HOST="$1"
shift
log REMOTE_HOST="$REMOTE_HOST"

REMOTE_USER="$1"
shift
log REMOTE_USER="$REMOTE_USER"

log COMMAND_PARAMETERS="$@"

if [ -z "$RSUDO_PASSWORD" ]
then
  if [ -t 0 ]
  then
    echo "[rsudo] Enter password for ${REMOTE_HOST}@${REMOTE_USER}:" 1>&2
    stty -echo
    read -r RSUDO_PASSWORD
    stty echo
  else
    read -r RSUDO_PASSWORD
  fi
  export RSUDO_PASSWORD
fi

"$COMMAND" "$@"
