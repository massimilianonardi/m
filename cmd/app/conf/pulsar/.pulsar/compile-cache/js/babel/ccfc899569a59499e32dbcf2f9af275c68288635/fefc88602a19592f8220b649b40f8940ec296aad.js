"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _os = _interopRequireDefault(require("os"));
var _stackTrace = _interopRequireDefault(require("stack-trace"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */

const API_KEY = '7ddca14cb60cbd1cd12d1b252473b076';
const LIB_VERSION = require('../package.json')['version'];
const StackTraceCache = new WeakMap();
class Reporter {
  constructor(params = {}) {
    this.request = params.request || window.fetch;
    this.alwaysReport = params.hasOwnProperty('alwaysReport') ? params.alwaysReport : false;
    this.reportPreviousErrors = params.hasOwnProperty('reportPreviousErrors') ? params.reportPreviousErrors : true;
    this.resourcePath = this.normalizePath(params.resourcePath || process.resourcesPath);
    this.reportedErrors = [];
    this.reportedAssertionFailures = [];
  }
  buildNotificationJSON(error, params) {
    return {
      apiKey: API_KEY,
      notifier: {
        name: 'Pulsar',
        version: LIB_VERSION,
        url: 'https://www.atom.io'
      },
      events: [{
        payloadVersion: '2',
        exceptions: [this.buildExceptionJSON(error, params.projectRoot)],
        severity: params.severity,
        user: {
          id: params.userId
        },
        app: {
          version: params.appVersion,
          releaseStage: params.releaseStage
        },
        device: {
          osVersion: params.osVersion
        },
        metaData: error.metadata
      }]
    };
  }
  buildExceptionJSON(error, projectRoot) {
    return {
      errorClass: error.constructor.name,
      message: error.message,
      stacktrace: this.buildStackTraceJSON(error, projectRoot)
    };
  }
  buildStackTraceJSON(error, projectRoot) {
    return this.parseStackTrace(error).map(callSite => {
      return {
        file: this.scrubPath(callSite.getFileName()),
        method: callSite.getMethodName() || callSite.getFunctionName() || 'none',
        lineNumber: callSite.getLineNumber(),
        columnNumber: callSite.getColumnNumber(),
        inProject: !/node_modules/.test(callSite.getFileName())
      };
    });
  }
  normalizePath(pathToNormalize) {
    return pathToNormalize.replace('file:///', '') // Sometimes it's a uri
    .replace(/\\/g, '/'); // Unify path separators across Win/macOS/Linux
  }

  scrubPath(pathToScrub) {
    const absolutePath = this.normalizePath(pathToScrub);
    if (this.isBundledFile(absolutePath)) {
      return this.normalizePath(_path.default.relative(this.resourcePath, absolutePath));
    } else {
      let homeDirectory;
      if (process.platform === 'win32' && !process.env.HOME) {
        homeDirectory = process.env.USERPROFILE;
      } else {
        homeDirectory = process.env.HOME;
      }
      return absolutePath.replace(this.normalizePath(homeDirectory), '~') // Remove users home dir
      .replace(/.*(\/packages\/.*)/, '$1'); // Remove everything before app.asar or packages
    }
  }

  getDefaultNotificationParams() {
    return {
      userId: atom.config.get('exception-reporting.userId'),
      appVersion: atom.getVersion(),
      releaseStage: this.getReleaseChannel(atom.getVersion()),
      projectRoot: atom.getLoadSettings().resourcePath,
      osVersion: `${_os.default.platform()}-${_os.default.arch()}-${_os.default.release()}`
    };
  }
  getReleaseChannel(version) {
    return version.indexOf('beta') > -1 ? 'beta' : version.indexOf('dev') > -1 ? 'dev' : 'stable';
  }
  performRequest(json) {
    this.request.call(null, 'https://notify.bugsnag.com', {
      method: 'POST',
      headers: new Headers({
        'Content-Type': 'application/json'
      }),
      body: JSON.stringify(json)
    });
  }
  shouldReport(error) {
    // Since the `core.telemetryConsent` variable has been removed, this has no good way 
    // to check if should report to the remote. So we will just always return false 
    // to report to remote. But still allow reporting locally.
    return false;
  }
  parseStackTrace(error) {
    let callSites = StackTraceCache.get(error);
    if (callSites) {
      return callSites;
    } else {
      callSites = _stackTrace.default.parse(error);
      StackTraceCache.set(error, callSites);
      return callSites;
    }
  }
  requestPrivateMetadataConsent(error, message, reportFn) {
    let notification, dismissSubscription;
    function reportWithoutPrivateMetadata() {
      if (dismissSubscription) {
        dismissSubscription.dispose();
      }
      delete error.privateMetadata;
      delete error.privateMetadataDescription;
      reportFn(error);
      if (notification) {
        notification.dismiss();
      }
    }
    function reportWithPrivateMetadata() {
      if (error.metadata == null) {
        error.metadata = {};
      }
      for (let key in error.privateMetadata) {
        let value = error.privateMetadata[key];
        error.metadata[key] = value;
      }
      reportWithoutPrivateMetadata();
    }
    const name = error.privateMetadataRequestName;
    if (name != null) {
      if (localStorage.getItem(`private-metadata-request:${name}`)) {
        return reportWithoutPrivateMetadata(error);
      } else {
        localStorage.setItem(`private-metadata-request:${name}`, true);
      }
    }
    notification = atom.notifications.addInfo(message, {
      detail: error.privateMetadataDescription,
      description: 'Are you willing to submit this information to a private server for debugging purposes?',
      dismissable: true,
      buttons: [{
        text: 'No',
        onDidClick: reportWithoutPrivateMetadata
      }, {
        text: 'Yes, Submit for Debugging',
        onDidClick: reportWithPrivateMetadata
      }]
    });
    dismissSubscription = notification.onDidDismiss(reportWithoutPrivateMetadata);
  }
  addPackageMetadata(error) {
    let activePackages = atom.packages.getActivePackages();
    const availablePackagePaths = atom.packages.getPackageDirPaths();
    if (activePackages.length > 0) {
      let userPackages = {};
      let bundledPackages = {};
      for (let pack of atom.packages.getActivePackages()) {
        if (availablePackagePaths.includes(_path.default.dirname(pack.path))) {
          userPackages[pack.name] = pack.metadata.version;
        } else {
          bundledPackages[pack.name] = pack.metadata.version;
        }
      }
      if (error.metadata == null) {
        error.metadata = {};
      }
      error.metadata.bundledPackages = bundledPackages;
      error.metadata.userPackages = userPackages;
    }
  }
  addPreviousErrorsMetadata(error) {
    if (!this.reportPreviousErrors) return;
    if (!error.metadata) error.metadata = {};
    error.metadata.previousErrors = this.reportedErrors.map(error => error.message);
    error.metadata.previousAssertionFailures = this.reportedAssertionFailures.map(error => error.message);
  }
  reportUncaughtException(error) {
    if (!this.shouldReport(error)) return;
    this.addPackageMetadata(error);
    this.addPreviousErrorsMetadata(error);
    if (error.privateMetadata != null && error.privateMetadataDescription != null) {
      this.requestPrivateMetadataConsent(error, 'The Pulsar team would like to collect the following information to resolve this error:', error => this.reportUncaughtException(error));
      return;
    }
    let params = this.getDefaultNotificationParams();
    params.severity = 'error';
    this.performRequest(this.buildNotificationJSON(error, params));
    this.reportedErrors.push(error);
  }
  reportFailedAssertion(error) {
    if (!this.shouldReport(error)) return;
    this.addPackageMetadata(error);
    this.addPreviousErrorsMetadata(error);
    if (error.privateMetadata != null && error.privateMetadataDescription != null) {
      this.requestPrivateMetadataConsent(error, 'The Pulsar team would like to collect some information to resolve an unexpected condition:', error => this.reportFailedAssertion(error));
      return;
    }
    let params = this.getDefaultNotificationParams();
    params.severity = 'warning';
    this.performRequest(this.buildNotificationJSON(error, params));
    this.reportedAssertionFailures.push(error);
  }

  // Used in specs
  setRequestFunction(requestFunction) {
    this.request = requestFunction;
  }
  isBundledFile(fileName) {
    return this.normalizePath(fileName).indexOf(this.resourcePath) === 0;
  }
  isTeletypeFile(fileName) {
    const teletypePath = atom.packages.resolvePackagePath('teletype');
    return teletypePath && this.normalizePath(fileName).indexOf(teletypePath) === 0;
  }
}
exports.default = Reporter;
Reporter.API_KEY = API_KEY;
Reporter.LIB_VERSION = LIB_VERSION;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBUElfS0VZIiwiTElCX1ZFUlNJT04iLCJyZXF1aXJlIiwiU3RhY2tUcmFjZUNhY2hlIiwiV2Vha01hcCIsIlJlcG9ydGVyIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJyZXF1ZXN0Iiwid2luZG93IiwiZmV0Y2giLCJhbHdheXNSZXBvcnQiLCJoYXNPd25Qcm9wZXJ0eSIsInJlcG9ydFByZXZpb3VzRXJyb3JzIiwicmVzb3VyY2VQYXRoIiwibm9ybWFsaXplUGF0aCIsInByb2Nlc3MiLCJyZXNvdXJjZXNQYXRoIiwicmVwb3J0ZWRFcnJvcnMiLCJyZXBvcnRlZEFzc2VydGlvbkZhaWx1cmVzIiwiYnVpbGROb3RpZmljYXRpb25KU09OIiwiZXJyb3IiLCJhcGlLZXkiLCJub3RpZmllciIsIm5hbWUiLCJ2ZXJzaW9uIiwidXJsIiwiZXZlbnRzIiwicGF5bG9hZFZlcnNpb24iLCJleGNlcHRpb25zIiwiYnVpbGRFeGNlcHRpb25KU09OIiwicHJvamVjdFJvb3QiLCJzZXZlcml0eSIsInVzZXIiLCJpZCIsInVzZXJJZCIsImFwcCIsImFwcFZlcnNpb24iLCJyZWxlYXNlU3RhZ2UiLCJkZXZpY2UiLCJvc1ZlcnNpb24iLCJtZXRhRGF0YSIsIm1ldGFkYXRhIiwiZXJyb3JDbGFzcyIsIm1lc3NhZ2UiLCJzdGFja3RyYWNlIiwiYnVpbGRTdGFja1RyYWNlSlNPTiIsInBhcnNlU3RhY2tUcmFjZSIsIm1hcCIsImNhbGxTaXRlIiwiZmlsZSIsInNjcnViUGF0aCIsImdldEZpbGVOYW1lIiwibWV0aG9kIiwiZ2V0TWV0aG9kTmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsImxpbmVOdW1iZXIiLCJnZXRMaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZ2V0Q29sdW1uTnVtYmVyIiwiaW5Qcm9qZWN0IiwidGVzdCIsInBhdGhUb05vcm1hbGl6ZSIsInJlcGxhY2UiLCJwYXRoVG9TY3J1YiIsImFic29sdXRlUGF0aCIsImlzQnVuZGxlZEZpbGUiLCJwYXRoIiwicmVsYXRpdmUiLCJob21lRGlyZWN0b3J5IiwicGxhdGZvcm0iLCJlbnYiLCJIT01FIiwiVVNFUlBST0ZJTEUiLCJnZXREZWZhdWx0Tm90aWZpY2F0aW9uUGFyYW1zIiwiYXRvbSIsImNvbmZpZyIsImdldCIsImdldFZlcnNpb24iLCJnZXRSZWxlYXNlQ2hhbm5lbCIsImdldExvYWRTZXR0aW5ncyIsIm9zIiwiYXJjaCIsInJlbGVhc2UiLCJpbmRleE9mIiwicGVyZm9ybVJlcXVlc3QiLCJqc29uIiwiY2FsbCIsImhlYWRlcnMiLCJIZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzaG91bGRSZXBvcnQiLCJjYWxsU2l0ZXMiLCJzdGFja1RyYWNlIiwicGFyc2UiLCJzZXQiLCJyZXF1ZXN0UHJpdmF0ZU1ldGFkYXRhQ29uc2VudCIsInJlcG9ydEZuIiwibm90aWZpY2F0aW9uIiwiZGlzbWlzc1N1YnNjcmlwdGlvbiIsInJlcG9ydFdpdGhvdXRQcml2YXRlTWV0YWRhdGEiLCJkaXNwb3NlIiwicHJpdmF0ZU1ldGFkYXRhIiwicHJpdmF0ZU1ldGFkYXRhRGVzY3JpcHRpb24iLCJkaXNtaXNzIiwicmVwb3J0V2l0aFByaXZhdGVNZXRhZGF0YSIsImtleSIsInZhbHVlIiwicHJpdmF0ZU1ldGFkYXRhUmVxdWVzdE5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIm5vdGlmaWNhdGlvbnMiLCJhZGRJbmZvIiwiZGV0YWlsIiwiZGVzY3JpcHRpb24iLCJkaXNtaXNzYWJsZSIsImJ1dHRvbnMiLCJ0ZXh0Iiwib25EaWRDbGljayIsIm9uRGlkRGlzbWlzcyIsImFkZFBhY2thZ2VNZXRhZGF0YSIsImFjdGl2ZVBhY2thZ2VzIiwicGFja2FnZXMiLCJnZXRBY3RpdmVQYWNrYWdlcyIsImF2YWlsYWJsZVBhY2thZ2VQYXRocyIsImdldFBhY2thZ2VEaXJQYXRocyIsImxlbmd0aCIsInVzZXJQYWNrYWdlcyIsImJ1bmRsZWRQYWNrYWdlcyIsInBhY2siLCJpbmNsdWRlcyIsImRpcm5hbWUiLCJhZGRQcmV2aW91c0Vycm9yc01ldGFkYXRhIiwicHJldmlvdXNFcnJvcnMiLCJwcmV2aW91c0Fzc2VydGlvbkZhaWx1cmVzIiwicmVwb3J0VW5jYXVnaHRFeGNlcHRpb24iLCJwdXNoIiwicmVwb3J0RmFpbGVkQXNzZXJ0aW9uIiwic2V0UmVxdWVzdEZ1bmN0aW9uIiwicmVxdWVzdEZ1bmN0aW9uIiwiZmlsZU5hbWUiLCJpc1RlbGV0eXBlRmlsZSIsInRlbGV0eXBlUGF0aCIsInJlc29sdmVQYWNrYWdlUGF0aCJdLCJzb3VyY2VzIjpbInJlcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cblxuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBzdGFja1RyYWNlIGZyb20gJ3N0YWNrLXRyYWNlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBBUElfS0VZID0gJzdkZGNhMTRjYjYwY2JkMWNkMTJkMWIyNTI0NzNiMDc2JztcbmNvbnN0IExJQl9WRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJylbJ3ZlcnNpb24nXTtcbmNvbnN0IFN0YWNrVHJhY2VDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcG9ydGVyIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcbiAgICB0aGlzLnJlcXVlc3QgPSBwYXJhbXMucmVxdWVzdCB8fCB3aW5kb3cuZmV0Y2g7XG4gICAgdGhpcy5hbHdheXNSZXBvcnQgPSBwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2Fsd2F5c1JlcG9ydCcpXG4gICAgICA/IHBhcmFtcy5hbHdheXNSZXBvcnRcbiAgICAgIDogZmFsc2U7XG4gICAgdGhpcy5yZXBvcnRQcmV2aW91c0Vycm9ycyA9IHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncmVwb3J0UHJldmlvdXNFcnJvcnMnKVxuICAgICAgPyBwYXJhbXMucmVwb3J0UHJldmlvdXNFcnJvcnNcbiAgICAgIDogdHJ1ZTtcbiAgICB0aGlzLnJlc291cmNlUGF0aCA9IHRoaXMubm9ybWFsaXplUGF0aChcbiAgICAgIHBhcmFtcy5yZXNvdXJjZVBhdGggfHwgcHJvY2Vzcy5yZXNvdXJjZXNQYXRoXG4gICAgKTtcbiAgICB0aGlzLnJlcG9ydGVkRXJyb3JzID0gW107XG4gICAgdGhpcy5yZXBvcnRlZEFzc2VydGlvbkZhaWx1cmVzID0gW107XG4gIH1cblxuICBidWlsZE5vdGlmaWNhdGlvbkpTT04oZXJyb3IsIHBhcmFtcykge1xuICAgIHJldHVybiB7XG4gICAgICBhcGlLZXk6IEFQSV9LRVksXG4gICAgICBub3RpZmllcjoge1xuICAgICAgICBuYW1lOiAnUHVsc2FyJyxcbiAgICAgICAgdmVyc2lvbjogTElCX1ZFUlNJT04sXG4gICAgICAgIHVybDogJ2h0dHBzOi8vd3d3LmF0b20uaW8nXG4gICAgICB9LFxuICAgICAgZXZlbnRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXlsb2FkVmVyc2lvbjogJzInLFxuICAgICAgICAgIGV4Y2VwdGlvbnM6IFt0aGlzLmJ1aWxkRXhjZXB0aW9uSlNPTihlcnJvciwgcGFyYW1zLnByb2plY3RSb290KV0sXG4gICAgICAgICAgc2V2ZXJpdHk6IHBhcmFtcy5zZXZlcml0eSxcbiAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICBpZDogcGFyYW1zLnVzZXJJZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwOiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBwYXJhbXMuYXBwVmVyc2lvbixcbiAgICAgICAgICAgIHJlbGVhc2VTdGFnZTogcGFyYW1zLnJlbGVhc2VTdGFnZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGV2aWNlOiB7XG4gICAgICAgICAgICBvc1ZlcnNpb246IHBhcmFtcy5vc1ZlcnNpb25cbiAgICAgICAgICB9LFxuICAgICAgICAgIG1ldGFEYXRhOiBlcnJvci5tZXRhZGF0YVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIGJ1aWxkRXhjZXB0aW9uSlNPTihlcnJvciwgcHJvamVjdFJvb3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JDbGFzczogZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBzdGFja3RyYWNlOiB0aGlzLmJ1aWxkU3RhY2tUcmFjZUpTT04oZXJyb3IsIHByb2plY3RSb290KVxuICAgIH07XG4gIH1cblxuICBidWlsZFN0YWNrVHJhY2VKU09OKGVycm9yLCBwcm9qZWN0Um9vdCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlU3RhY2tUcmFjZShlcnJvcikubWFwKGNhbGxTaXRlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGU6IHRoaXMuc2NydWJQYXRoKGNhbGxTaXRlLmdldEZpbGVOYW1lKCkpLFxuICAgICAgICBtZXRob2Q6XG4gICAgICAgICAgY2FsbFNpdGUuZ2V0TWV0aG9kTmFtZSgpIHx8IGNhbGxTaXRlLmdldEZ1bmN0aW9uTmFtZSgpIHx8ICdub25lJyxcbiAgICAgICAgbGluZU51bWJlcjogY2FsbFNpdGUuZ2V0TGluZU51bWJlcigpLFxuICAgICAgICBjb2x1bW5OdW1iZXI6IGNhbGxTaXRlLmdldENvbHVtbk51bWJlcigpLFxuICAgICAgICBpblByb2plY3Q6ICEvbm9kZV9tb2R1bGVzLy50ZXN0KGNhbGxTaXRlLmdldEZpbGVOYW1lKCkpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgbm9ybWFsaXplUGF0aChwYXRoVG9Ob3JtYWxpemUpIHtcbiAgICByZXR1cm4gcGF0aFRvTm9ybWFsaXplXG4gICAgICAucmVwbGFjZSgnZmlsZTovLy8nLCAnJykgLy8gU29tZXRpbWVzIGl0J3MgYSB1cmlcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJyk7IC8vIFVuaWZ5IHBhdGggc2VwYXJhdG9ycyBhY3Jvc3MgV2luL21hY09TL0xpbnV4XG4gIH1cblxuICBzY3J1YlBhdGgocGF0aFRvU2NydWIpIHtcbiAgICBjb25zdCBhYnNvbHV0ZVBhdGggPSB0aGlzLm5vcm1hbGl6ZVBhdGgocGF0aFRvU2NydWIpO1xuXG4gICAgaWYgKHRoaXMuaXNCdW5kbGVkRmlsZShhYnNvbHV0ZVBhdGgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVQYXRoKHBhdGgucmVsYXRpdmUodGhpcy5yZXNvdXJjZVBhdGgsIGFic29sdXRlUGF0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaG9tZURpcmVjdG9yeTtcbiAgICAgIGlmICgocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykgJiYgIXByb2Nlc3MuZW52LkhPTUUpIHtcbiAgICAgICAgaG9tZURpcmVjdG9yeSA9IHByb2Nlc3MuZW52LlVTRVJQUk9GSUxFO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaG9tZURpcmVjdG9yeSA9IHByb2Nlc3MuZW52LkhPTUU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWJzb2x1dGVQYXRoXG4gICAgICAgIC5yZXBsYWNlKHRoaXMubm9ybWFsaXplUGF0aChob21lRGlyZWN0b3J5KSwgJ34nKSAvLyBSZW1vdmUgdXNlcnMgaG9tZSBkaXJcbiAgICAgICAgLnJlcGxhY2UoLy4qKFxcL3BhY2thZ2VzXFwvLiopLywgJyQxJyk7IC8vIFJlbW92ZSBldmVyeXRoaW5nIGJlZm9yZSBhcHAuYXNhciBvciBwYWNrYWdlc1xuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHROb3RpZmljYXRpb25QYXJhbXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJJZDogYXRvbS5jb25maWcuZ2V0KCdleGNlcHRpb24tcmVwb3J0aW5nLnVzZXJJZCcpLFxuICAgICAgYXBwVmVyc2lvbjogYXRvbS5nZXRWZXJzaW9uKCksXG4gICAgICByZWxlYXNlU3RhZ2U6IHRoaXMuZ2V0UmVsZWFzZUNoYW5uZWwoYXRvbS5nZXRWZXJzaW9uKCkpLFxuICAgICAgcHJvamVjdFJvb3Q6IGF0b20uZ2V0TG9hZFNldHRpbmdzKCkucmVzb3VyY2VQYXRoLFxuICAgICAgb3NWZXJzaW9uOiBgJHtvcy5wbGF0Zm9ybSgpfS0ke29zLmFyY2goKX0tJHtvcy5yZWxlYXNlKCl9YFxuICAgIH07XG4gIH1cblxuICBnZXRSZWxlYXNlQ2hhbm5lbCh2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHZlcnNpb24uaW5kZXhPZignYmV0YScpID4gLTFcbiAgICAgID8gJ2JldGEnXG4gICAgICA6IHZlcnNpb24uaW5kZXhPZignZGV2JykgPiAtMVxuICAgICAgPyAnZGV2J1xuICAgICAgOiAnc3RhYmxlJztcbiAgfVxuXG4gIHBlcmZvcm1SZXF1ZXN0KGpzb24pIHtcbiAgICB0aGlzLnJlcXVlc3QuY2FsbChudWxsLCAnaHR0cHM6Ly9ub3RpZnkuYnVnc25hZy5jb20nLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGpzb24pXG4gICAgfSk7XG4gIH1cblxuICBzaG91bGRSZXBvcnQoZXJyb3IpIHtcbiAgICAvLyBTaW5jZSB0aGUgYGNvcmUudGVsZW1ldHJ5Q29uc2VudGAgdmFyaWFibGUgaGFzIGJlZW4gcmVtb3ZlZCwgdGhpcyBoYXMgbm8gZ29vZCB3YXkgXG4gICAgLy8gdG8gY2hlY2sgaWYgc2hvdWxkIHJlcG9ydCB0byB0aGUgcmVtb3RlLiBTbyB3ZSB3aWxsIGp1c3QgYWx3YXlzIHJldHVybiBmYWxzZSBcbiAgICAvLyB0byByZXBvcnQgdG8gcmVtb3RlLiBCdXQgc3RpbGwgYWxsb3cgcmVwb3J0aW5nIGxvY2FsbHkuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcGFyc2VTdGFja1RyYWNlKGVycm9yKSB7XG4gICAgbGV0IGNhbGxTaXRlcyA9IFN0YWNrVHJhY2VDYWNoZS5nZXQoZXJyb3IpO1xuICAgIGlmIChjYWxsU2l0ZXMpIHtcbiAgICAgIHJldHVybiBjYWxsU2l0ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxTaXRlcyA9IHN0YWNrVHJhY2UucGFyc2UoZXJyb3IpO1xuICAgICAgU3RhY2tUcmFjZUNhY2hlLnNldChlcnJvciwgY2FsbFNpdGVzKTtcbiAgICAgIHJldHVybiBjYWxsU2l0ZXM7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdFByaXZhdGVNZXRhZGF0YUNvbnNlbnQoZXJyb3IsIG1lc3NhZ2UsIHJlcG9ydEZuKSB7XG4gICAgbGV0IG5vdGlmaWNhdGlvbiwgZGlzbWlzc1N1YnNjcmlwdGlvbjtcblxuICAgIGZ1bmN0aW9uIHJlcG9ydFdpdGhvdXRQcml2YXRlTWV0YWRhdGEoKSB7XG4gICAgICBpZiAoZGlzbWlzc1N1YnNjcmlwdGlvbikge1xuICAgICAgICBkaXNtaXNzU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSBlcnJvci5wcml2YXRlTWV0YWRhdGE7XG4gICAgICBkZWxldGUgZXJyb3IucHJpdmF0ZU1ldGFkYXRhRGVzY3JpcHRpb247XG4gICAgICByZXBvcnRGbihlcnJvcik7XG4gICAgICBpZiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbi5kaXNtaXNzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwb3J0V2l0aFByaXZhdGVNZXRhZGF0YSgpIHtcbiAgICAgIGlmIChlcnJvci5tZXRhZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yLm1ldGFkYXRhID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrZXkgaW4gZXJyb3IucHJpdmF0ZU1ldGFkYXRhKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGVycm9yLnByaXZhdGVNZXRhZGF0YVtrZXldO1xuICAgICAgICBlcnJvci5tZXRhZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXBvcnRXaXRob3V0UHJpdmF0ZU1ldGFkYXRhKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IGVycm9yLnByaXZhdGVNZXRhZGF0YVJlcXVlc3ROYW1lO1xuICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgcHJpdmF0ZS1tZXRhZGF0YS1yZXF1ZXN0OiR7bmFtZX1gKSkge1xuICAgICAgICByZXR1cm4gcmVwb3J0V2l0aG91dFByaXZhdGVNZXRhZGF0YShlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgcHJpdmF0ZS1tZXRhZGF0YS1yZXF1ZXN0OiR7bmFtZX1gLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub3RpZmljYXRpb24gPSBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbyhtZXNzYWdlLCB7XG4gICAgICBkZXRhaWw6IGVycm9yLnByaXZhdGVNZXRhZGF0YURlc2NyaXB0aW9uLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdBcmUgeW91IHdpbGxpbmcgdG8gc3VibWl0IHRoaXMgaW5mb3JtYXRpb24gdG8gYSBwcml2YXRlIHNlcnZlciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzPycsXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6ICdObycsXG4gICAgICAgICAgb25EaWRDbGljazogcmVwb3J0V2l0aG91dFByaXZhdGVNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogJ1llcywgU3VibWl0IGZvciBEZWJ1Z2dpbmcnLFxuICAgICAgICAgIG9uRGlkQ2xpY2s6IHJlcG9ydFdpdGhQcml2YXRlTWV0YWRhdGFcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuXG4gICAgZGlzbWlzc1N1YnNjcmlwdGlvbiA9IG5vdGlmaWNhdGlvbi5vbkRpZERpc21pc3MoXG4gICAgICByZXBvcnRXaXRob3V0UHJpdmF0ZU1ldGFkYXRhXG4gICAgKTtcbiAgfVxuXG4gIGFkZFBhY2thZ2VNZXRhZGF0YShlcnJvcikge1xuICAgIGxldCBhY3RpdmVQYWNrYWdlcyA9IGF0b20ucGFja2FnZXMuZ2V0QWN0aXZlUGFja2FnZXMoKTtcbiAgICBjb25zdCBhdmFpbGFibGVQYWNrYWdlUGF0aHMgPSBhdG9tLnBhY2thZ2VzLmdldFBhY2thZ2VEaXJQYXRocygpO1xuICAgIGlmIChhY3RpdmVQYWNrYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgdXNlclBhY2thZ2VzID0ge307XG4gICAgICBsZXQgYnVuZGxlZFBhY2thZ2VzID0ge307XG4gICAgICBmb3IgKGxldCBwYWNrIG9mIGF0b20ucGFja2FnZXMuZ2V0QWN0aXZlUGFja2FnZXMoKSkge1xuICAgICAgICBpZiAoYXZhaWxhYmxlUGFja2FnZVBhdGhzLmluY2x1ZGVzKHBhdGguZGlybmFtZShwYWNrLnBhdGgpKSkge1xuICAgICAgICAgIHVzZXJQYWNrYWdlc1twYWNrLm5hbWVdID0gcGFjay5tZXRhZGF0YS52ZXJzaW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1bmRsZWRQYWNrYWdlc1twYWNrLm5hbWVdID0gcGFjay5tZXRhZGF0YS52ZXJzaW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvci5tZXRhZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yLm1ldGFkYXRhID0ge307XG4gICAgICB9XG4gICAgICBlcnJvci5tZXRhZGF0YS5idW5kbGVkUGFja2FnZXMgPSBidW5kbGVkUGFja2FnZXM7XG4gICAgICBlcnJvci5tZXRhZGF0YS51c2VyUGFja2FnZXMgPSB1c2VyUGFja2FnZXM7XG4gICAgfVxuICB9XG5cbiAgYWRkUHJldmlvdXNFcnJvcnNNZXRhZGF0YShlcnJvcikge1xuICAgIGlmICghdGhpcy5yZXBvcnRQcmV2aW91c0Vycm9ycykgcmV0dXJuO1xuICAgIGlmICghZXJyb3IubWV0YWRhdGEpIGVycm9yLm1ldGFkYXRhID0ge307XG4gICAgZXJyb3IubWV0YWRhdGEucHJldmlvdXNFcnJvcnMgPSB0aGlzLnJlcG9ydGVkRXJyb3JzLm1hcChcbiAgICAgIGVycm9yID0+IGVycm9yLm1lc3NhZ2VcbiAgICApO1xuICAgIGVycm9yLm1ldGFkYXRhLnByZXZpb3VzQXNzZXJ0aW9uRmFpbHVyZXMgPSB0aGlzLnJlcG9ydGVkQXNzZXJ0aW9uRmFpbHVyZXMubWFwKFxuICAgICAgZXJyb3IgPT4gZXJyb3IubWVzc2FnZVxuICAgICk7XG4gIH1cblxuICByZXBvcnRVbmNhdWdodEV4Y2VwdGlvbihlcnJvcikge1xuICAgIGlmICghdGhpcy5zaG91bGRSZXBvcnQoZXJyb3IpKSByZXR1cm47XG5cbiAgICB0aGlzLmFkZFBhY2thZ2VNZXRhZGF0YShlcnJvcik7XG4gICAgdGhpcy5hZGRQcmV2aW91c0Vycm9yc01ldGFkYXRhKGVycm9yKTtcblxuICAgIGlmIChcbiAgICAgIGVycm9yLnByaXZhdGVNZXRhZGF0YSAhPSBudWxsICYmXG4gICAgICBlcnJvci5wcml2YXRlTWV0YWRhdGFEZXNjcmlwdGlvbiAhPSBudWxsXG4gICAgKSB7XG4gICAgICB0aGlzLnJlcXVlc3RQcml2YXRlTWV0YWRhdGFDb25zZW50KFxuICAgICAgICBlcnJvcixcbiAgICAgICAgJ1RoZSBQdWxzYXIgdGVhbSB3b3VsZCBsaWtlIHRvIGNvbGxlY3QgdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbiB0byByZXNvbHZlIHRoaXMgZXJyb3I6JyxcbiAgICAgICAgZXJyb3IgPT4gdGhpcy5yZXBvcnRVbmNhdWdodEV4Y2VwdGlvbihlcnJvcilcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuZ2V0RGVmYXVsdE5vdGlmaWNhdGlvblBhcmFtcygpO1xuICAgIHBhcmFtcy5zZXZlcml0eSA9ICdlcnJvcic7XG4gICAgdGhpcy5wZXJmb3JtUmVxdWVzdCh0aGlzLmJ1aWxkTm90aWZpY2F0aW9uSlNPTihlcnJvciwgcGFyYW1zKSk7XG4gICAgdGhpcy5yZXBvcnRlZEVycm9ycy5wdXNoKGVycm9yKTtcbiAgfVxuXG4gIHJlcG9ydEZhaWxlZEFzc2VydGlvbihlcnJvcikge1xuICAgIGlmICghdGhpcy5zaG91bGRSZXBvcnQoZXJyb3IpKSByZXR1cm47XG5cbiAgICB0aGlzLmFkZFBhY2thZ2VNZXRhZGF0YShlcnJvcik7XG4gICAgdGhpcy5hZGRQcmV2aW91c0Vycm9yc01ldGFkYXRhKGVycm9yKTtcblxuICAgIGlmIChcbiAgICAgIGVycm9yLnByaXZhdGVNZXRhZGF0YSAhPSBudWxsICYmXG4gICAgICBlcnJvci5wcml2YXRlTWV0YWRhdGFEZXNjcmlwdGlvbiAhPSBudWxsXG4gICAgKSB7XG4gICAgICB0aGlzLnJlcXVlc3RQcml2YXRlTWV0YWRhdGFDb25zZW50KFxuICAgICAgICBlcnJvcixcbiAgICAgICAgJ1RoZSBQdWxzYXIgdGVhbSB3b3VsZCBsaWtlIHRvIGNvbGxlY3Qgc29tZSBpbmZvcm1hdGlvbiB0byByZXNvbHZlIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uOicsXG4gICAgICAgIGVycm9yID0+IHRoaXMucmVwb3J0RmFpbGVkQXNzZXJ0aW9uKGVycm9yKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXREZWZhdWx0Tm90aWZpY2F0aW9uUGFyYW1zKCk7XG4gICAgcGFyYW1zLnNldmVyaXR5ID0gJ3dhcm5pbmcnO1xuICAgIHRoaXMucGVyZm9ybVJlcXVlc3QodGhpcy5idWlsZE5vdGlmaWNhdGlvbkpTT04oZXJyb3IsIHBhcmFtcykpO1xuICAgIHRoaXMucmVwb3J0ZWRBc3NlcnRpb25GYWlsdXJlcy5wdXNoKGVycm9yKTtcbiAgfVxuXG4gIC8vIFVzZWQgaW4gc3BlY3NcbiAgc2V0UmVxdWVzdEZ1bmN0aW9uKHJlcXVlc3RGdW5jdGlvbikge1xuICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RGdW5jdGlvbjtcbiAgfVxuXG4gIGlzQnVuZGxlZEZpbGUoZmlsZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVQYXRoKGZpbGVOYW1lKS5pbmRleE9mKHRoaXMucmVzb3VyY2VQYXRoKSA9PT0gMDtcbiAgfVxuXG4gIGlzVGVsZXR5cGVGaWxlKGZpbGVOYW1lKSB7XG4gICAgY29uc3QgdGVsZXR5cGVQYXRoID0gYXRvbS5wYWNrYWdlcy5yZXNvbHZlUGFja2FnZVBhdGgoJ3RlbGV0eXBlJyk7XG4gICAgcmV0dXJuIChcbiAgICAgIHRlbGV0eXBlUGF0aCAmJiB0aGlzLm5vcm1hbGl6ZVBhdGgoZmlsZU5hbWUpLmluZGV4T2YodGVsZXR5cGVQYXRoKSA9PT0gMFxuICAgICk7XG4gIH1cbn1cblxuUmVwb3J0ZXIuQVBJX0tFWSA9IEFQSV9LRVk7XG5SZXBvcnRlci5MSUJfVkVSU0lPTiA9IExJQl9WRVJTSU9OO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFBd0I7QUFKeEI7O0FBTUEsTUFBTUEsT0FBTyxHQUFHLGtDQUFrQztBQUNsRCxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUN6RCxNQUFNQyxlQUFlLEdBQUcsSUFBSUMsT0FBTyxFQUFFO0FBRXRCLE1BQU1DLFFBQVEsQ0FBQztFQUM1QkMsV0FBVyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdkIsSUFBSSxDQUFDQyxPQUFPLEdBQUdELE1BQU0sQ0FBQ0MsT0FBTyxJQUFJQyxNQUFNLENBQUNDLEtBQUs7SUFDN0MsSUFBSSxDQUFDQyxZQUFZLEdBQUdKLE1BQU0sQ0FBQ0ssY0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUNyREwsTUFBTSxDQUFDSSxZQUFZLEdBQ25CLEtBQUs7SUFDVCxJQUFJLENBQUNFLG9CQUFvQixHQUFHTixNQUFNLENBQUNLLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxHQUNyRUwsTUFBTSxDQUFDTSxvQkFBb0IsR0FDM0IsSUFBSTtJQUNSLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUNwQ1IsTUFBTSxDQUFD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