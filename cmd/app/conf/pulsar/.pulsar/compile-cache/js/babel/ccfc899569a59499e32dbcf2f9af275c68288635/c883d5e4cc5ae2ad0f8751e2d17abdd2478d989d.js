"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** @babel */

// Displays the readme for a package, if it has one
// TODO Decide to keep this or current button-to-new-tab view
class PackageReadmeView {
  constructor(readme, readmeSrc, readmeIsLocal) {
    this.element = document.createElement('section');
    this.element.classList.add('section');
    const container = document.createElement('div');
    container.classList.add('section-container');
    const heading = document.createElement('div');
    heading.classList.add('section-heading', 'icon', 'icon-book');
    heading.textContent = 'README';
    container.appendChild(heading);
    this.packageReadme = document.createElement('div');
    this.packageReadme.classList.add('package-readme', 'native-key-bindings');
    this.packageReadme.tabIndex = -1;
    container.appendChild(this.packageReadme);
    this.element.appendChild(container);
    readme || (readme = "### No README.");
    const markdownOpts = {
      breaks: false,
      taskCheckboxDisabled: true
    };
    if (readmeIsLocal) {
      markdownOpts.filePath = readmeSrc;
    } else {
      markdownOpts.rootDomain = readmeSrc;
    }
    try {
      this.packageReadme.innerHTML = atom.ui.markdown.render(readme, markdownOpts);
    } catch (err) {
      this.packageReadme.innerHTML = "<h3>Error parsing README</h3>";
    }
  }
  destroy() {
    this.element.remove();
  }
}
exports.default = PackageReadmeView;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWNrYWdlUmVhZG1lVmlldyIsImNvbnN0cnVjdG9yIiwicmVhZG1lIiwicmVhZG1lU3JjIiwicmVhZG1lSXNMb2NhbCIsImVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb250YWluZXIiLCJoZWFkaW5nIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsInBhY2thZ2VSZWFkbWUiLCJ0YWJJbmRleCIsIm1hcmtkb3duT3B0cyIsImJyZWFrcyIsInRhc2tDaGVja2JveERpc2FibGVkIiwiZmlsZVBhdGgiLCJyb290RG9tYWluIiwiaW5uZXJIVE1MIiwiYXRvbSIsInVpIiwibWFya2Rvd24iLCJyZW5kZXIiLCJlcnIiLCJkZXN0cm95IiwicmVtb3ZlIl0sInNvdXJjZXMiOlsicGFja2FnZS1yZWFkbWUtdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbi8vIERpc3BsYXlzIHRoZSByZWFkbWUgZm9yIGEgcGFja2FnZSwgaWYgaXQgaGFzIG9uZVxuLy8gVE9ETyBEZWNpZGUgdG8ga2VlcCB0aGlzIG9yIGN1cnJlbnQgYnV0dG9uLXRvLW5ldy10YWIgdmlld1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFja2FnZVJlYWRtZVZpZXcge1xuICBjb25zdHJ1Y3RvciAocmVhZG1lLCByZWFkbWVTcmMsIHJlYWRtZUlzTG9jYWwpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJylcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbicpXG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uLWNvbnRhaW5lcicpXG5cbiAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24taGVhZGluZycsICdpY29uJywgJ2ljb24tYm9vaycpXG4gICAgaGVhZGluZy50ZXh0Q29udGVudCA9ICdSRUFETUUnXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRpbmcpXG5cbiAgICB0aGlzLnBhY2thZ2VSZWFkbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMucGFja2FnZVJlYWRtZS5jbGFzc0xpc3QuYWRkKCdwYWNrYWdlLXJlYWRtZScsICduYXRpdmUta2V5LWJpbmRpbmdzJylcbiAgICB0aGlzLnBhY2thZ2VSZWFkbWUudGFiSW5kZXggPSAtMVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnBhY2thZ2VSZWFkbWUpXG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcilcblxuICAgIHJlYWRtZSB8fD0gXCIjIyMgTm8gUkVBRE1FLlwiO1xuXG4gICAgY29uc3QgbWFya2Rvd25PcHRzID0ge1xuICAgICAgYnJlYWtzOiBmYWxzZSxcbiAgICAgIHRhc2tDaGVja2JveERpc2FibGVkOiB0cnVlXG4gICAgfTtcblxuICAgIGlmIChyZWFkbWVJc0xvY2FsKSB7XG4gICAgICBtYXJrZG93bk9wdHMuZmlsZVBhdGggPSByZWFkbWVTcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmtkb3duT3B0cy5yb290RG9tYWluID0gcmVhZG1lU3JjO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLnBhY2thZ2VSZWFkbWUuaW5uZXJIVE1MID0gYXRvbS51aS5tYXJrZG93bi5yZW5kZXIocmVhZG1lLCBtYXJrZG93bk9wdHMpO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICB0aGlzLnBhY2thZ2VSZWFkbWUuaW5uZXJIVE1MID0gXCI8aDM+RXJyb3IgcGFyc2luZyBSRUFETUU8L2gzPlwiO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDZSxNQUFNQSxpQkFBaUIsQ0FBQztFQUNyQ0MsV0FBVyxDQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsYUFBYSxFQUFFO0lBQzdDLElBQUksQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDaEQsSUFBSSxDQUFDRixPQUFPLENBQUNHLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUVyQyxNQUFNQyxTQUFTLEdBQUdKLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUMvQ0csU0FBUyxDQUFDRixTQUFTLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQztJQUU1QyxNQUFNRSxPQUFPLEdBQUdMLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUM3Q0ksT0FBTyxDQUFDSCxTQUFTLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDO0lBQzdERSxPQUFPLENBQUNDLFdBQVcsR0FBRyxRQUFRO0lBQzlCRixTQUFTLENBQUNHLFdBQVcsQ0FBQ0YsT0FBTyxDQUFDO0lBRTlCLElBQUksQ0FBQ0csYUFBYSxHQUFHUixRQUFRLENBQUNDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDbEQsSUFBSSxDQUFDTyxhQUFhLENBQUNOLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLHFCQUFxQixDQUFDO0lBQ3pFLElBQUksQ0FBQ0ssYUFBYSxDQUFDQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDTCxTQUFTLENBQUNHLFdBQVcsQ0FBQyxJQUFJLENBQUNDLGFBQWEsQ0FBQztJQUN6QyxJQUFJLENBQUNULE9BQU8sQ0FBQ1EsV0FBVyxDQUFDSCxTQUFTLENBQUM7SUFFbkNSLE1BQU0sS0FBTkEsTUFBTSxHQUFLLGdCQUFnQjtJQUUzQixNQUFNYyxZQUFZLEdBQUc7TUFDbkJDLE1BQU0sRUFBRSxLQUFLO01BQ2JDLG9CQUFvQixFQUFFO0lBQ3hCLENBQUM7SUFFRCxJQUFJZCxhQUFhLEVBQUU7TUFDakJZLFlBQVksQ0FBQ0csUUFBUSxHQUFHaEIsU0FBUztJQUNuQyxDQUFDLE1BQU07TUFDTGEsWUFBWSxDQUFDSSxVQUFVLEdBQUdqQixTQUFTO0lBQ3JDO0lBRUEsSUFBSTtNQUNGLElBQUksQ0FBQ1csYUFBYSxDQUFDTyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQ3ZCLE1BQU0sRUFBRWMsWUFBWSxDQUFDO0lBQzlFLENBQUMsQ0FBQyxPQUFNVSxHQUFHLEVBQUU7TUFDWCxJQUFJLENBQUNaLGFBQWEsQ0FBQ08sU0FBUyxHQUFHLCtCQUErQjtJQUNoRTtFQUNGO0VBRUFNLE9BQU8sR0FBSTtJQUNULElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLE1BQU0sRUFBRTtFQUN2QjtBQUNGO0FBQUM7QUFBQSJ9