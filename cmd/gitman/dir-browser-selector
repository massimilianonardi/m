#!/bin/bash

cursor_addressing_mode_enter()
{
  tput sc
  tput smcup
  # printf \\33\[\?1047h
  tput clear
}

cursor_addressing_mode_exit()
{
  tput clear
  tput rmcup
  # printf \\33\[\?1047l
  tput rc
}

quit()
{
  cursor_addressing_mode_exit
  if [ -z "$1" ]
  then
    exit 0
  else
    exit "$1"
  fi
}

log()
{
  tput sc
  tput cup $(("$TERM_ROWS")) 0
  echo -n "$@" 1>&2
  tput rc
}

printline()
{
  echo "$@" 1>&2
}

dir_vars_init()
{
  FILE_ARRAY_POS="0"
  CURSOR_POS="0"
}

update_screen_vars()
{
  TERM_ROWS="$(tput lines)"
  TERM_COLS="$(tput cols)"

  ROWS="$(($TERM_ROWS - 6))"
  COLS="$(($TERM_COLS - 6))"

  if [ "${#FILES_ARRAY[@]}" -lt "$ROWS" ]
  then
    ROWS="${#FILES_ARRAY[@]}"
  fi
}

load_fav_paths()
{
  FILES_ARRAY=(".")
  for k in $(cat "$1")
  do
    FILES_ARRAY+=("$k")
  done

  dir_vars_init
}

load_dir()
{
  DIR="$(cd -L -- "$1" && pwd -L)"
  cd "$DIR"

  if [ "$DIR" = "/" ]
  then
    FILES_ARRAY=()
  else
    FILES_ARRAY=("..")
  fi

  for k in ..?* .[!.]* *
  do
    if [ -e "$k" ]
    then
      FILES_ARRAY+=("$k")
    fi
  done

  dir_vars_init
}

select_dir()
{
  SELECTED_FILE="${FILES_ARRAY[$((FILE_ARRAY_POS + CURSOR_POS))]}"
  # log "selected: $SELECTED_FILE"
  if [ -d "$SELECTED_FILE" ]
  then
    load_dir "$SELECTED_FILE"
    CURSOR_POS="0"
    FILE_ARRAY_POS="0"
    update_screen_list 0
    tput cup 0 0
  # else
  #   log "selected: $SELECTED_FILE is not a directory"
  fi
}

return_dir()
{
  SELECTED_FILE="${FILES_ARRAY[$((FILE_ARRAY_POS + CURSOR_POS))]}"
  if [ "$SELECTED_FILE" = "${SELECTED_FILE#/}" ]
  then
    SELECTED_FILE="$(pwd)/${FILES_ARRAY[$((FILE_ARRAY_POS + CURSOR_POS))]}"
  fi

  if [ -d "$SELECTED_FILE" ]
  then
    SELECTED_FILE="$(cd -L -- "$SELECTED_FILE" && pwd -L)"
    echo "$SELECTED_FILE"
    if [ -n "$OUTPUT_FILE" ]
    then
      echo "$SELECTED_FILE" > "$OUTPUT_FILE"
    fi

    quit
  else
    log "selected: $SELECTED_FILE is not a directory"
  fi
}

update_screen_list()
{
  update_screen_vars
  tput clear

  INDEX_START=$1
  INDEX_END=$((ROWS+$1))
  if [ "$INDEX_END" -gt "${#FILES_ARRAY[@]}" ]
  then
    INDEX_END="${#FILES_ARRAY[@]}"
  fi

  for (( i=INDEX_START; i<INDEX_END; i++ ))
  do
    if [ -d "${FILES_ARRAY[i]}" ]
    then
      line=" [D]"
    elif [ -f "${FILES_ARRAY[i]}" ]
    then
      line=" [F]"
    fi

    # line="----------------------------------------------------------------------------------------------------------------$line"
    line="$line ${FILES_ARRAY[i]}"
    size="${#line}"
    if [ "$size" -gt "$COLS" ]
    then
      line="${line:0:$COLS} [...]"
    fi
    printline "$line"
  done

  printline "--------------------------------------------------------------------------------"
  printline " $DIR"
  printline "--------------------------------------------------------------------------------"
  printline " number of items: ${#FILES_ARRAY[@]}"
  printline "--------------------------------------------------------------------------------"

  tput cup "$CURSOR_POS" 0
}

scroll_cursor()
{
  CURSOR_POS="$(($CURSOR_POS + $1))"

  UPDATE_SCREEN="false"

  if [ "$CURSOR_POS" -lt "0" ]
  then
    FILE_ARRAY_POS="$(($FILE_ARRAY_POS + $1))"
    CURSOR_POS="0"
    UPDATE_SCREEN="true"
  elif [ "$CURSOR_POS" -gt "$(($ROWS - 1))" ]
  then
    FILE_ARRAY_POS="$(($FILE_ARRAY_POS + $1))"
    CURSOR_POS="$(($ROWS - 1))"
    UPDATE_SCREEN="true"
  fi

  if [ "$FILE_ARRAY_POS" -lt "0" ]
  then
    FILE_ARRAY_POS=0
    # UPDATE_SCREEN=false
  elif [ "$FILE_ARRAY_POS" -gt "$((${#FILES_ARRAY[@]} - $ROWS))" ]
  then
    FILE_ARRAY_POS="$((${#FILES_ARRAY[@]} - $ROWS))"
    # UPDATE_SCREEN=false
  fi

  if [ "$UPDATE_SCREEN" = true ]
  then
    update_screen_list $((FILE_ARRAY_POS))
  fi

  tput cup $CURSOR_POS 0
}

key_loop()
{
  while true
  do
    IFS= read -rsn1 key
    if [ "$key" = $'\E' ]
    then
      IFS= read -rsn2 key
    fi

    case "$key" in
      "q") quit;;
      "[A") scroll_cursor -1;;
      "[B") scroll_cursor +1;;
      # "[C") log "RIGHT";;
      # "[D") log "LEFT";;
      "") select_dir;;
      " ") return_dir;;
  #    *) exit 1;;
    esac
  done
}

screen_init()
{
  cursor_addressing_mode_enter

  # fix fo initial wrong values of size from tput
  tput clear
  for k in {0..999}
  do
    echo -n "                                                 " 1>&2
  done
  tput clear

  # update_screen_vars
  # echo "rows: $ROWS, term rows: $TERM_ROWS, cols: $COLS, term cols: $TERM_COLS"
  # read x
}

main()
{
  # resolving symlink if any
  if [ -L "$0" ]
  then
    THIS_PATH="$(ls -ld -- "$0")"
    THIS_PATH="${THIS_PATH#*" $0 -> "}"
  else
    THIS_PATH="$0"
  fi

  # resolving this file and dir
  THIS_FILE="${THIS_PATH##*/}"
  THIS_DIR="$(cd -P -- "${THIS_PATH%/*}" && pwd -P)"

  if [ -z "$1" ]
  then
    load_dir "."
  elif [ -d "$1" ]
  then
    load_dir "$1"
  elif [ -f "$1" ]
  then
    load_fav_paths "$1"
  else
    load_dir "."
  fi

  if [ -n "$2" ]
  then
#    OUTPUT_FILE="$2"
    OUTPUT_FILE="$(cd -L -- "${2%/*}" && pwd -L)/${2##*/}"
  else
    OUTPUT_FILE="$THIS_DIR/$THIS_FILE.sel"
  fi

  screen_init
  update_screen_list 0
  key_loop
}

main "$@"
