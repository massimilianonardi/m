#!/bin/sh

#-------------------------------------------------------------------------------

array()
{
  eval "[ \"\$${1}_TYPE\" = \"array\" ]"
  if [ ! "$?" = "0" ]
  then
    if [ "$#" = "1" ]
    then
      eval "${1}_TYPE=\"array\""
      eval "${1}_SIZE=\"0\""
      return 0
    else
      echo "not an array!" 1>&2
      exit 1
    fi
  fi

  case "$2" in
    "size")
      if [ -z "$3" ]
      then
        eval "echo \"\$${1}_SIZE\""
      else
        eval "${3}=\"\$${1}_SIZE\""
      fi
    ;;
    "get")
      if [ -z "$3" ]
      then
        while eval "[ \"\$(($# - 2))\" -lt \"\$${1}_SIZE\" ]"
        do
          set -- "$@" "$(array "$1" get $(($# - 2)))"
        done
        shift 2
        echo "$@"
        return 0
      fi
      eval "[ \"${3}\" -lt \"\$${1}_SIZE\" ] || exit 1"
      if [ -z "$4" ]
      then
        eval "echo \"\$${1}_${3}\""
      else
        eval "${4}=\"\$${1}_${3}\""
      fi
    ;;
    "put")
      eval "[ \"${3}\" -lt \"\$${1}_SIZE\" ] || exit 1"
      eval "${1}_${3}=\"\${4}\""
    ;;
    "add")
      eval "set -- \"\$@\" \"\$${1}_SIZE\""
      eval "${1}_${4}=\"${3}\""
      eval "${1}_SIZE=\"\$((\$${1}_SIZE + 1))\""
    ;;
    "ins")
      eval "[ \"${3}\" -lt \"\$${1}_SIZE\" ] || exit 1"
      set -- "$@" "$1" "set"
      while [ "$(($# - 6))" -lt "$3" ]
      do
        set -- "$@" "$(array "$1" get $(($# - 6)))"
      done
      set -- "$@" "$4"
      while eval "[ \"\$(($# - 7))\" -lt \"\$${1}_SIZE\" ]"
      do
        set -- "$@" "$(array "$1" get $(($# - 7)))"
      done
      shift 4
      array "$@"
    ;;
    "rem")
      eval "[ \"${3}\" -lt \"\$${1}_SIZE\" ] || exit 1"
      set -- "$@" "$1" "set"
      while [ "$(($# - 5))" -lt "$3" ]
      do
        set -- "$@" "$(array "$1" get $(($# - 5)))"
      done
      while eval "[ \"\$(($# - 4))\" -lt \"\$${1}_SIZE\" ]"
      do
        set -- "$@" "$(array "$1" get $(($# - 4)))"
      done
      shift 3
      array "$@"
    ;;
    "set")
      array "$1" unset
      array "$1"
      set -- "$@" "${1}"
      shift 2
      while [ "$#" -gt "1" ]
      do
        eval "array \"\$$#\" add \"\$1\""
        shift
      done
    ;;
    "unset")
      eval "set -- \"\$1\" \"\$${1}_SIZE\""
      while [ "$2" -gt "0" ]
      do
        eval "${1}_SIZE=\"\$((\$${1}_SIZE - 1))\""
        eval "set -- \"\$1\" \"\$${1}_SIZE\""
        eval "unset ${1}_${2}"
      done
      eval "unset ${1}_SIZE"
      eval "unset ${1}_TYPE"
    ;;
    *) exit 1;;
  esac
}

readc()
{
  stty -echo -icanon min 1 time 0

  read -r key << EOF
$(dd bs=1 count=1 2>/dev/null | od -A n -t a)
EOF

  if [ "$key" = "esc" ]
  then
    stty -echo -icanon min 0 time 0
    read -r key1 << EOF
$(dd bs=1 count=1 2>/dev/null | od -A n -t a)
EOF
    read -r key2 << EOF
$(dd bs=1 count=1 2>/dev/null | od -A n -t a)
EOF
    read -r key3 << EOF
$(dd bs=1 count=1 2>/dev/null | od -A n -t a)
EOF
    read -r key4 << EOF
$(dd bs=1 count=1 2>/dev/null | od -A n -t a)
EOF
    key="$key1$key2$key3$key4"
    case "$key" in
      "[A") key="up";;
      "[B") key="down";;
      "[C") key="right";;
      "[D") key="left";;
      "[F") key="end";;
      "[H") key="home";;
      "[1~") key="home";;
      "[4~") key="end";;
      "[5~") key="pageup";;
      "[6~") key="pagedown";;
      *) key="esc$key";;
    esac
  elif [ "$key" = "sp" ]
  then
    key="space"
  elif [ "$key" = "ht" ]
  then
    key="tab"
  elif [ "$key" = "lf" ]
  then
    key="enter"
  elif [ "$key" = "nl" ]
  then
    key="enter"
  fi

  eval "$1='$key'"
}

#-------------------------------------------------------------------------------

screen_init()
{
  saved_tty_settings=$(stty -g)
  tput sc
  tput smcup
  tput clear

  screen_vars_update
}

screen_reset()
{
  tput clear
  tput rmcup
  tput rc
  stty "$saved_tty_settings"
}

screen_vars_update()
{
  # fix fo initial wrong values of size from tput
  tput clear
  i=0
  while [ "$i" -lt "999" ]
  do
    printf "                                                 "
    i="$(($i + 1))"
  done
  tput clear

  TERM_ROWS="$(tput lines)"
  TERM_COLS="$(tput cols)"
}

#-------------------------------------------------------------------------------

quit()
{
  screen_reset

  if [ -z "$1" ]
  then
    exit 1
  else
    exit "$1"
  fi
}

return_selection()
{
  screen_reset

  if [ "$ARRAY_SIZE" -lt "$TERM_ROWS" ]
  then
    SELECTED_POS="$CURSOR_POS"
  else
    SELECTED_POS="$ARRAY_POS"
  fi
  (array MENU_IDS get "$SELECTED_POS") 1>&2

  exit 0
}

load_menu()
{
  array MENU_IDS
  array MENU_TEXTS

  for k in "$@"
  do
    ID="${k%%=*}"
    TEXT="${k#*=}"
    array MENU_IDS add "$ID"
    array MENU_TEXTS add "$TEXT"
  done

  ARRAY_SIZE="$(array MENU_IDS size)"
  ARRAY_POS="0"
  CURSOR_POS="0"

  if [ "$ARRAY_SIZE" -lt "$TERM_ROWS" ]
  then
    ROWS="$ARRAY_SIZE"
  else
    ROWS="$TERM_ROWS"
  fi
  COLS="$TERM_COLS"
}

print_menu_entry()
{
  line="$(array MENU_TEXTS get "$1")"
  # size="${#line}"
  # if [ "$size" -gt "$COLS" ]
  # then
  #   line="${line:0:$COLS} [...]"
  # fi
  # printf "$1" "$line" "$@"
  printf "$1 $line"
  if [ "$2" = "true" ]
  then
    echo ""
  else
    # put cursor at beginning of the printed line
    true
  fi
}

update_screen_list()
{
  tput clear

  INDEX_START=$1
  INDEX_END=$((ROWS + $1 - 1))

  i="$INDEX_START"
  while [ "$i" -lt "$INDEX_END" ]
  do
    print_menu_entry "$i" true
    i="$(($i + 1))"
  done
  print_menu_entry "$i"

  tput cup "$CURSOR_POS" 0
}

scroll_cursor()
{
  UPDATE_SCREEN="false"

  CURSOR_POS="$(($CURSOR_POS + $1))"
  ARRAY_POS="$(($ARRAY_POS + $1))"

  if [ "$CURSOR_POS" -lt "0" ]
  then
    CURSOR_POS="0"
    UPDATE_SCREEN="true"
  elif [ "$CURSOR_POS" -gt "$(($ROWS - 1))" ]
  then
    CURSOR_POS="$(($ROWS - 1))"
    UPDATE_SCREEN="true"
  fi

  if [ "$ARRAY_POS" -lt "0" ]
  then
    ARRAY_POS=0
  elif [ "$ARRAY_POS" -gt "$(($ARRAY_SIZE - 1))" ]
  then
    ARRAY_POS="$(($ARRAY_SIZE - 1))"
  fi

  if [ "$UPDATE_SCREEN" = true ]
  then
    update_screen_list "$((ARRAY_POS - $CURSOR_POS))"
  fi

  tput cup $CURSOR_POS 0
}

scroll_page()
{
  scroll_cursor $(($1 * ($ROWS - 1)))
}

move_cursor_to()
{
  ARRAY_POS="0"
  CURSOR_POS="0"
  scroll_cursor "$1"
  update_screen_list "$((ARRAY_POS - $CURSOR_POS))"

  tput cup $CURSOR_POS 0
}

key_loop()
{
  while true
  do
    readc key

    case "$key" in
      "q") quit;;
      "up") scroll_cursor "-1";;
      "down") scroll_cursor "+1";;
      "pageup") scroll_page "-1";;
      "pagedown") scroll_page "+1";;
      "home") move_cursor_to "0";;
      "end") move_cursor_to "$(($ARRAY_SIZE - 1))";;
      "enter") return_selection;;
      # *) exit 1;;
    esac
  done
}

main()
{
  if [ ! -t 0 ]
  then
    # echo "no tty" 1>&2
    echo "no tty"
    exit 1
  fi

  if [ -z "$*" ]
  then
    # echo "no args" 1>&2
    echo "no args"
    exit 1
  fi

  trap "screen_reset; exit 2" INT QUIT TERM HUP PIPE ABRT TSTP
  screen_init

  load_menu "$@"
  update_screen_list 0

  key_loop
}

main "$@" 3>&2 2>&1 1>&3
