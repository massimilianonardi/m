#!/bin/sh

TYPE="github"
GITHUB_REPO="oauth2-proxy/oauth2-proxy"
GITHUB_ASSET_NAME_PATTERN="oauth2-proxy-.*.linux-amd64.tar.gz"

FILE_TYPE="tar.gz"
SYMLINKS="oauth2-proxy=oauth2-proxy  oauth2-proxy-start=oauth2-proxy-start oauth2-proxy-stop=oauth2-proxy-stop oauth2-proxy-status=oauth2-proxy-status oauth2-proxy-install=oauth2-proxy-install oauth2-proxy-uninstall=oauth2-proxy-uninstall"

postinstall()
{
  #-----------------------------------------------------------------------------
  # HOME DETECTION
  #-----------------------------------------------------------------------------
  cat << 'EOF' | tee "./oauth2-proxy-install" > "./oauth2-proxy-uninstall"
#!/bin/sh

if [ -L "$0" ]
then
  THIS_PATH="$(ls -ld -- "$0")"
  THIS_PATH="${THIS_PATH#*" $0 -> "}"
else
  THIS_PATH="$0"
fi

OA2P_HOME="$(cd -P -- "${THIS_PATH%/*}" && pwd -P)"

EOF



  #-----------------------------------------------------------------------------
  # INSTALL
  #-----------------------------------------------------------------------------
  cat << 'EOF' >> "./oauth2-proxy-install"
sudo -s << SUDO

groupadd oauth2-proxy
useradd -r -g oauth2-proxy -d "$OA2P_HOME" -s /sbin/nologin oauth2-proxy
chown -R oauth2-proxy:oauth2-proxy "$OA2P_HOME"



cat > "/etc/systemd/system/oauth2-proxy.service" << SERVICE
[Unit]
Description=oauth2-proxy daemon service
After=network.target network-online.target nss-lookup.target basic.target
Wants=network-online.target nss-lookup.target
StartLimitIntervalSec=30
StartLimitBurst=3

[Service]
User=oauth2-proxy
Group=oauth2-proxy
Restart=on-failure
RestartSec=30
# WorkingDirectory=/etc/oauth2-proxy
# ExecStart=/usr/bin/oauth2-proxy --config=/etc/oauth2-proxy/oauth2-proxy.conf
WorkingDirectory=$OA2P_HOME
ExecStart=$OA2P_HOME/oauth2-proxy --config=$OA2P_HOME/conf/oauth2-proxy.conf
ExecReload=/bin/kill -HUP $MAINPID
LimitNOFILE=65535
NoNewPrivileges=true
ProtectHome=true
ProtectSystem=full
ProtectHostname=true
ProtectControlGroups=true
ProtectKernelModules=true
ProtectKernelTunables=true
LockPersonality=true
RestrictRealtime=yes
RestrictNamespaces=yes
MemoryDenyWriteExecute=yes
PrivateDevices=yes
PrivateTmp=true
CapabilityBoundingSet=

[Install]
WantedBy=multi-user.target

SERVICE



chown root:root "/etc/systemd/system/oauth2-proxy.service"
chmod 644 "/etc/systemd/system/oauth2-proxy.service"
systemctl daemon-reload
systemctl enable oauth2-proxy

SUDO
EOF


  #-----------------------------------------------------------------------------
  # UNINSTALL
  #-----------------------------------------------------------------------------
  cat << 'EOF' >> "./oauth2-proxy-uninstall"
sudo -s << SUDO

systemctl stop oauth2-proxy
systemctl disable oauth2-proxy
rm -f "/etc/systemd/system/oauth2-proxy.service"
systemctl daemon-reload
systemctl reset-failed

GROUP="$(groups)"
GROUP="${GROUP%% *}"
chown -R "$USER:$GROUP" "$OA2P_HOME"
userdel -r oauth2-proxy
groupdel oauth2-proxy

SUDO
EOF



  #-----------------------------------------------------------------------------
  # START
  #-----------------------------------------------------------------------------
  cat << 'EOF' > "./oauth2-proxy-start"
#!/bin/sh

sudo systemctl start oauth2-proxy

EOF



  #-----------------------------------------------------------------------------
  # STOP
  #-----------------------------------------------------------------------------
  cat << 'EOF' > "./oauth2-proxy-stop"
#!/bin/sh

sudo systemctl stop oauth2-proxy

EOF



  #-----------------------------------------------------------------------------
  # STATUS
  #-----------------------------------------------------------------------------
  cat << 'EOF' > "./oauth2-proxy-status"
#!/bin/sh

sudo systemctl status oauth2-proxy

EOF



  chmod +x "./oauth2-proxy-install"
  chmod +x "./oauth2-proxy-uninstall"
  chmod +x "./oauth2-proxy-start"
  chmod +x "./oauth2-proxy-stop"
  chmod +x "./oauth2-proxy-status"



  #-----------------------------------------------------------------------------
  # CONF
  #-----------------------------------------------------------------------------
  mkdir -p ./conf
  CLIENT_SECRET="$(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_' ; echo)"
  COOKIE_SECRET="$(openssl rand -base64 32 | tr -- '+/' '-_')"
  cat << 'EOF' > "./conf/oauth2-proxy.conf"

## OAuth2 Proxy Config File
## https://github.com/oauth2-proxy/oauth2-proxy

## <addr>:<port> to listen on for HTTP/HTTPS clients
# http_address = "127.0.0.1:4180"
# https_address = ":443"

## Are we running behind a reverse proxy? Will not accept headers like X-Real-Ip unless this is set.
# reverse_proxy = true

## TLS Settings
# tls_cert_file = "/etc/ssl/certs/localhost.crt"
# tls_key_file = "/etc/ssl/certs/localhost.pem"

## the OAuth Redirect URL.
# defaults to the "https://" + requested host header + "/oauth2/callback"
# redirect_url = "https://internalapp.yourcompany.com/oauth2/callback"

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
# upstreams = [
#     "http://127.0.0.1:8080/"
# ]

## Logging configuration
#logging_filename = ""
#logging_max_size = 100
#logging_max_age = 7
#logging_local_time = true
#logging_compress = false
#standard_logging = true
#standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
#request_logging = true
#request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
#auth_logging = true
#auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
# pass_basic_auth = true
# pass_user_headers = true
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header
# pass_host_header = true

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
email_domains = "*"
# email_domains = [
#     "yourcompany.com"
# ]

## The OAuth Client ID, Secret
client_id = "oauth2-proxy-client"
EOF
  cat << EOF >> "./conf/oauth2-proxy.conf"
client_secret = "$CLIENT_SECRET"
EOF
  cat << 'EOF' >> "./conf/oauth2-proxy.conf"

## Scopes Added to the request
## It has the same behavior as the --scope flag
# scope = "openid email profile"

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
# pass_access_token = false

## Authenticated Email Addresses File (one email per line)
# authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -B" for bcrypt encryption
## enabling exposes a username/login signin form
# htpasswd_file = ""

## bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods
# skip_auth_routes = [
#   "GET=^/probe",
#   "^/metrics"
# ]

## mark paths as API routes to get HTTP Status code 401 instead of redirect to login page
# api_routes = [
#   "^/api"
# ]

## Templates
## optional directory with custom sign_in.html and error.html
# custom_templates_dir = ""

## skip SSL checking for HTTPS requests
# ssl_insecure_skip_verify = false


## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
# cookie_name = "_oauth2_proxy"
EOF
  cat << EOF >> "./conf/oauth2-proxy.conf"
cookie_secret = "$COOKIE_SECRET"
EOF
  cat << 'EOF' >> "./conf/oauth2-proxy.conf"
# cookie_domains = ""
# cookie_expire = "168h"
# cookie_refresh = ""
# cookie_secure = true
# cookie_httponly = true

EOF

}
