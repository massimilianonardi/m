#!/bin/sh

# MENU_ID="false" # disables id detection from menu entries "menu_entry_id=menu_entry_text"
# MENU_MULTISELECTION="true" # enables multi selection
# ROW_0 # row coordinate to start render
# COL_0 # col coordinate to start render
# ROWS # max rows to render
# COLS # max cols to render
# MENU_CUSTOM_KEYS="key1:key2:key3" # returns selection also with these keys in the form "key:selection"
# MENU_HEADER # text above menu
# MENU_FOOTER # text below menu

#-------------------------------------------------------------------------------

. array.lib.sh

#-------------------------------------------------------------------------------

string_count_lines()
{
  if [ -z "$1" ]
  then
    return 1
  fi

  eval echo "\$(($(printf "${1}" | wc -l) + 1))"
}

#-------------------------------------------------------------------------------

screen_init()
{
  saved_tty_settings=$(stty -g)
  stty -echo

  tput sc
  tput smcup
  tput clear

  screen_vars_update
  screen_background_render
}

screen_reset()
{
  tput clear
  tput rmcup
  tput rc

  stty "$saved_tty_settings"
}

screen_vars_update()
{
  # fix fo initial wrong values of size from tput
  tput clear
  i=0
  while [ "$i" -lt "999" ]
  do
    printf "                                                 "
    i="$(($i + 1))"
  done
  tput clear

  # get terminal size
  TERM_ROWS="$(tput lines)"
  TERM_COLS="$(tput cols)"

  # init render region
  if [ -z "$ROW_0" ]
  then
    ROW_0="0"
  fi

  if [ -z "$COL_0" ]
  then
    COL_0="0"
  fi

  if [ -z "$ROWS" ]
  then
    ROWS="$TERM_ROWS"
  fi

  if [ -z "$COLS" ]
  then
    COLS="$TERM_COLS"
  fi

  # init header/footer
  if [ -n "$MENU_HEADER" ]
  then
    MENU_HEADER_ROW_0="$ROW_0"
    MENU_HEADER_COL_0="$COL_0"
    MENU_HEADER_SIZE_ROW="$(string_count_lines "$MENU_HEADER")"
    ROW_0="$(($ROW_0 + $MENU_HEADER_SIZE_ROW))"
  fi

  if [ -n "$MENU_FOOTER" ]
  then
    MENU_FOOTER_SIZE_ROW="$(string_count_lines "$MENU_FOOTER")"
    ROWS="$(($ROWS - $MENU_FOOTER_SIZE_ROW))"
    MENU_FOOTER_ROW_0="$(($ROW_0 + $ROWS))"
    MENU_FOOTER_COL_0="$COL_0"
  fi

  # init limits
  if [ -z "$ROWS_MIN" ]
  then
    ROWS_MIN="2"
  fi

  if [ -z "$MENU_ENTRY_SIZE_MIN" ]
  then
    MENU_ENTRY_SIZE_MIN="3"
  fi

  if [ "$ROW_0" -gt "$(($TERM_ROWS - 1 - $ROWS_MIN))" ]
  then
    ROW_0="$(($TERM_ROWS - 1 - $ROWS_MIN))"
  fi

  if [ "$COL_0" -gt "$(($TERM_COLS - 1 - $MENU_ENTRY_SIZE_MIN))" ]
  then
    COL_0="$(($TERM_COLS - 1 - $MENU_ENTRY_SIZE_MIN))"
  fi

  if [ "$(($ROW_0 + $ROWS))" -gt "$TERM_ROWS" ]
  then
    ROWS="$(($TERM_ROWS - $ROW_0))"
  fi

  if [ "$(($COL_0 + $COLS))" -gt "$TERM_COLS" ]
  then
    COLS="$(($TERM_COLS - $COL_0))"
  fi

  # init menu id detection
  if [ -z "$MENU_ID" ]
  then
    MENU_ID="true"
  fi

  # init multi selection
  if [ -z "$MENU_MULTISELECTION" ]
  then
    MENU_MULTISELECTION="false"
  fi

  if [ -z "$SEL_ITEM_TRUE_STRING" ]
  then
    SEL_ITEM_TRUE_STRING="+"
  fi

  if [ -z "$SEL_ITEM_FALSE_STRING" ]
  then
    SEL_ITEM_FALSE_STRING="-"
  fi

  # return key pressed
  if [ -z "$MENU_KEY_SEPARATOR" ]
  then
    MENU_KEY_SEPARATOR=":"
  fi
}

screen_render_text_at()
{
(
  # IFS=$(printf '\n+'); IFS=${IFS%?}
  IFS='
'
  i="0"
  for line in $1
  do
    tput cup "$(($2 + $i))" "$3"
    printf "%s" "$line"
    i="$(($i + 1))"
  done
)
}

screen_background_render()
{
  if [ -n "$MENU_HEADER" ]
  then
    screen_render_text_at "$MENU_HEADER" "$MENU_HEADER_ROW_0" "$MENU_HEADER_COL_0"
  fi

  if [ -n "$MENU_FOOTER" ]
  then
    screen_render_text_at "$MENU_FOOTER" "$MENU_FOOTER_ROW_0" "$MENU_FOOTER_COL_0"
  fi
}

#-------------------------------------------------------------------------------

quit()
{
  screen_reset

  if [ -z "$1" ]
  then
    exit 1
  else
    exit "$1"
  fi
}

return_selection()
{
  screen_reset

  if [ -n "$MENU_CUSTOM_KEYS" ]
  then
    quote "${key}" 1>&2
    printf " " 1>&2
    quote "$(array MENU_IDS get "$ARRAY_POS")" 1>&2
    printf " " 1>&2
  fi

  if [ ! "$MENU_MULTISELECTION" = "true" ]
  then
    (array MENU_IDS get "$ARRAY_POS") 1>&2
  else
    array MENU_SELECTED_ITEMS
    i="0"
    n="$(array MENU_SEL size)"
    while [ "$i" -lt "$n" ]
    do
      if [ "$(array MENU_SEL get "$i")" = "$SEL_ITEM_TRUE_STRING" ]
      then
        array MENU_SELECTED_ITEMS add "$(array MENU_IDS get "$i")"
      fi
      i="$(($i + 1))"
    done
    (array MENU_SELECTED_ITEMS get) 1>&2
  fi

  exit 0
}

check_key()
{
  if [ -z "$1" ]
  then
    return 0
  fi

  if [ -z "$MENU_CUSTOM_KEYS" ]
  then
    return 0
  fi

  if [ "${MENU_CUSTOM_KEYS#*${1}*}" = "$MENU_CUSTOM_KEYS" ]
  then
    return 0
  fi

  return_selection
}

select_item_toggle()
{
  if [ ! "$MENU_MULTISELECTION" = "true" ]
  then
    return 0
  fi

  SELECTED_POS="$ARRAY_POS"
  SEL_ITEM_CURR_STRING="$(array MENU_SEL get "$ARRAY_POS")"
  if [ "$SEL_ITEM_CURR_STRING" = "$SEL_ITEM_TRUE_STRING" ]
  then
    array MENU_SEL put "$ARRAY_POS" "$SEL_ITEM_FALSE_STRING"
  elif [ "$SEL_ITEM_CURR_STRING" = "$SEL_ITEM_FALSE_STRING" ]
  then
    array MENU_SEL put "$ARRAY_POS" "$SEL_ITEM_TRUE_STRING"
  else
    # quit
    false
    # array MENU_SEL set "$ARRAY_POS" "$SEL_ITEM_TRUE_STRING"
  fi

  print_menu_entry "$ARRAY_POS" "$CURSOR_POS"
}

menu_init()
{
  array MENU_IDS
  array MENU_TEXTS
  array MENU_SEL

  for k in "$@"
  do
    if [ ! "$MENU_ID" = "false" ]
    then
      ID="${k%%=*}"
      TEXT="${k#*=}"
    else
      ID="$k"
      TEXT="$k"
    fi

    array MENU_IDS add "$ID"
    array MENU_TEXTS add "$TEXT"
    array MENU_SEL add "$SEL_ITEM_FALSE_STRING"
  done

  ARRAY_SIZE="$(array MENU_IDS size)"
  ARRAY_POS="0"
  CURSOR_POS="0"

  if [ "$ARRAY_SIZE" -lt "$ROWS" ]
  then
    ROWS="$ARRAY_SIZE"
  fi
}

print_menu_entry()
{
  MENU_ENTRY_INDEX="$1"
  MENU_ENTRY_ROW="$2"

  # clear whole line
  tput cup "$(($ROW_0 + $MENU_ENTRY_ROW))" "$COL_0"
  printf "%${COLS}s"
  tput cup "$(($ROW_0 + $MENU_ENTRY_ROW))" "$COL_0"

  # limit too long lines (use line without ascii control codes)
  if [ ! "$MENU_MULTISELECTION" = "true" ]
  then
    line="$MENU_ENTRY_INDEX $(array MENU_TEXTS get "$MENU_ENTRY_INDEX")"
  else
    line="$MENU_ENTRY_INDEX [$(array MENU_SEL get "$MENU_ENTRY_INDEX")] $(array MENU_TEXTS get "$MENU_ENTRY_INDEX")"
  fi
  size="$(printf "$line" | wc -m)"
  line="$(array MENU_TEXTS get "$MENU_ENTRY_INDEX")"
  if [ "$size" -gt "$COLS" ]
  then
    sizeexceed="$(($size - $COLS))"
    size="$(printf "$line" | wc -m)"
    line="$(printf "$line" | cut -c "1-$(($size - $sizeexceed - 6))")$(tput setaf 1) [...]$(tput sgr0)"
  fi

  # print line
  if [ ! "$MENU_MULTISELECTION" = "true" ]
  then
    line="$(tput setaf 2)$MENU_ENTRY_INDEX$(tput sgr0) $line"
  else
    line="$(tput setaf 2)$MENU_ENTRY_INDEX$(tput sgr0) $(tput setaf 3)[$(array MENU_SEL get "$MENU_ENTRY_INDEX")]$(tput sgr0) $line"
  fi
  printf "$line"

  tput cup "$(($ROW_0 + $MENU_ENTRY_ROW))" "$COL_0"
}

screen_render()
{
  ARRAY_POS_START="$1"

  i="0"
  n="$ROWS"
  while [ "$i" -lt "$n" ]
  do
    print_menu_entry "$(($ARRAY_POS_START + $i))" "$i"
    i="$(($i + 1))"
  done
}

menu_entry_highlight()
{
  tput cup "$(($ROW_0 + $1))" "$COL_0"
}

scroll_cursor()
{
  UPDATE_SCREEN="false"

  CURSOR_POS="$(($CURSOR_POS + $1))"
  ARRAY_POS="$(($ARRAY_POS + $1))"

  if [ "$CURSOR_POS" -lt "0" ]
  then
    ARRAY_POS_START="$(($ARRAY_POS_START + $1))"
    CURSOR_POS="0"
    UPDATE_SCREEN="true"
  elif [ "$CURSOR_POS" -gt "$(($ROWS - 1))" ]
  then
    ARRAY_POS_START="$(($ARRAY_POS_START + $1))"
    CURSOR_POS="$(($ROWS - 1))"
    UPDATE_SCREEN="true"
  fi

  if [ "$ARRAY_POS" -lt "0" ]
  then
    ARRAY_POS=0
  elif [ "$ARRAY_POS" -gt "$(($ARRAY_SIZE - 1))" ]
  then
    ARRAY_POS="$(($ARRAY_SIZE - 1))"
  fi

  if [ "$ARRAY_POS_START" -lt "0" ]
  then
    ARRAY_POS_START=0
  elif [ "$ARRAY_POS_START" -gt "$(($ARRAY_SIZE - $ROWS))" ]
  then
    ARRAY_POS_START="$(($ARRAY_SIZE - $ROWS))"
  fi

  if [ "$UPDATE_SCREEN" = true ]
  then
    screen_render "$ARRAY_POS_START"
  fi

  menu_entry_highlight "$CURSOR_POS"
}

scroll_page()
{
  scroll_cursor $(($1 * ($ROWS - 1)))
  # scroll_cursor "$(($1 * $ROWS - 1))"
}

move_cursor_to()
{
  ARRAY_POS="0"
  CURSOR_POS="0"
  scroll_cursor "$1"
  screen_render "$((ARRAY_POS - $CURSOR_POS))"

  # tput cup $CURSOR_POS 0
  tput cup "$(($ROW_0 + $CURSOR_POS))" "$COL_0"
}

key_loop()
{
  while true
  do
    key="$(readc)"

    case "$key" in
      "q") quit;;
      "esc") quit;;
      "up") scroll_cursor "-1";;
      "down") scroll_cursor "+1";;
      "pageup") scroll_page "-1";;
      "pagedown") scroll_page "+1";;
      "home") move_cursor_to "0";;
      "end") move_cursor_to "$(($ARRAY_SIZE - 1))";;
      "space") select_item_toggle;;
      "enter") return_selection;;
      *) check_key "$key";;
      # *) exit 1;;
    esac
  done
}

main()
{
  if [ ! -t 0 ]
  then
    # echo "no tty" 1>&2
    echo "no tty"
    exit 1
  fi

  if [ -z "$*" ]
  then
    # echo "no args" 1>&2
    echo "no args"
    exit 1
  fi

  trap "screen_reset; exit 2" INT QUIT TERM HUP PIPE ABRT TSTP
  screen_init

  menu_init "$@"
  screen_render 0
  menu_entry_highlight 0

  key_loop
}

main "$@" 3>&2 2>&1 1>&3
