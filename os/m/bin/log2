#!/bin/sh

#-------------------------------------------------------------------------------

main()
{
  export LOG_LEVEL
  export LOG_SUBPROCESS_LEVEL_STEP
  export LOG_SUBPROCESS_LEVEL
  export LOG_SUBPROCESS_LEVEL_MAX
  export TRACE_LEVEL
  export TRACE_LEVEL_MAX
  
  LOG_PREFIX=""
  LOG_STDOUT=""
  LOG_EXTENDED=""
  
  if [ "$#" = "0" ]
  then
    fatal "no arguments"
  else
    while [ "$1" != "--" ] && [ "$#" -gt "0" ]
    do
      [ -z "$1" ] && shift && continue
      
      case "$1" in
        --level) shift; LOG_LEVEL="$1"; log_level_parse;;
        --step) shift; LOG_SUBPROCESS_LEVEL_STEP="$1";;
        --subprocess-level) shift; LOG_SUBPROCESS_LEVEL="$1";;
        --subprocess-level-max) shift; LOG_SUBPROCESS_LEVEL_MAX="$1";;
        --trace-level) shift; TRACE_LEVEL="$1";;
        --trace-level-max) shift; TRACE_LEVEL_MAX="$1";;
        --file) shift; LOG_FILE="$1";;
        --name) shift; LOG_FILENAME="$1";;
        --dir) shift; LOG_CUSTOM_DIR="$1";;
        --user) LOG_CUSTOM_DIR="$USER_LOG_DIR";;
        --work) LOG_CUSTOM_DIR="$LOG_DIR";;
        --stdout) LOG_STDOUT="true";;
        --extended) LOG_EXTENDED="true";;
        *) fatal "bad arguments";;
      esac
      
      shift
    done
    shift
    
    if [ "$#" -gt "0" ]
    then
#      trace exec exit log_exec "$@"
      log_exec "$@"
    else
# export new envs standard to system wide conf file that will be loaded by loglib for any application using it
#      trace exec exit log_export
      log_debug "entering log subshell - sh"
      log_info "*** LOG SHELL (sh) *************************************************************"
      log_exec sh -i
      log_info "*** LOG SHELL (sh) - exit ******************************************************"
#      sh
#      exit 0
    fi
  fi
}

#-------------------------------------------------------------------------------

log_exec()
{
  log_debug "LOG_LEVEL: $LOG_LEVEL"
  log_trace "LOG_SUBPROCESS_LEVEL: $LOG_SUBPROCESS_LEVEL - LOG_SUBPROCESS_LEVEL_STEP: $LOG_SUBPROCESS_LEVEL_STEP - LOG_SUBPROCESS_LEVEL_MAX: $LOG_SUBPROCESS_LEVEL_MAX"
  log_trace "TRACE_LEVEL: $TRACE_LEVEL - TRACE_LEVEL_MAX: $TRACE_LEVEL_MAX"
  
  if [ -n "$LOG_FILE" ]
  then
    LOG_PREFIX="$LOG_FILE"
  elif [ -z "$LOG_FILE" ] && [ -z "$LOG_CUSTOM_DIR" ] && [ -z "$LOG_FILENAME" ]
  then
    LOG_STDOUT="true"
  elif [ -z "$LOG_FILE" ] && [ -z "$LOG_CUSTOM_DIR" ] && [ -n "$LOG_FILENAME" ]
  then
    LOG_PREFIX="$USER_LOG_DIR/$LOG_FILENAME"
  elif [ -z "$LOG_FILE" ] && [ -n "$LOG_CUSTOM_DIR" ] && [ -z "$LOG_FILENAME" ]
  then
    LOG_PREFIX="$LOG_CUSTOM_DIR/log"
  elif [ -z "$LOG_FILE" ] && [ -n "$LOG_CUSTOM_DIR" ] && [ -n "$LOG_FILENAME" ]
  then
    LOG_PREFIX="$LOG_CUSTOM_DIR/$LOG_FILENAME"
  else
    log_fatal "bad arguments"
    exit 1
  fi
  
  log_debug "LOG_PREFIX: $LOG_PREFIX"
  
  if [ -z "$LOG_PREFIX" ]
  then
    "$@" 2>&1 || exit "$?"
  else
    mkdir -p "$(dirname "$LOG_PREFIX")"
    
    LOG_PREFIX="$LOG_PREFIX""_$(date +%Y-%m-%d_%H-%M-%S_%N)_$RANDOM"
    
    if [ "$LOG_EXTENDED" != "true" ]
    then
      LOG_STDALL_FILE="$LOG_PREFIX.log"
      
      if [ "$LOG_STDOUT" != "true" ]
      then
        log_info "file: $LOG_STDALL_FILE"
        "$@" 1>"$LOG_STDALL_FILE" 2>&1 || exit "$?"
      else
        log_info "stdout + file: $LOG_STDALL_FILE"
        "$@" 2>&1 | tee -ai "$LOG_STDALL_FILE" || exit "$?"
      fi
    else
      LOG_STDOUT_FILE="$LOG_PREFIX""_stdout.log"
      LOG_STDERR_FILE="$LOG_PREFIX""_stderr.log"
      LOG_STDALL_FILE="$LOG_PREFIX""_stdall.log"
      
      PIPE_STDOUT="$LOG_STDOUT_FILE"".pipe"
      PIPE_STDERR="$LOG_STDERR_FILE"".pipe"
      
      rm -f "$LOG_STDOUT_FILE" "$LOG_STDERR_FILE" "$LOG_STDALL_FILE"
      rm -f "$PIPE_STDOUT" "$PIPE_STDERR"
      
      trap "log_cleanup" INT QUIT TERM HUP PIPE ABRT CHLD TSTP EXIT
      
      mkfifo "$PIPE_STDOUT" "$PIPE_STDERR"
      
      if [ "$LOG_STDOUT" != "true" ]
      then
        log_info "multiple files: $LOG_STDALL_FILE, $LOG_STDOUT_FILE, $LOG_STDERR_FILE"
        
        <"$PIPE_STDOUT" tee -ai "$LOG_STDOUT_FILE" "$LOG_STDALL_FILE" > /dev/null &
        PID_LOG_STDOUT="$!"
        <"$PIPE_STDERR" tee -ai "$LOG_STDERR_FILE" "$LOG_STDALL_FILE" > /dev/null &
        PID_LOG_STDERR="$!"
        
        "$@" 1>"$PIPE_STDOUT" 2>"$PIPE_STDERR" || exit "$?"
      else
        log_info "stdout + multiple files: $LOG_STDALL_FILE, $LOG_STDOUT_FILE, $LOG_STDERR_FILE"
        
        <"$PIPE_STDOUT" tee -ai "$LOG_STDOUT_FILE" "$LOG_STDALL_FILE" &
        PID_LOG_STDOUT="$!"
        <"$PIPE_STDERR" tee -ai "$LOG_STDERR_FILE" "$LOG_STDALL_FILE" &
        PID_LOG_STDERR="$!"
        
        "$@" 1>"$PIPE_STDOUT" 2>"$PIPE_STDERR" || exit "$?"
      fi
    fi
  fi
}

#-------------------------------------------------------------------------------

log_cleanup()
{
  EXIT_CODE="$?"
  
  log_warn "log_cleanup - EXIT_CODE: $EXIT_CODE"
  
  kill "$PID_LOG_STDOUT" 1>/dev/null 2>/dev/null
  kill "$PID_LOG_STDERR" 1>/dev/null 2>/dev/null
  
  rm -f "$PIPE_STDOUT" "$PIPE_STDERR"
  
  exit $EXIT_CODE
}

#-------------------------------------------------------------------------------

[ -z "$LOG_LEVEL" ] && LOG_LEVEL="max"

#export PATH="$(cd -P -- "${0%/*}"; pwd):$PATH"

. m.lib.sh

m_script "$@"

#-------------------------------------------------------------------------------
