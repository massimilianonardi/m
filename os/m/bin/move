#!/bin/sh

#-------------------------------------------------------------------------------

switch_error()
{
#  MV_OPT="$MV_OPT$1"
#  return 0
  
  log_fatal "unsupported switch $@"
  exit 1
}

#-------------------------------------------------------------------------------

dest_overwrite_check()
{
  if [ -e "$DEST" ] && [ ! -"$1" "$DEST" ]
  then
    log_error "destination exist and of the wrong type (required $1)"
    exit 1
  fi
  
  if [ -e "$DEST" ] && [ -z "$SWITCH_f" ]
  then
    log_error "destination exist and -f was not specified"
    exit 1
  fi
  
  if [ -d "$DEST" ] && [ -n "$SWITCH_f" ] && [ -n "$SWITCH_s" ]
  then
    log_warn "destination exist and -fs was specified: deleting old directory tree and recreating destination"
    rm -rf "$DEST"
    mkdir -p "$DEST"
  fi
}

#-------------------------------------------------------------------------------

dest_dir_check()
{
  if [ -e "$DEST_DIR" ] && [ ! -d "$DEST_DIR" ]
  then
    log_error "destination exists but is not a directory"
    exit 1
  elif [ ! -d "$DEST_DIR" ]
  then
    if [ -n "$SWITCH_c" ]
    then
      log_trace "destination directory does not exist and -c was specified"
      mkdir -p "$DEST_DIR"
    else
      log_error "destination directory does not exist and -c was not specified"
      exit 1
    fi
  fi
}

#-------------------------------------------------------------------------------

relink()
(
  if [ -z "$SWITCH_t" ]
  then
    exit 0
  fi
  
  SOURCE="$1"
  shift
  DEST="$1"
  shift
  
#  [ ! -d "$SOURCE" ] && log_fatal "relink source is not a directory SOURCE_DIR=$SOURCE" && exit 1
  [ ! -d "$DEST" ] && log_fatal "relink destination is not a directory DEST_DIR=$DEST" && exit 1
  
  log_debug "relink: SOURCE_DIR=$SOURCE - DEST_DIR=$DEST - TARGETS: $@"
  
  for k in "$@"
  do
    if [ -L "$k" ]
    then
      trace call exit relink_single "$SOURCE" "$DEST" "$k"
    elif [ -f "$k" ]
    then
      log_trace "relink: no action needed on file: $k - SOURCE_DIR=$SOURCE - DEST_DIR=$DEST"
    elif [ -d "$k" ]
    then
      move_fnd "$k" trace call exit relink "$SOURCE" "$DEST"
    else
      log_error "relink: undetected type of: $k - DEST_DIR=$DEST"
    fi
  done
)

#-------------------------------------------------------------------------------

relink_single()
(
  [ "$#" != "3" ] && log_fatal "wrong arguments" && exit 1
#  [ ! -d "$1" ] && log_fatal "$1 is not a directory" && exit 1
  [ ! -d "$2" ] && log_fatal "$2 is not a directory" && exit 1
  [ ! -L "$3" ] && log_fatal "$3 is not a link" && exit 1
  
  SOURCE="$(path -a "$1")"
  DEST="$(path -a "$2")"
  LINK="$(path -a "$3")"
  
  LINK_TARGET="$(lnk -t "$LINK")"
  
  log_trace "relink_single: SOURCE=$SOURCE - DEST=$DEST - LINK=$LINK - LINK_TARGET=$LINK_TARGET"
  
  if [ "$LINK_TARGET" != "${LINK_TARGET#../}" ]
  then
    LINK_DEST_REL="$(path -r "$LINK" "$DEST")"
    LINK_SOURCE_ABS="$(path -a "$SOURCE/$LINK_DEST_REL")"
    LINK_SOURCE_TARGET_ABS="$(path -a "${LINK_SOURCE_ABS%/*}/$LINK_TARGET")"
    lnk -fr "$LINK_SOURCE_TARGET_ABS" "$LINK"
  else
    log_trace "no need to relink absolute link: $LINK_TARGET"
  fi
)

#-------------------------------------------------------------------------------

move_fnd()
(
  [ "$#" -lt "2" ] && exit 2
  [ ! -d "$1" ] && exit 3
  
  FIND_DIR="$(path -al "$1")"
  shift
  
  move_fnd_loop "$FIND_DIR" "$@"
)

#-------------------------------------------------------------------------------

move_fnd_loop()
(
  [ -z "$1" ] && exit 2
  
  FIND_DIR="$1"
  shift
  
  for k in "$FIND_DIR"/..?* "$FIND_DIR"/.[!.]* "$FIND_DIR"/*
  do
    if [ -L "$k" ]
    then
      "$@" "$k"
    elif [ -d "$k" ]
    then
      move_fnd_loop "$k" "$@"
    fi
  done
)

#-------------------------------------------------------------------------------

exec_move()
{
  log_trace "mv $MV_OPT $@ $DEST"
  mv $MV_OPT "$@" "$DEST"
}

#-------------------------------------------------------------------------------

main()
{
  [ "$#" -lt "2" ] && log_fatal "missing arguments" && exit 1
  
  COUNT="1"
  for k in "$@"
  do
    [ "$((COUNT))" -lt "$#" ] && set -- "$@" "$k" || DEST="$k"
    shift
    COUNT="$((COUNT + 1))"
  done
  
  log_debug "move: SOURCES=$@ - DESTINATION=$DEST"
  
  if [ -n "$SWITCH_a" ]
  then
    if [ "$#" != "1" ]
    then
      log_error "move-and-rename-as switch cannot be applied to more or less than two args"
      exit 1
    fi
    
    DEST_DIR="$(dirname "$DEST")"
    if [ -L "$1" ]
    then
      log_debug "move 1 link as"
      dest_overwrite_check L
      dest_dir_check
      exec_move "$@"
      trace call exit relink_single "$(dirname "$1")" "$DEST_DIR" "$DEST"
      exit 0
    elif [ -f "$1" ]
    then
      log_debug "move 1 file as"
      dest_overwrite_check f
      dest_dir_check
      exec_move "$@"
      # no need to relink
      exit 0
    elif [ -d "$1" ]
    then
      log_debug "move 1 dir as: dirname of dest must exist, then create dest, then move each sub source into dest"
      dest_overwrite_check d
      dest_dir_check
      mkdir -p "$DEST"
      exec_move "$1"/*
      rmdir "$1"
      trace call exit relink "$1" "$DEST" "$DEST"
      exit 0
    else
      log_error "source is not a file or dir"
      exit 1
    fi
  else
    DEST_DIR="$DEST"
    dest_overwrite_check d
    dest_dir_check
    exec_move "$@"
    for k in "$@"
    do
      trace call exit relink "$(dirname "$k")" "$DEST" "$DEST/${k##*/}"
    done
  fi
}

#-------------------------------------------------------------------------------

#export PATH="$(cd -P -- "${0%/*}"; pwd):$PATH"

. m.lib.sh

#PARSE_ARGS_FORMAT="free"
#PARSE_ARGS_SWITCH="acfs"
#PARSE_ARGS_OPTION=""

ARGS_PARSE="true"
ARGS_FORMAT="smart"
ARGS_SWITCH="acfst"
ARGS_SWITCH_FUNCTION_PREFIX="switch"

m_command "$@"
#m_script "$@"

#-------------------------------------------------------------------------------
