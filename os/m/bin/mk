#!/bin/sh

#-------------------------------------------------------------------------------

main()
{
  main_constants
  main_variables
  main_initializations
  main_loop "$@"
}

#-------------------------------------------------------------------------------

main_constants()
{
  MK_M_PATH="os/m"
  
  MAKEFILE_DIR="$THIS_DIR/makefiles"
  MAKEFILE="$MAKEFILE_DIR/makefile"
  
  MKCONF_SUBDIR="conf"
  MKCONF_FILENAME="mk.conf"
  
  TASK_BUILD_FILENAME="task-build.done"
  TASK_RUN_FILENAME="task-run.done"
  
  SOURCE_SUBDIR="src"
  
  BUILD_SUBDIR="build"
  DIST_SUBDIR="dist"
  RUN_SUBDIR="run"
  TASK_SUBDIR="task"
  
  TARGETS_DEFAULT="dependclean clean depend build install"
  TARGET_DEFAULT="install"
}

#-------------------------------------------------------------------------------

main_variables()
{
  export HOTSEEX
  export HOTSEEX_LEVEL
  
  export PRJ_PATH
  
  export INST_DIR
  export TEST_DIR
  
  export SHARED_DIST_DIR
  export SHARED_RUN_DIR
  
  # variables
  PRJ_DIR=""
  SOURCE_DIR=""
  MKCONF_DIR=""
  MKCONF_FILE=""
  
#  BUILD_DIR=""
#  DIST_DIR=""
#  RUN_DIR=""
#  TASK_DIR=""
}

#-------------------------------------------------------------------------------

main_initializations()
{
  work "$THIS_NAME"
  
  SOURCE_SUBDIR=""
  MKCONF_SUBDIR=".mk"
  
  [ -z "$BUILD_DIR" ] && [ -n "$FIXED_BUILD_DIR" ] && BUILD_DIR="$FIXED_BUILD_DIR"
  [ -z "$DIST_DIR" ] && [ -n "$FIXED_DIST_DIR" ] && DIST_DIR="$FIXED_DIST_DIR"
  [ -z "$RUN_DIR" ] && [ -n "$FIXED_RUN_DIR" ] && RUN_DIR="$FIXED_RUN_DIR"
  [ -z "$TASK_DIR" ] && [ -n "$FIXED_TASK_DIR" ] && TASK_DIR="$FIXED_TASK_DIR"
  
  [ -z "$BUILD_DIR" ] && BUILD_DIR="$DATA_DIR/$BUILD_SUBDIR" && export FIXED_BUILD_DIR="$DATA_DIR/$BUILD_SUBDIR"
  [ -z "$DIST_DIR" ] && DIST_DIR="$DATA_DIR/$DIST_SUBDIR" && export FIXED_DIST_DIR="$DATA_DIR/$DIST_SUBDIR"
  [ -z "$RUN_DIR" ] && RUN_DIR="$DATA_DIR/$RUN_SUBDIR" && export FIXED_RUN_DIR="$DATA_DIR/$RUN_SUBDIR"
  [ -z "$TASK_DIR" ] && TASK_DIR="$DATA_DIR/$TASK_SUBDIR" && export FIXED_TASK_DIR="$DATA_DIR/$TASK_SUBDIR"
}

#-------------------------------------------------------------------------------

main_loop()
{
  if [ -z "$PROJECTS" ] && [ -z "$TARGETS" ]
  then
    log_trace "command line form: no projects - no targets"
    trace exec exit mk_project "$PROJECT" "$PROFILES" "$*"
  elif [ -z "$PROJECTS" ] && [ -n "$TARGETS" ]
  then
    log_trace "command line form: no projects - targets"
    trace exec exit mk_project "$PROJECT" "$PROFILES" "$TARGETS"
    for k in "$@"
    do
      trace exec exit mk_project "$k" "$PROFILES" "$TARGETS"
    done
  elif [ -n "$PROJECTS" ] && [ -z "$TARGETS" ]
  then
    log_trace "command line form: projects - no targets"
    if [ "$PROJECT" != "\0" ]
    then
      trace exec exit mk_project "$PROJECT" "$PROFILES" "$*"
    fi
    array_exec_loop "PROJECTS" trace exec exit mk_project "\$k" "$PROFILES" "$*"
  elif [ -n "$PROJECTS" ] && [ -n "$TARGETS" ]
  then
    log_trace "command line form: projects - targets"
    if [ "$PROJECT" != "\0" ]
    then
      trace exec exit mk_project "$PROJECT" "$PROFILES" "$TARGETS"
    fi
    array_exec_loop "PROJECTS" trace exec exit mk_project "\$k" "$PROFILES" "$TARGETS"
  else
    log_fatal "command line form: not recognized"
    exit 1
  fi
}

#-------------------------------------------------------------------------------

mk_project()
{
  PROJECT="$1"
  
# load main project conf at each profile to correctly evaluate dirs inside conf
  trace call exit mk_project_detect "$PROJECT"
#  trace call exit mk_conf_project "$PROJECT"
#  log_debug "project configuration - PROFILES: $PROFILES"
  
  [ -n "$2" ] && [ "$PROFILES" != "$2" ] && log_debug "profiles specified into project configuration are overridden by commandline"
  [ -n "$2" ] && PROFILES="$2"
# profiles are meant to be specified into project configuration but can be overidden, targets are meant to be specified only by commandline
  TARGETS="$3"
  [ -z "$TARGETS" ] && TARGETS="$TARGETS_DEFAULT"
  log_info "PROJECT: $PROJECT - PROFILES: $PROFILES - TARGETS: $TARGETS"
  
  log_debug "project......: $PROJECT"
  log_debug "project.path.: $PRJ_PATH"
  log_debug "project.dir..: $PRJ_DIR"
  log_debug "profiles.....: $PROFILES"
  log_debug "targets......: $TARGETS"
  log_debug "type.........: $TYPE"
  log_debug "root.dir.....: $ROOT_DIR"
  log_debug "src.dir......: $SRC_DIR"
  log_debug "source.dir...: $SOURCE_DIR"
  log_debug "mkconf.dir...: $MKCONF_DIR"
  log_debug "mkconf.file..: $MKCONF_FILE"
  log_debug "build.dir....: $BUILD_DIR"
  log_debug "dist.dir.....: $DIST_DIR"
  log_debug "run.dir......: $RUN_DIR"
  log_debug "task.dir.....: $TASK_DIR"
  log_debug "hotseex......: $HOTSEEX"
  
  trace exec exit mk_profiles "$PROFILES" "$TARGETS"
}

#-------------------------------------------------------------------------------

mk_profiles()
{
  PROFILES="$1"
  TARGETS="$2"
  
  if [ -z "$PROFILES" ]
  then
    trace exec exit mk_profile "" "$TARGETS"
  else
    for PROFILE in $PROFILES
    do
      trace exec exit mk_profile "$PROFILE" "$TARGETS"
    done
  fi
}

#-------------------------------------------------------------------------------

mk_profile()
{
  PROFILE="$1"
  TARGETS="$2"
  
# todo review here...
  if [ -n "$PROFILE" ]
  then
    [ "$TYPE" != "multi" ] && BUILD_DIR="$BUILD_DIR-$PROFILE"
    [ "$TYPE" != "multi" ] && [ -z "${SHARED_DIST_DIR+true}" ] && DIST_DIR="$DIST_DIR-$PROFILE"
    [ -z "${SHARED_RUN_DIR+true}" ] && RUN_DIR="$RUN_DIR-$PROFILE"
    TASK_DIR="$TASK_DIR-$PROFILE"
  fi
  
  log_info "PROFILE: $PROFILE"
  log_debug "build.dir....: $BUILD_DIR"
  log_debug "dist.dir.....: $DIST_DIR"
  log_debug "run.dir......: $RUN_DIR"
  log_debug "task.dir.....: $TASK_DIR"
  
  mkdir -p "$BUILD_DIR"
  mkdir -p "$DIST_DIR"
  mkdir -p "$RUN_DIR"
  mkdir -p "$TASK_DIR"
  
# load main project conf at each profile to correctly evaluate dirs inside conf
  trace call exit mk_conf_file_load
  
  trace call exit mk_conf_profile "$PROFILE"
  trace exec exit mk_type "$TARGETS"
}

#-------------------------------------------------------------------------------

mk_type()
{
  TARGETS="$1"
  
  log_info "TYPE: $TYPE"
  
  trace call exit mk_conf_type "$TYPE"
  
  log_debug "######### --- PROCESSING TYPE - START --- #########"
  
  if exist mk_type_"$TYPE"
  then
    trace call exit mk_type_"$TYPE" "$TARGETS"
  else
    trace call exit mk_targets "$TARGETS"
  fi
  
  log_debug "######### --- PROCESSING TYPE - END --- #########"
}

#-------------------------------------------------------------------------------

mk_targets()
{
  TARGETS="$1"
  
  if [ -z "$TARGETS" ]
  then
    fatal "no targets"
  else
    for TARGET in $TARGETS
    do
      if exist mk_target_"$TARGET"_export
      then
        trace call exit mk_target_"$TARGET"_export $TARGET_PARAMS
      fi
      trace exec exit mk_target "$TARGET"
    done
  fi
}

#-------------------------------------------------------------------------------

mk_target()
{
#  TARGET="$1"
  TARGET="${1%%:*}"
  TARGET_PARAMS=${1##$TARGET}
  TARGET_PARAMS=${TARGET_PARAMS#:}
  
  log_info "TARGET: $TARGET - TARGET_PARAMS: $TARGET_PARAMS"
  
  trace call exit mk_conf_target "$TARGET"
  
  if exist mk_type_"$TYPE"_target_"$TARGET"_ante
  then
    trace call exit mk_type_"$TYPE"_target_"$TARGET"_ante $TARGET_PARAMS
  elif exist mk_type_"$TYPE"_target_ante
  then
    trace call exit mk_type_"$TYPE"_target_ante "$TARGET" $TARGET_PARAMS
  elif exist mk_target_"$TARGET"_ante
  then
    trace call exit mk_target_"$TARGET"_ante $TARGET_PARAMS
  else
    log_trace "type/target functions undefined: mk_target_${TARGET}_ante - mk_type_${TYPE}_target_ante - mk_type_${TYPE}_target_${TARGET}_ante"
  fi
  
  [ -n "$TARGET_STOP" ] && unset TARGET_STOP && return 0
  
  if exist mk_type_"$TYPE"_target_"$TARGET"
  then
    trace exec exit mk_type_"$TYPE"_target_"$TARGET" $TARGET_PARAMS
  elif exist mk_type_"$TYPE"_target
  then
    trace exec exit mk_type_"$TYPE"_target "$TARGET" $TARGET_PARAMS
  elif exist mk_target_"$TARGET"
  then
    trace exec exit mk_target_"$TARGET" $TARGET_PARAMS
  else
    log_trace "type/target functions undefined: mk_target_$TARGET - mk_type_${TYPE}_target - mk_type_${TYPE}_target_$TARGET"
  fi
  
  [ -n "$TARGET_STOP" ] && unset TARGET_STOP && return 0
  
  if exist mk_type_"$TYPE"_target_"$TARGET"_post
  then
    trace call exit mk_type_"$TYPE"_target_"$TARGET"_post $TARGET_PARAMS
  elif exist mk_type_"$TYPE"_target_post
  then
    trace call exit mk_type_"$TYPE"_target_post "$TARGET" $TARGET_PARAMS
  elif exist mk_target_"$TARGET"_post
  then
    trace call exit mk_target_"$TARGET"_post $TARGET_PARAMS
  else
    log_trace "type/target functions undefined: mk_target_${TARGET}_post - mk_type_${TYPE}_target_post - mk_type_${TYPE}_target_${TARGET}_post"
  fi
}

#-------------------------------------------------------------------------------

. m.lib.sh

ARGS_PARSE="true"
ARGS_FORMAT="smart"

ARGS_OPTION="project profile target"
ARGS_OPTION_project="-1"
ARGS_OPTION_profile="-1"
ARGS_OPTION_target="-1"
ARGS_OPTION_project_VARIABLE="PROJECTS"
ARGS_OPTION_profile_VARIABLE="PROFILES"
ARGS_OPTION_target_VARIABLE="TARGETS"

ARGS_FIXED="1"
ARGS_FIXED_VARIABLE_0="PROJECT"

m_script "$@"

#-------------------------------------------------------------------------------
