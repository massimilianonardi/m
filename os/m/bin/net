#!/bin/sh

#-------------------------------------------------------------------------------

maven_parse_pkg()
{
  PKG_GROUP="${1%%/*}"
  PKG_ARTIFACT="${1#"$PKG_GROUP"}"
  PKG_ARTIFACT="${PKG_ARTIFACT#/}"
  PKG_ARTIFACT="${PKG_ARTIFACT%%/*}"
  PKG_VERSION="${1#"$PKG_GROUP"}"
  PKG_VERSION="${PKG_VERSION#/}"
  PKG_VERSION="${PKG_VERSION#"$PKG_ARTIFACT"}"
  PKG_VERSION="${PKG_VERSION#/}"
  
  log_debug "ARG: $1 - PKG_GROUP: $PKG_GROUP - PKG_ARTIFACT: $PKG_ARTIFACT - PKG_VERSION: $PKG_VERSION"
}

#-------------------------------------------------------------------------------

maven_get()
(
  maven_parse_pkg "$1"
  
  if [ -z "$PKG_GROUP" ] || [ -z "$PKG_ARTIFACT" ] || [ -z "$PKG_VERSION" ]
  then
    log_fatal "net store get maven pkg requires full package description (\$PKG_GROUP/\$PKG_ARTIFACT/\$PKG_VERSION): $@"
    exit 1
  fi
  
  maven get -t "$1" "$2"
  
  mkdir -p "$2/sys"
  echo "java">"$2/sys/depend"
#  echo "all">"$2/sys/platform"
#  echo "maven">"$2/sys/platform"
  echo "java">"$2/sys/platform"
  echo "$PKG_GROUP+$PKG_ARTIFACT">"$2/sys/name"
#  echo "$PKG_GROUP-$PKG_ARTIFACT">"$2/sys/path"
#  echo "$PKG_GROUP-$PKG_ARTIFACT">"$2/sys/env"
  echo "$PKG_ARTIFACT-$PKG_VERSION.jar=bin/$PKG_ARTIFACT-$PKG_VERSION.jar">"$2/sys/lib"
  echo "$PKG_ARTIFACT.jar=bin/$PKG_ARTIFACT-$PKG_VERSION.jar">>"$2/sys/lib"
  echo "$PKG_VERSION">"$2/sys/version"
)

#-------------------------------------------------------------------------------

github_get()
(
  maven_parse_pkg "$1"
  
  if [ -z "$PKG_GROUP" ] || [ -z "$PKG_ARTIFACT" ] || [ -z "$PKG_VERSION" ]
  then
    log_fatal "net store get maven pkg requires full package description (\$PKG_GROUP/\$PKG_ARTIFACT/\$PKG_VERSION): $@"
    exit 1
  fi
  
  mkdir -p "$2"
  github get -x "$1" "$2/bin"
  
  mkdir -p "$2/sys"
  touch "$2/sys/depend"
#  echo "all">"$2/sys/platform"
#  echo "github">"$2/sys/platform"
  echo "src">"$2/sys/platform"
  echo "$PKG_GROUP+$PKG_ARTIFACT">"$2/sys/name"
#  echo "$PKG_GROUP-$PKG_ARTIFACT">"$2/sys/path"
#  echo "$PKG_GROUP-$PKG_ARTIFACT">"$2/sys/env"
  echo "$PKG_ARTIFACT-$PKG_VERSION=bin">"$2/sys/lib"
  echo "$PKG_ARTIFACT=bin">>"$2/sys/lib"
  echo "$PKG_VERSION">"$2/sys/version"
)

#-------------------------------------------------------------------------------

npm_get()
(
  maven_parse_pkg "$1"
  
  PKG_VERSION="$PKG_ARTIFACT"
  if [ -z "$PKG_GROUP" ] || [ -z "$PKG_VERSION" ]
  then
    log_fatal "net store get npm pkg requires full package description (\$PKG_GROUP/\$PKG_VERSION): $@"
    exit 1
  fi
  
  mkdir -p "$2"
  npmjs get -x "$1" "$2/bin"
  
  mkdir -p "$2/sys"
  echo "nodejs">"$2/sys/depend"
#  echo "all">"$2/sys/platform"
  echo "npm">"$2/sys/platform"
  echo "$PKG_GROUP">"$2/sys/name"
  echo "bin/node_modules/.bin">"$2/sys/path"
#  echo "$PKG_GROUP-$PKG_ARTIFACT">"$2/sys/env"
#  echo "$PKG_ARTIFACT-$PKG_VERSION=bin">"$2/sys/lib"
#  echo "$PKG_ARTIFACT=bin">>"$2/sys/lib"
  echo "$PKG_VERSION">"$2/sys/version"
)

#-------------------------------------------------------------------------------

find()
(
  if [ "$#" -lt "1" ]
  then
    for k in "$STORE_DIR/"*
    do
#      if [ "$k" = "$STORE_DIR/*" ]
      if [ ! -e "$k" ]
      then
        log_trace "pkg search did not find anything"
        break
      fi
      echo "${k#$STORE_DIR/}"
    done
    return 0
  fi
  
  for k in "$@"
  do
    find_single "$k"
  done
)

#-------------------------------------------------------------------------------

find_single()
(
  if [ ! "$#" = "1" ]
  then
    log_fatal "wrong arguments: $@"
    exit 1
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/java}" ]
  then
    log_debug "find maven: $1"
    for k in $(maven find "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/java//;s/+/\//')")
    do
      echo "$k" | sed 's/\//+/;s/\//\/java\//'
    done
    exit 0
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/src}" ]
  then
    log_debug "find github: $1"
    for k in $(github find "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/src//;s/+/\//')")
    do
      echo "$k" | sed 's/\//+/;s/\//\/src\//'
    done
    exit 0
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/npm}" ]
  then
    log_debug "find npm: $1"
#    for k in $(npm find --json "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/npm.*//;s/+/\//')" | sed 's/\[{\"name\":\"//;s/,{\"name\":\"/\n/g' | sed 's/\",.*\"version\":\"/\//;s/\".*//;s/\[//;s/\]//')
    for k in $(npmjs find "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/npm//')")
    do
#      echo "$k"
#      echo "$k" | sed 's/\//+/;s/\//\/npm\//'
      echo "$k" | sed 's/\//\/npm\//'
    done
    exit 0
  fi
  
#  for k in "$STORE_DIR/"*"$1"*
  for k in "$STORE_DIR/"$1
  do
#    if [ "$k" = "$STORE_DIR/*${1}*" ]
    if [ ! -e "$k" ]
    then
#      log_trace "pkg search did not match *${1}*"
      log_trace "pkg search did not match $1"
      break
    fi
    echo "${k#$STORE_DIR/}"
  done
)

#-------------------------------------------------------------------------------

get()
(
  if [ -z "$1" ] || [ -z "$2" ]
  then
    log_fatal "net get requires FROM: \$1 - TO: \$2"
    exit 1
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/java}" ]
  then
    log_debug "get maven: $1"
    maven_get "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/java//;s/+/\//')" "$2"
    exit 0
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/src}" ]
  then
    log_debug "get github: $1"
    github_get "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/src//;s/+/\//')" "$2"
    exit 0
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/npm}" ]
  then
    log_debug "get npm: $1"
#    (mkdir -p "$2"; cd "$2"; npm install "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/npm\//@/;s/+/\//')")
    npm_get "$(echo "${1#$NET_M_PKG_DIR/}" | sed 's/\/npm//')" "$2"
    exit 0
  fi
  
  if [ ! -e "$STORE_DIR/$1" ]
  then
    log_fatal net store get - cannot find: "$STORE_DIR/$1"
    exit 1
  fi
  
  if [ ! -e "$CACHE_DIR/$1" ]
  then
    log_debug net cache: "$1"
    cache "$1"
  else
    log_debug net refresh: "$1"
    refresh "$1"
  fi

  log_debug net store - get: "$STORE_DIR/$1" "- copy to ->" "$2"
  copy -ac "$CACHE_DIR/$1" "$2"
)

#-------------------------------------------------------------------------------

stream()
(
  if [ -z "$1" ]
  then
    log_fatal "net cat requires at least one argument"
    exit 1
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/java}" ]
  then
    log_debug "stream maven: $1"
    if [ "$1" != "${1%/sys/depend}" ]
    then
      log_debug "net store stream request for maven dependencies"
      echo "java"
# todo refactor results to pkg-find format
      MAVEN_PKG="${1#$NET_MAVEN_PKG_PREFIX}"
      MAVEN_PKG="${MAVEN_PKG%/sys/depend}"
      maven_parse_pkg "$MAVEN_PKG"
      GET_URL="https://search.maven.org/remotecontent?filepath=$(echo "$PKG_GROUP" | sed "s/\./\//g")/$PKG_ARTIFACT/$PKG_VERSION"
      FILE="$PKG_ARTIFACT-$PKG_VERSION"
      web -q get "$GET_URL/$FILE.pom" - | sed '1,/.*<dependencies\>/d;/.*<\/dependencies\>/,$d;s/<\/groupId>.*<artifactId>//g' | tr -d '\n' | sed 's/<\/dependency>/\n/g' | grep '<scope>runtime</scope>' | sed 's|.*<groupId>|/java|g;s|</groupId>.*<artifactId>|/|g;s|</artifactId>.*<version>|/|g;s|</version>.*||g;s|\${.*}|/|g'
      exit 0
    else
      log_fatal "net store stream request for maven file -> feature not available"
      exit 1
    fi
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/src}" ]
  then
    log_debug "stream github: $1"
    if [ "$1" != "${1%/sys/depend}" ]
    then
      log_debug "net store stream request for github dependencies"
#      echo ""
      exit 0
    else
      log_fatal "net store stream request for github file -> feature not available"
      exit 1
    fi
  fi
  
  if [ "$1" != "${1#$NET_M_PKG_DIR/*/npm}" ]
  then
    log_debug "stream npm: $1"
    if [ "$1" != "${1%/sys/depend}" ]
    then
      log_debug "net store stream request for npm dependencies"
      echo "nodejs"
      exit 0
    else
      log_fatal "net store stream request for npm file -> feature not available"
      exit 1
    fi
  fi
  
  if [ ! -e "$STORE_DIR/${1#/}" ]
  then
    log_fatal net store stream - cannot find: "$STORE_DIR/${1#/}"
    exit 1
  fi
  
  if [ ! -e "$CACHE_DIR/${1#/}" ]
  then
    log_debug net cache: "${1#/}"
    cache "${1#/}"
  else
    log_debug net refresh: "${1#/}"
    refresh "${1#/}"
  fi

  log_debug net store - stream: "$STORE_DIR/${1#/}"
  cat "$CACHE_DIR/${1#/}"
)

#-------------------------------------------------------------------------------

download()
(
  if [ -z "$1" ]
  then
    log_fatal "net store download requires an argument"
    exit 1
  fi
  
  . "$1"
  if [ -z "$LINK" ]
  then
    log_fatal "net store download requires an argument"
    exit 1
  fi
  
#  TMP_FILE="$TMP_DIR/dl_$(date +"[%Y-%m-%d_%H-%M-%S]")_$RANDOM.tmp"
  TMP_FILE="$CACHE_DIR/${1#$STORE_DIR/}"
  log_debug web get "$LINK" "$TMP_FILE"
  rm "$TMP_FILE"
  if [ -z "$LINK_HEADER" ]
  then
    web get "$LINK" "$TMP_FILE"
  else
    web --header "$LINK_HEADER" -- get "$LINK" "$TMP_FILE"
  fi
  
  if [ -n "$LINK_HASH" ]
  then
    log_debug "hash check: $LINK_HASH $TMP_FILE"
    HASH="$(hsh "$TMP_FILE" "$LINK_HASH_ALG")"
    if [ "$HASH" != "$LINK_HASH" ]
    then
      log_fatal "hash mismatch - HASH_ALG: $LINK_HASH_ALG - HASH TO MATCH: $LINK_HASH - HASH CALCULATED: $HASH - FILE: $TMP_FILE"
      exit 1
    fi
  fi
  
  if [ -n "$LINK_EXTRACT" ]
  then
    TMP_XTR="$TMP_FILE.xtr"
    log_debug "extract: $LINK_EXTRACT - $TMP_XTR"
    if [ "$LINK_EXTRACT" = "exact" ]
    then
      xtr -c "$TMP_FILE" "$TMP_XTR"
    elif [ "$LINK_EXTRACT" = "link" ]
    then
      xtr -c "$TMP_FILE" "$TMP_FILE.orig"
      lnk -r "$TMP_FILE.orig"/* "$TMP_XTR"
    else
      xtr -cs "$TMP_FILE" "$TMP_XTR"
    fi
    rm "$TMP_FILE"
    mv "$TMP_XTR" "$TMP_FILE"
  fi
  
#  log_debug "download, hash and extraction ok - removing link $1"
#  rm "$1"
#  log_debug "download, hash and extraction ok - replacing link: $TMP_PATH -> $1"
#  mv "$TMP_FILE" "$1"
  log_debug "download, hash and extraction ok - replacing link on cache: $1 -> $TMP_PATH"
)

#-------------------------------------------------------------------------------

download_rf()
(
  if [ -z "$1" ]
  then
    log_fatal "net store download requires an argument"
    exit 1
  fi
  
  . "$1"
  if [ -z "$LINK" ]
  then
    log_fatal "net store download requires an argument"
    exit 1
  fi
  
# check web page if newer version then call download
  TMP_FILE="$CACHE_DIR/${1#$STORE_DIR/}"
  log_debug web get "$LINK" "$TMP_FILE"
  rm "$TMP_FILE"
  if [ -z "$LINK_HEADER" ]
  then
    web get "$LINK" "$TMP_FILE"
  else
    web --header "$LINK_HEADER" -- get "$LINK" "$TMP_FILE"
  fi
  
  if [ -n "$LINK_HASH" ]
  then
    log_debug "hash check: $LINK_HASH $TMP_FILE"
    HASH="$(hsh "$TMP_FILE" "$LINK_HASH_ALG")"
    if [ "$HASH" != "$LINK_HASH" ]
    then
      log_fatal "hash mismatch - HASH_ALG: $LINK_HASH_ALG - HASH TO MATCH: $LINK_HASH - HASH CALCULATED: $HASH - FILE: $TMP_FILE"
      exit 1
    fi
  fi
  
  if [ -n "$LINK_EXTRACT" ]
  then
    TMP_XTR="$TMP_FILE.xtr"
    log_debug "extract: $LINK_EXTRACT - $TMP_XTR"
    if [ "$LINK_EXTRACT" = "exact" ]
    then
      xtr -c "$TMP_FILE" "$TMP_XTR"
    else
      xtr -cs "$TMP_FILE" "$TMP_XTR"
    fi
    rm "$TMP_FILE"
    mv "$TMP_XTR" "$TMP_FILE"
  fi
  
#  log_debug "download, hash and extraction ok - removing link $1"
#  rm "$1"
#  log_debug "download, hash and extraction ok - replacing link: $TMP_PATH -> $1"
#  mv "$TMP_FILE" "$1"
  log_debug "download, hash and extraction ok - replacing link on cache: $1 -> $TMP_PATH"
)

#-------------------------------------------------------------------------------

dl_loop()
(
# if is link and link resolves to a subdir of links dir then download
  if [ -L "$1" ] || [ -h "$1" ]
  then
    log_trace "file is a download link to be cached -> downloading now: $1"
    download "$1"
  else
    log_trace "file or dir is already cached: $1"
  fi
)

#-------------------------------------------------------------------------------

rf_loop()
(
# if is link and link resolves to a subdir of links dir then download
  if [ -L "$1" ] || [ -h "$1" ]
  then
    log_trace "file is a download link to be refreshed -> check now: $1"
    download_rf "$1"
  else
    log_trace "file or dir is already cached: $1"
  fi
)

#-------------------------------------------------------------------------------

cache()
(
  if [ -z "$1" ]
  then
    log_fatal "net store cache download requires an argument"
    exit 1
  fi
  
  copy -ac "$STORE_DIR/$1" "$CACHE_DIR/$1"
  fnd "$STORE_DIR/$1" dl_loop
)

#-------------------------------------------------------------------------------

refresh()
(
  if [ -z "$1" ]
  then
    log_fatal "net store refresh requires an argument"
    exit 1
  fi
  
  rm -Rf "$CACHE_DIR/$1"
  copy -ac "$STORE_DIR/$1" "$CACHE_DIR/$1"
#  fnd "$STORE_DIR/$1" rf_loop
  fnd "$STORE_DIR/$1" dl_loop
)

#-------------------------------------------------------------------------------

main()
{
  STORE_DIR="$THIS_DIR/net_store"
  CACHE_DIR="$DATA_DIR/cache"
  
  NET_ROOT_DIR=""
  NET_M_PKG_DIR="$NET_ROOT_DIR/m/pkg"
  NET_M_SRC_DIR="$NET_ROOT_DIR/m/src"
  
  case "$1" in
    "find") true;;
    "get") true;;
    "stream") true;;
    *) exit 1;;
  esac
  
  "$@"
}

#-------------------------------------------------------------------------------

#export PATH="$(cd -P -- "${0%/*}"; pwd):$PATH"

. m.lib.sh

m_script "$@"

#-------------------------------------------------------------------------------
