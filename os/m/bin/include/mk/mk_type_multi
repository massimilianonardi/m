#!/bin/sh

#-------------------------------------------------------------------------------

mk_type_multi_target_test_ante()
{
  true
#  trace exec exit mk_target install
  trace call exit mk_target_dependprj_ante "$TARGETS"
#  trace call exit mk_target_dependprj_ante "install"
#  trace exec exit mk_type_multi_target "install"
#  trace call exit mk_target_install_post
}

#-------------------------------------------------------------------------------

mk_type_multi_target_test_post()
{
  true
}

#-------------------------------------------------------------------------------

mk_type_multi_target_install_post()
{
  true
}

#-------------------------------------------------------------------------------

mk_type_multi_target()
{
  TARGETS="$1"
  
  ROOT_PRJ="$PROJECT"
  
  log_info "PROJECTS: $PROJECTS"
  
  for PROJECT in $PROJECTS_HI_PRI
  do
    trace exec exit mk_type_multi_project "$PROJECT"
  done
  
  if [ -z "$PROJECTS" ]
  then
  (
    cd "$PRJ_DIR"
    for PROJECT in ..?* .[!.]* *
    do
      [ -d "$PROJECT" ] || [ -f "$PROJECT" ] || continue
      [ "$PROJECT" != "$MKCONF_SUBDIR" ] || continue
      contains "$PROJECT" "$PROJECTS_HI_PRI" || contains "$PROJECT" "$PROJECTS_LO_PRI" || trace exec exit mk_type_multi_project "$PROJECT"
    done
  ) || exit "$?"
  else
    for PROJECT in $PROJECTS
    do
      contains "$PROJECT" "$PROJECTS_HI_PRI" || contains "$PROJECT" "$PROJECTS_LO_PRI" || trace exec exit mk_type_multi_project "$PROJECT"
    done
  fi
  
  for PROJECT in $PROJECTS_LO_PRI
  do
#    trace exec exit mk_type_multi_project "$PROJECT"
      contains "$PROJECT" "$PROJECTS_HI_PRI" || trace exec exit mk_type_multi_project "$PROJECT"
  done
  
#  [ "$TARGET" = "install" ] && TARGET_STOP="true" || true
#  [ "$TARGET" = "run" ] && [ -n "$RUN_CMD" ] && trace call exit $RUN_CMD || true
}

#-------------------------------------------------------------------------------

mk_type_multi_project()
{
  PROJECT="$1"
  
#  export BUILD_DIR
#  export DIST_DIR
#  export RUN_DIR
#  export TASK_DIR
  
  log_info "PROJECT: $PROJECT"
  
  if [ -d "$MKCONF_DIR/project-$PROJECT" ]
  then
    log_trace "multi project configuration override - detected conf dir - MKCONF_DIR: $MKCONF_DIR/project-$PROJECT - content:" "$(ls -Am $MKCONF_DIR/project-$PROJECT)"
  fi
  
  if [ -f "$MKCONF_DIR/project-$PROJECT/$MKCONF_FILENAME" ]
  then
    log_debug "multi project configuration override - MKCONF_DIR: $MKCONF_DIR/project-$PROJECT - MKCONF_FILE: $MKCONF_DIR/project-$PROJECT/$MKCONF_FILENAME"
#    MKCONF_DIR="$MKCONF_DIR/project-$PROJECT" RUN_DIR="$RUN_DIR" trace exec exit mk "$PROJECT" --profile "$PROFILE" -- "$TARGET"
#    MKCONF_DIR="$MKCONF_DIR/project-$PROJECT" INST_DIR="$INST_DIR" BUILD_DIR="$BUILD_DIR" DIST_DIR="$DIST_DIR" RUN_DIR="$RUN_DIR" TASK_DIR="$TASK_DIR" SHARED_RUN_DIR="" trace exec exit "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS
#    trace exec exit eval 'MKCONF_DIR="$MKCONF_DIR/project-$PROJECT" INST_DIR="$INST_DIR" BUILD_DIR="$BUILD_DIR" DIST_DIR="$DIST_DIR" RUN_DIR="$RUN_DIR" TASK_DIR="$TASK_DIR" SHARED_RUN_DIR="" "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS'
    MKCONF_DIR="$MKCONF_DIR/project-$PROJECT" LOG_LEVEL_FORCE="$LOG_LEVEL" RUN_DIR="$RUN_DIR" SHARED_RUN_DIR="" "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS
  else
#    RUN_DIR="$RUN_DIR" trace exec exit mk "$PROJECT" --profile "$PROFILE" -- "$TARGET"
#    INST_DIR="$INST_DIR" BUILD_DIR="$BUILD_DIR" DIST_DIR="$DIST_DIR" RUN_DIR="$RUN_DIR" TASK_DIR="$TASK_DIR" SHARED_RUN_DIR="" trace exec exit "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS
#    trace exec exit eval 'INST_DIR="$INST_DIR" BUILD_DIR="$BUILD_DIR" DIST_DIR="$DIST_DIR" RUN_DIR="$RUN_DIR" TASK_DIR="$TASK_DIR" SHARED_RUN_DIR="" "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS'
    LOG_LEVEL_FORCE="$LOG_LEVEL" RUN_DIR="$RUN_DIR" SHARED_RUN_DIR="" "$THIS_NAME" "$ROOT_PRJ/$PROJECT" --profile "$PROFILE" -- $TARGETS
  fi
}

#-------------------------------------------------------------------------------

contains()
(
  [ "$#" -le "1" ] && exit 1
  
  if [ "$#" -eq "2" ]
  then
    if [ "$1" = "$2" ]
    then
      exit 0
    else
      set -- "$1" $2
    fi
  fi
  
  WORD="$1"
  shift
  
  for k in "$@"
  do
    [ "$k" = "$WORD" ] && exit 0
  done
  
  exit 1
)

#-------------------------------------------------------------------------------
