- odr abi independence:
  sdk: exported includes + core dll/so
  sdk with service and sequence pure virtual classes (with pointers and primitive data types as parameters) + dlib macros for service compiling
  sdk with class templates helpers to wrap around sequence and service pointers
  core library with sequence implementation exported with c standard de/constructor
  in sdk service and sequence classes implementations based on sequence and service pointers

config: default (set by app developer) app_config in app dir, system (default for all_users set by admin) app_config in system dir, user app_config in user dir. 
the three levels overlap (defaults, system/all_users, user), security decides properties that can be overridden.

ServiceStreamer can change internally (?) the stream and it is managed by the global LoaderManager (?), or the stream should be provided and managed by LoaderAdvanced?
...or should stream act as a wrapper (like Loader) and can change on the fly? in this situation stream creates a key internally that can be accessed by the creator
...or this mechanism should be more general for any service asking for a particular instance of another one

user interface <in, elems, out> + runtime bindings + elems structure. def inputs for elems (eg edit, click, select, etc.), def outputs of elems (eg render, play, etc.)

system namespace and modules namespaces parametric
system log based on streamoutput with loglevel etc.
system debug based on system log?
enforce const methods and enforce passing variables by const reference to allow temporaries construction
cross platform system gui class as external srv
Object with a to_string() virtual method

definition of the ufn standard:
- path separator = . (eg. com.google.srv1)
- every string between two dots is a name of any possible thing in every possible universe: eg. local.srv1, me.mycat, phylosophy.socrates, etc.
- blanks are substituted to/from "_" by ui
- absolute name (root = /, root level = 0): /name_at_level_1.name_at_level_2
- relative path (current context path = .): .name1.name2
- cannot exist a terminator because each node can generate another (decide if terminating with dot . is facoltative, forbidden, required)
- / is the root of the name server not a real absolute because if anyone in some universe can have another name server
- assuming at some point many dns exists, they may accept to be governed by another master dns (like internet) so /srv1 -> /ns1.srv1
- rules must be defined for dns grouping...the simplest: never use /, but . instead -> absolute paths are only theorical and never accepted! -> beginning . can be omitted
- not every node is a name server, but only those who can create nodes
- every node is represented by a sequence
- srv node is the reference to the srv object, method node is the sequence it returns as result of a runtime invokation of the method on a specific params seuence
- instead the method node after a srv class node is the name of the method
- => methods must be named like the following: iface1.method1 => invokation of an iface method on a srv instance obj becomes: srv.iface1.method1 -> implement as macros
- => ifaces as macros => i can avoid extra classes and user defined "f" by macros defines wich ifaces or specific methods the user is implementing
- define set of valid characters for names
- NB since paths may have closed loops and thus are not trees, it makes no sense the .. (upper directory) resolution because you may have arrived from many nodes
- NB instead of the .. you have to specify the "previous" node as the next in name, eg. if n1->n2 then to specify the previous n1 from n2 is n2.n1 (you have to name it!)
- path to srv classes (physical dlls): eg. local.srv_name
- path to srv instances is the instantiation path: eg. local.srv1.srv2.srv1



inlcude rules:

- header: minimal self sufficient to compile
-- standard library headers
-- system os specific headers
-- third party libraries
-- this project minimal self sufficient headers

- body: minimal self sufficient to compile
-- first of all its own header to confirm the self sufficiency at compile time
-- standard library headers
-- system os specific headers
-- third party libraries
-- this project minimal self sufficient headers



passing objects through dll (two choices):

- Tightly coupled DLL: 
  The DLL is built with the exact same compiler version, packing and calling convention settings, library options as the application, 
  and both dynamically link to the runtime library (/MD compiler option). 
  This lets you pass objects back and forth including STL containers, allocate DLL objects from inside the application, 
  derive from base classes in the other module, do just about everything you could without using DLLs. 
  The disadvantage is that you can no longer deploy the DLL independently of the main application. Both must be built together. 
  The DLL is just to improve your process startup time and working set, 
  because the application can start running before loading the DLL (using the /delayload linker option). 
  Build times are also faster than a single module, especially when whole program optimization is used. 
  But optimization doesn't take place across the application-DLL boundary. And any non-trivial change will still require rebuilding both.

- Loosely coupled: 
  The application doesn't depend on the class layout of objects defined by the DLL. 
  You use only highly compatible data types: primitive types, pointers, function pointers, and user-defined types made up of these elements. 
  Classes inherit from a base class which defines interface and has no data members and no non-virtual functions 
  (this means no constructors and no sharing of standard library objects such as std::string or CString). 
  All allocation and object creation must be done through a factory function. 
  Memory must be deallocated from the module which allocated it. Code and data are separated. 
  The header file explicitly states the calling convention of each exported function and packing of each structure allowed to cross module boundaries. 
  The advantage is that the DLL and application can be updated completely independently. 
  You can rebuild one with a new runtime library, new compiler version, or even in a completely new language, and don't have to even touch the other.
