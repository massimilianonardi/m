# OPTIONAL INPUT VARIABLES: SOURCE_DIR, BUILD_DIR, DIST_DIR, PROJECT, CONF, TARGET_OS, TARGET_ARCHITECTURE, CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS, CPP_INCLUDES, CPP_LIBRARIES_LINK, CPP_OUTPUT_TYPE, CPP_FILES_DIST, CPP_FILENAME, CPP_FILE_EXTENSION

.PHONY: all clean build
.DEFAULT_GOAL:=all

include defaults_directories.conf
include defaults_project.conf
include defaults_system.conf
include defaults_cpp_target.conf
include defaults_cpp_compiler.conf
include defaults_cpp_compiler_options.conf
include makefile.conf

# build variables
SOURCE_DIRS=$(shell find $(SOURCE_DIR) -mindepth 0 -type d)
OBJECT_DIRS=$(patsubst $(SOURCE_DIR)%, $(BUILD_DIR)%, $(SOURCE_DIRS))
SOURCE_FILES=$(shell find $(SOURCE_DIR) -name "*.cpp" -o -name "*.c")
OBJECT_FILES=$(patsubst $(SOURCE_DIR)%, $(BUILD_DIR)%, $(addsuffix .o, $(SOURCE_FILES)))
SOURCE_FILES_C=$(shell find $(SOURCE_DIR) -name "*.c")
OBJECT_FILES_C=$(patsubst $(SOURCE_DIR)%, $(BUILD_DIR)%, $(addsuffix .o, $(SOURCE_FILES_C)))
SOURCE_FILES_CXX=$(shell find $(SOURCE_DIR) -name "*.cpp")
OBJECT_FILES_CXX=$(patsubst $(SOURCE_DIR)%, $(BUILD_DIR)%, $(addsuffix .o, $(SOURCE_FILES_CXX)))
DEPENDANCY_FILES=$(wildcard $(addsuffix .d, $(OBJECT_FILES)))
ifeq ($(CPP_FILENAME),)
  CPP_FILENAME=$(PROJECT)
endif
PROJECT_OUTPUT_FILENAME=$(DIST_DIR)/$(CPP_FILENAME)$(CPP_FILE_EXTENSION)

# compiler variables

# -Wl,-rpath,. embeds into the binary the libraries search path=. while -Ldir tell the linker where to search to resolve symbols
ifeq ($(CPP_LIBRARIES_RUNTIME_PATH),)
  CPP_LIBRARIES_RUNTIME_PATH=.
endif
LDFLAGS=-Wl,-rpath,$(CPP_LIBRARIES_RUNTIME_PATH) -L$(DIST_DIR)



################################################################################
### TARGETS
################################################################################

all: clean build

clean:
	$(RM) -r $(BUILD_DIR)
	$(RM) $(PROJECT_OUTPUT_FILENAME)

build: build_dirs $(OBJECT_DIRS) $(OBJECT_FILES)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -o $(PROJECT_OUTPUT_FILENAME) $(OBJECT_FILES) $(LDFLAGS) $(CPP_LIBRARIES_LINK) $(CPP_OUTPUT_TYPE) $(TARGET_ARCH)
ifneq ($(CPP_FILES_DIST),)
	$(CP) $(CPP_FILES_DIST) $(DIST_DIR)
endif

build_dirs:
	$(MKDIR) -p $(BUILD_DIR)
	$(MKDIR) -p $(DIST_DIR)

$(OBJECT_DIRS):
	$(MKDIR) -p $@

$(OBJECT_FILES_CXX): $(BUILD_DIR)/%.o: $(SOURCE_DIR)/%
	$(RM) $@.d
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c $(CPP_INCLUDES) -MMD -MF "$@.d" -o $@ $<

$(OBJECT_FILES_C): $(BUILD_DIR)/%.o: $(SOURCE_DIR)/%
	$(RM) $@.d
	$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c $(CPP_INCLUDES) -MMD -MF "$@.d" -o $@ $<

ifneq ($(DEPENDANCY_FILES),)
include $(DEPENDANCY_FILES)
endif
