.PHONY: all clean build install printallvars printenvvars printscriptvars

# TODO: if source file name ends with .cpp, then compile with g++, if ends with .c, then compile with gcc

PROJECTS_HI_PRI=core
PROJECTS_LO_PRI=

################################################################################
### THIS PROJECT OPTIONS
################################################################################

OUTPUTFILENAME=$(PROJECTNAME)

#CPPINCLUDES=../dir1 -I../dir2 -I../dir3
#LINKERLIBOPTS=-L$(DISTDIR) -Ldir1 -Ldir2 -Ldir3 -lLib1 -dynamic -lLib2 -dynamic -lLib3 -dynamic
CPPINCLUDES=../core -isystem $(MINGW_HOME)/include -isystem $(MINGW_HOME)/mingw32/include -isystem $(MINGW_HOME)/lib/gcc/mingw32/4.8.1/include-fixed -isystem $(MINGW_HOME)/lib/gcc/mingw32/4.8.1/include -isystem $(MINGW_HOME)/lib/gcc/mingw32/4.8.1/include/c++ -isystem $(MINGW_HOME)/lib/gcc/mingw32/4.8.1/include/c++/mingw32 -isystem $(MINGW_HOME)/lib/gcc/mingw32/4.8.1/include/c++/backward
LINKERLIBOPTS=-Wl,-rpath . -L${CND_OUTPUTPATH} -lcore -dynamic



################################################################################
### GLOBAL VARIABLES
################################################################################

# system
SYS_ENV_VARS := $(.VARIABLES)
SYS_OS=
SYS_CPU=
ifeq ($(OS),Windows_NT)
  SYS_OS=WIN_UNDEFINED
  SYS_CPU=CPU_UNDEFINED
  ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
    SYS_OS=WIN64
    SYS_CPU=AMD64
  endif
  ifeq ($(PROCESSOR_ARCHITECTURE),x86)
    SYS_OS=WIN32
    SYS_CPU=AMD32
  endif
  ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
    SYS_OS=WIN64
    SYS_CPU=AMD64
  endif
else
  UNAME_S:=$(shell uname -s)
  ifeq ($(UNAME_S),Linux)
    SYS_OS=LINUX
  endif
  ifeq ($(UNAME_S),Darwin)
    SYS_OS=OSX
  endif
  UNAME_P:=$(shell uname -p)
  ifeq ($(UNAME_P),x86_64)
    SYS_CPU=AMD64
  endif
  ifneq ($(filter %86,$(UNAME_P)),)
    SYS_CPU=x86
  endif
  ifneq ($(filter arm%,$(UNAME_P)),)
    SYS_CPU=ARM
  endif
endif
SYS_COMPILER=GCC
ifeq ($(OS),Windows_NT)
	SYS_COMPILER=MinGW
endif
SYS_TARGET=$(SYS_CPU)_$(SYS_OS)_$(SYS_COMPILER)
ifeq ($(CONF),)
  CONF=RELEASE
endif
PLATFORM=$(SYS_TARGET)

# directories and files
BASEDIR:=$(shell cd ..; pwd)
#BASEDIR:=..
SOURCEDIR=$(BASEDIR)/src
#BUILDDIR=$(BASEDIR)/build/$(CONF)/$(PLATFORM)/$(PROJECTNAME)
BUILDDIR=$(BASEDIR)/build/$(CONF)/$(PLATFORM)
DISTDIR=$(BASEDIR)/dist/$(CONF)/$(PLATFORM)
#PROJECTS=$(PROJECTS_HI_PRI) $(filter-out $(PROJECTS_HI_PRI) $(PROJECTS_LO_PRI), $(shell ls $(SOURCEDIR) -1)) $(PROJECTS_LO_PRI)
PROJECTS=$(PROJECTS_HI_PRI) $(filter-out $(PROJECTS_HI_PRI) $(PROJECTS_LO_PRI), $(shell cd $(SOURCEDIR); find . -mindepth 1 -maxdepth 1 -type d | sed 's|^\./||g')) $(PROJECTS_LO_PRI)
#PROJECTSFILES=$(addprefix $(DISTDIR)/, $(PROJECTS))
PROJECTSFILES=$(addsuffix .prj, $(addprefix $(BUILDDIR)/, $(PROJECTS)))
#PROJECTSFILES=$(addprefix $(DISTDIR)/, $(PROJECTS))
PROJECTDIR=
SOURCEFILES=
OBJECTFILES=
ifneq ($(PROJECT),)
  PROJECTDIR=$(SOURCEDIR)/$(PROJECT)
#  SOURCEFILES=$(shell cd $(SOURCEDIR); find . -name *.cpp -o -name *.c | sed 's|^\./||g')
  SOURCEFILES=$(shell find $(PROJECTDIR) -name *.cpp -o -name *.c)
#  OBJECTFILES=$(patsubst %.cpp, %.o, $(SOURCEFILES))
  OBJECTFILES=$(patsubst $(PROJECTDIR)%, $(BUILDDIR)/$(PROJECT)%, $(patsubst %.cpp, %.o, $(SOURCEFILES)))
endif
DEPFILES=$(wildcard $(addsuffix .d, $(OBJECTFILES)))

# build environment
MKDIR=mkdir
CP=cp
GREP=grep
NM=nm
CCADMIN=CCadmin
RANLIB=ranlib
CC=gcc
CCC=g++
CXX=g++
FC=gfortran
AS=as

# C Compiler Flags
CFLAGS=
# CC Compiler Flags
CCFLAGS=
CXXFLAGS=
# Fortran Compiler Flags
FFLAGS=
# Assembler Flags
ASFLAGS=
# Link Libraries and Options
LDLIBSOPTIONS=$(LINKERLIBOPTS)

# clean and build all projects
all: clean build

# clean all projects
clean:
	$(RM) -r $(BUILDDIR)
	$(RM) -r $(DISTDIR)
	$(info cleaning done!!!)

# clean specific project
clean_project:
	$(RM) -r $(BUILDDIR)/$(PROJECT)
	$(RM) $(DISTDIR)/$(PROJECT)
	$(info cleaning done!!!)

# build all projects
build: $(PROJECTSFILES)

# build specific project
#$(DISTDIR)/%: $(addprefix $(SOURCEDIR)/, %)
#%.prj:
#  PROJECTDIR=$(SOURCEDIR)/$(patsubst $(BUILDDIR)/%.prj, %, $@)
#  SOURCEFILES=$(shell find $(SOURCEDIR)/$(patsubst $(BUILDDIR)/%.prj, %, $@) -name *.cpp -o -name *.c)
#  OBJECTFILES=$(patsubst $(SOURCEDIR)/$(patsubst $(BUILDDIR)/%.prj, %, $@)%, $(BUILDDIR)/$(patsubst $(BUILDDIR)/%.prj, %, $@)%, $(patsubst %.cpp, %.o, $(shell find $(SOURCEDIR)/$(patsubst $(BUILDDIR)/%.prj, %, $@) -name *.cpp -o -name *.c)))
#$(PROJECTSFILES): $(BUILDDIR)/%.prj: $(DISTDIR)/%
$(PROJECTSFILES): $(BUILDDIR)/%.prj: $(BUILDDIR)/%/*.o
	$(eval PROJECT=$(patsubst $(BUILDDIR)/%.prj, %, $@))
	$(info target: $@))
	$(info source: $<))
	$(info project: $(PROJECT))
	$(info project source files: $(SOURCEFILES))
	$(info project object files: $(OBJECTFILES))
	$(MKDIR) -p $(DISTDIR)
	$(shell echo ok > $(BUILDDIR)/$(PROJECT).prj)
	$(shell echo ok > $(DISTDIR)/$(PROJECT))
#	$(CCC) -o $(CND_OUTPUTPATH)/$(CND_OUTPUTFILENAME) $(OBJECTFILES) $(LDLIBSOPTIONS) -shared

# build specific file
$(BUILDDIR)/$(PROJECT)/%.o: $(SOURCEDIR)/$(PROJECT)/%.cpp
	$(info target: $@ source: $<)
	$(MKDIR) -p $(BUILDDIR)/$(PROJECT)
#	$(RM) $@.d
	$(shell echo > $@.d)
	$(shell echo ok > $@)
#	$(shell echo ok > $(BUILDDIR)/$(PROJECT)/$@.d)
#	$(shell echo ok > $(BUILDDIR)/$(PROJECT)/$@)
#	$(CCC) -g -DDEBUG -I$(CPPINCLUDES) -MMD -MF "$@.d" -o $@ $<
#	$(COMPILE.cc) -g -DDEBUG -I$(CPPINCLUDES) -MMD -MP -MF "$@.d" -o $(OBJECTDIR)/dynamiclibrarymanager.o dynamiclibrarymanager.cpp

# install
install:

# print all variables
printallvars:
	$(foreach V, $(sort $(.VARIABLES)), $(info $V=$($V)))

# print only environment variables
printenvvars:
	$(foreach V, $(sort $(SYS_ENV_VARS)), $(info $V=$($V)))

# print only this script variables
printscriptvars:
	$(foreach V, $(sort $(.VARIABLES)), $(if $(filter-out environment% default automatic, $(origin $V)), $(info $V=$($V))))

ifneq ($(DEPFILES),)
include $(DEPFILES)
endif
