loader è un srv come gli altri tranne per il fatto che è l'unico che può interfacciarsi interamente 
con il os che l'ha lanciato e quindi l'unico che può lanciare altri processi.

anzi no, anche altri srv di sistema sono ad accesso full come loader (storage, config, log, etc.)
per ciascuno di questi si crea un exe specifico e con un md5 diverso e con nome diverso, in modo 
che tramite os (linux, mac, windows) posso dare a questi i diritti necessari e 
negare tutto a "client.exe" che genera tutti i srv "normali"

gli altri srv possono caricare solo le lib di sunaptos e nient'altro -> nb l'uso della rete è implicitamente 
concesso (purtroppo) perchè è necessaria a "client.exe" (che ha lanciato srv) per fornire la ipc

gli oggetti data (ed ogni altro tipo per cui serva) vengono creati non con un "new" ma con due metodi: 
uno "persistent" che fa la stessa cosa di new ed uno "scoped" che viene memorizzato internamente in modo che 
quando viene chiamato il distruttore, questo fa il "delete" su tutti i puntatori scoped...in pratica fa una 
semplice "garbage collection" e cerca di evitare i più comuni casini fatti con i puntatori gestiti a mano

data ha una componente di definizione struttura "dstruct" (hashata per fare i check) ed una componente di buffer 
virtuale "vbuffer" che gestisce trasparentemente l'allocazione (ram, disco, ecc.), la segmentazione, ecc.

vbuffer è costituito da un campo int per la versione che definisce la struttura successiva

buffer v01 prosegue con un campo long per la lunghezza in bytes (del campo dati), un campo int per il tipo di 
hash/checksum, un campo di lunghezza dipendente dal tipo di hash, un campo int per il tipo di crittografia, 
uno o più campi di lunghezza dipendente dal tipo di crittografia contenente eventuali chiavi o info accessorie, 
infine il campo data

dstruct  è costituito da un campo int per la versione che definisce la struttura successiva

dstruct v01 prosegue  con un campo long per la lunghezza in bytes (del campo struttura), un campo int per il tipo di 
hash/checksum, un campo di lunghezza dipendente dal tipo di hash, un campo int per il tipo di crittografia, 
uno o più campi di lunghezza dipendente dal tipo di crittografia contenente eventuali chiavi o info accessorie, 
infine il campo struttura...in pratica dstruct è un vbuffer con un particolare campo dati (=struttura) fatto così: 
una sequenza di campi che definiscono la struttura...da pensare come, ad es. tipo xml, tipo struct c, ecc.

tipi di dati: 
(elementari, lunghezza fissa)
long
long long
float
double

(elementari, lunghezza variabile)
string (variable size)
void (variable size) (custom and complex type, like image formats, ecc.)

(complessi->lunghezza variabile)
record<type1, type2, ecc.> (ordered, unamed (no field names), not homogeneus)
map<recordtype1, type1> (a multimap is a map with several types as keys)
  a map can accept any possible values as recordkey, or only within a set of recordkeys
  or within any possible combination of sets of fields (es field1:<1,2,3,4,5>, field2:<aa, ab, ac>)
  es. an array of 5 elements is a map with keys as a recordset of int of values 1,2,3,4,5
multimatrix<dims, <size1,..., sizeNdims>, recordtype1> as convenience (map will create too much overhead) is a 
  multidimensional array of record (es. matrix=multimatrix<2,<5,9>,long>)

NB set is implemented as array of void* and not directly supported in vbuffer-dstruct



(containers) (omo-etero, ord-unord, named-unamed, num-of-dimensions, size-of-each-dimension)
es. 
array: omo, ord, unamed, 1-dim, size=num of elements
matrix: omo, ord, unamed, 2-dim, size=m*n (num of rows, cols)
record: etero, ord, named, 1-dim, size=num  of fields
map: omo, ord, unamed, 1-dim, size=undefined/unlimited/irrational (between two elements can fit any element)
set: etero, unord, unamed, 1-dim, size=undef

array/vector<type> (homogeneus)
set (container of any mixed type)
record<type1, type2, ecc.> (ordered and named, not homogeneus)
matrix (multidimensional) is it a particular map (map<int, int, int, ecc.>(typeX))?
map (multidimensional) (map==matrix???)
