SEQUENZE

attualmente:
- elem: char
- seq: insieme di bytes (una seq per contenere un long, ha 4 elem che rappresentano i 4 byte del long: "return *(long*) elems.get()")
- una seq ha un buffer di elems, il tipo che rappresenta (int, float, string, pointer, ecc.) ed un buffer di puntatori a subseqs
- => due indici distinti per sub-elems e sub-seqs
- operator[i] accede ai sotto-elems, operator(i) alle sotto-seqs
- tenere presente che con i cast da/verso attuali, si è implicamente definito lo standard di rappresentazione interna dei numeri e caratteri (int, float, char, ecc.)
- sequence text format (metodi "from_text" e "to_text"):
  $:t:<content as text>:[$:i:<5>;]:[$:f:<5.6>;];
  NB $:f:<5.6>; is a floating point, while $:t:<5.6>; is a text!!!

---

todo:
- smart pointer per le subseqs
- pensare alla "platform independent rappresentation" degli elem e conversione da/verso i tipi elementari del c++, java, ecc. (language and os independent)
- strongly typed seqs
- seq-exec (sequenze eseguibili): ha tipo=seq-exec e contiene il nome di un srv-comando ed i params da passare, il metodo "exec" la esegue (eccezione per altri tipi). 
  pensare ad una shell (con pipe, variabili ambiente, ecc.) per l'utilizzo di queste seq eseguibili.
- seq-dyn (sequenze dinamiche): ha tipo=seq-dyn e contiene un comando o una query ad un'altra seq (analogo dei database). 
  il loro contenuto è determinato dinamicamente, analogo dei db, ma utile anche per le user interfaces (es. status, ecc.)
- pensare all'eventualità di una sequence factory con config di sistema per memorie da usare per seq (ram, hd, net cloud-space) e tramite seq-exec e seq-dyn
  avere delle seq infinite (limitate solo dalle memorie che configuro nel sistema) con indici infiniti
- un container base deve fornire <resize, size, get/[]> tutte le altre funzioni possono essere ricondotte a queste -> template Container per le funzioni avanzate
- container base -> container avanzato -> sequence base -> sequence con legami ad altre sequence -> typed sequence
- sequenza = insieme ordinato di elementi che può formare (un insieme ordinato di) legami con altre sequenze -> in pratica concetto di nodo
- il concetto di sequence astrae dal tipo che rappresenta, una convenzione ci fa interpretare le seq come typed seq => definire quella convenzione
- una volta definite le typed sequence, allora è possibile definire delle operazioni e relazioni su di esse
- sequence: shared pointer di elements + sequences
  sequence::copy/= -> copia tra gli oggetti contenuti dagli shared pointer (*shared_ptr_to_sequence_1 = *shared_ptr_to_sequence_2) elements e sequences
  sequence::link -> copia tra shared pointer (shared_ptr::= -> adds a reference count) elements e sequences
  elements: container di element
  sequences: container di sequence
- containers:
  container 1: get (no index check), size, resize, =, == (only for optimizations)
  container 2: [], !=
  container 3: del, ins, <<
  container 4: reimplement (only get?) with safe index check (exceptions)
- sostituire vector con classe che lo deriva e modifica resize in modo da restituire *this
- seq-type è una normale seq dove i primi elem rappresentano il tipo memorizzato, in quelli successivi il dato 
  con eventuali costruttori/metodi per conversioni da/verso tipi base. 
  questo perchè cosa rappresenta un dato è una convenzione (es. 20 è un numero o il carattere spazio? i numeri come sono codificati? 
  i caratteri come sono codificati? un alieno come codifica il suo alfabeto?)...
  seq è un'astrazione di oggetti dell'universo, seq-type rappresenta gli oggetti secondo le codifiche umane
  NB in teoria potrei anche non usare seq-type ed usare una codifica univoca per tutto (es. tutto testo, anche i numeri, codificato in utf8)
- pensare codifica universale per numeri infiniti (a precisione arbitraria) e testo ad alfabeto infinito
- pensare implementazione per ottimizzare le elaborazioni (in particolare calcoli in virgola mobile a precisione singola)
- internamente posso anche usare i tipi dell'architetture hw su cui lavoro, ma quando esporto i dati o remote invokation, allora converto in modo universale
- utilizzando un container basato su BufferBasicDataTypes anzichè Buffer posso ottimizzare i cast e le operazioni, 
  ma le seq da esso derivate non possono essere infinite (buffer basato su malloc -> blocchi di memoria contigui), 
  quindi devo trovare meccanismo interno per switchare container ed implementare delle policy per passare da uno all'altro, 
  oppure implemento seq per essere infinite e genericamente uniformate e poi se mi servono dati da processare velocemente, 
  allora li memorizzo in formato raw (es. array di float)...no!
  in BufferBasicDataTypes ho il problema delle operazioni tra oggetti perchè dovrei controllare i data type
  Buffer si occupa di fornire memoria infinita da diverse sorgenti e da blocchi non contigui, con il vincolo di fornire almeno il primo blocco abbastanza 
  grande da contenere i basic data types. quindi è buffer che internamente switcha il gestore di memoria (basato su malloc, o a blocchi di malloc, o hd, o altro)
  l'interfaccia di Buffer deve essere estesa
- sequence che contiene service* si deve comportare come uno shared pointer (quando faccio "seq = psrv" inizializzo pure una variabile shared_prt)
- funzioni avanzate containers/sequence:
  ins(index, seq): inserisce una seq (solo elements, no subsequences) ad uno specifico index
  ins(seq): append
  del(index, index): removes range (it's the only container function that really should be replaced for utf8 strings)
  contains(seq):
  find(seq):
  starts(seq):
  ends(seq):
  replace(seq, seq, index, maxoccurrences):
  subsequence(index, index):
  query (su nodi): mentre find è sul container lineare, query è sulla struttura nodo...oppure è meglio unirli? ...per performance, no
- funzioni sequence: de/serialize (elements and subseqs), ins/del/move (more elems subseqs), subset, 
- user defined literals per convertire dati avanzati (es. sequence s = "aaa@aaa.com"_email) facendo un controllo approfondito 
  (eccezioni su errori, o annullamento del dato inserito? es.: s = "aaa@aaa_com"_email -> s = ""), 
  così una volta che ho una seq di tipo email, so che il tipo è corretto (run-time type-safety) a meno di errori hardware o interventi esterni o manomissioni
- struttura sequence e link:
  sequence contiene un insieme ordinato di elements e insieme ordinato di links ad altre sequence (links). 
  links: è un container di shared pointers (shptr) ad altre seq, ma opera trasparentemente come se fosse container di oggetti seq (non puntatori)
  quando inserisco una seq devo sapere se allocata sullo heap o sullo stack, nel primo caso il problema è la gestione dello shptr (chi lo dealloca), 
  nel secondo il lifespan (la deallocazione può avvenire mentre la seq ancora lo linka). 
  si potrebbe usare una sequence factory, ma è una perdita di generalità e funzionalità inutile ed ingiustificata, quindi 
  sequence è essa stessa uno shptr di tutta la struttura dati (elements, seqvec, ecc.) e quando inserisco una seq in un seqvec in realtà 
  creo una nuova seq mediante copia dello shptr interno (link) e questa seq la inserisco in seq vec...
  NB in questo caso seqvec è un semplice vettore di seq perchè lo shptr anzichè stare in seqvec e gestirlo lui, sta nascosto in seq e se lo gestisce da solo. 
  in questo modo seq gestisce trasparentemente il suo lifespan indipendentemente da dove è stata allocata (heap, o stack) ed essendo seqvec dei links, 
  la circolarità dei riferimenti non è un problema (infinite loop) come nel caso della copia, ma NB bisognerà sempre fare attenzione ai loop nella 
  de/serializzazione (o to/from text) delle seq. NB attualmente seq non è un shptr di elems+seqvec, ma shptr di elems + shptr di seqvec (quasi stessa cosa)
  considerazioni sulla pesantezza di seq: 
  in generale ha diversi dati (elems(buffer, size, type), seqvec, shptr, type, ecc.), ma spesso deve rappresentare dati piccoli (int, long, float, double) e 
  se questi diventano tanti (soprattutto se non è possibile aggregarli tutti in una sola seqraw), lo spreco di memoria è immenso ed in ogni caso, 
  la velocità viene molto menomata. strategie: 
  seq deve essere un wrapper di ptr ad elems (es. ptr di long, quindi "seq=*(long*) ptr") che è già veloce ed il compilatore può anche ottimizzare. 
  questo significa che seq deriva da buffer e la classe buffer si occuperà dell'allocazione a blocchi, memoria "infinita", ecc. l'unica garanzia che 
  deve fornire è che il primo blocco di ptr deve garantire di contenere i tipi base in modo da sfruttare l'ottimizzazione ("seq=*(long*) ptr"). 
  altra ottimizzazione è che tutti i dati (tranne elems e cioè ptr) devono essere creati solo quando servono, cioè se seq è un long allora dovrà 
  avere solo ptr allocato per sizeof(long). 
- service in sequence: se inserisco srvptr, allora internamente inizializzo lo shptr e ne divento proprietario, 
  se inserisco shptr di srv, allora ne faccio una copia. in ogni caso il buffer memorizza il ptr. sequence si comporta come uno shptr. 
  in realtà l'inserimento diretto del pointer dovrebbe essere proibito perchè srv va distrutto dal suo loader perchè sebbene la distruzione avvenga sempre 
  tramite delete, il loader che ha creato il srv può avere (ed in genere ha) una gestione delle istanze e risorse associate
- sequence = number, text, vector, tree, shared pointer to service. 
  rimane da renderlo più leggero (difficile) e soprattutto number portabile per rpc ed in/out dati binari -> posso risolvere usando dei miei typedef. 
  in tal modo posso usare i typedef portable_int e portable_float quando serve, ma sequence la posso usare internamente come mi pare
  inoltre potrebbe essere un problema da demandare a rpc e in/out di convertire i dati da una piattaforma ad un'altra (size, endian, etc.)
  rimane il problema dell'implementazione dei metodi to/from text
- sequence << >> come stream su elements, <<= >>= append/remove su subseqs (se puntatore a seq allora link), oppure 
  << >> link/unlink seq, <<= >>= copy/remove seq, & append elements, |^ remove elements
- sequence node contiene subsequences che è uno shared pointer di container (template con funzioni avanzate), 
  poi definisco un tipo sequence come container di sequence node (che offre basic access to elems) così sia elems(sequence) che subseqs sono container avanzati

---

- una sequenza è un oggetto dove dentro posso mettere qualunque cosa con un ordine lineare (1D). 
- cioè è un nodo con diversi oggetti, la presenza di sotto-sequenze da un punto di vista astratto la può far vedere come un grafo. 
- anche un essere umano può essere ricondotto ad un grafo di triplette di codoni (elem base: tripletta di codoni ~ byte ~ mattone ~ ecc.). 
- elem base: byte; seq: insieme ordinato di byte e seq. -> 
- def matematica ricorsiva: seq = <singleton base> OR <insieme ordinato di seq>. in questa def anche il byte è una seq. 
- una seq deve essere castabile da/verso i tipi c++ (int, long, char, string, ecc.)
- le seq sono progettate puramente in modo ricorsivo (costr. e met. ricevono e restituiscono solo seq) con l'aggiunta di cast delle seq base da/verso i tipi elementari. 
- def:
  elem: elemento base essenziale e non scindibile (byte). 
  seq: insieme ordinato di elem e/o seq. 
- indici delle seq sono delle seq essi stessi (per avere delle seq indirizzabili all'infinito! -> pensare bene...)
- seq come array di union (byte, long, float, pointer, ecc.)? -> problemi per le stringhe ascii, ok per unicode
