SEQUENZE

attualmente:
- elem: char
- seq: insieme di bytes (una seq per contenere un long, ha 4 elem che rappresentano i 4 byte del long: "return *(long*) elems.get()")
- una seq ha un buffer di elems, il tipo che rappresenta (int, float, string, pointer, ecc.) ed un buffer di puntatori a subseqs
- => due indici distinti per sub-elems e sub-seqs
- operator[i] accede ai sotto-elems, operator(i) alle sotto-seqs
- tenere presente che con i cast da/verso attuali, si è implicamente definito lo standard di rappresentazione interna dei numeri e caratteri (int, float, char, ecc.)
- sequence text format (metodi "from_text" e "to_text"):
  $:t:<content as text>:[$:i:<5>;]:[$:f:<5.6>;];
  NB $:f:<5.6>; is a floating point, while $:t:<5.6>; is a text!!!
- sequenza = insieme ordinato di elementi che può formare (un insieme ordinato di) legami con altre sequenze -> in pratica concetto di nodo
- sequence = array dinamico + links ad altre sequences
- le sequence sono linkabili (tramite shared pointer interno che punta ai dati)
- cast bdt: double (ieee standard a 8 bytes per tutte le piattaforme), string, pointer (da usare solo sulla stessa macchina, exception on serialization)
- tipi avanzati: standard definiti + custom, gestione tramite funzioni esterne a sequence (core dll per gli standard, nelle varie srv dll per i custom)
- buffer alloca sempre un carattere (fantasma) in più e lo imposta a 0 (zero) sia per semplificare l'utilizzo delle stringhe, sia per rilevare i numeri
- sequence imposta il carattere fantasma a 1 per i numeri. ogni operazione che comporta un resize lo reimposta a zero

---

todo:
- compilation firewall: utile sia per nascondere l'implementazione, sia per aggiornare la dll contenente l'implementazione di sequence senza che gli sviluppatori di 
  services debbano ricompilare e redistribuire i loro srv ad ogni update della core dll
  la classe sequence ha nel suo header solo la forward declaration "class SequenceNode" (nel cpp c'è l'include al SequenceNode header) ed i metodi pubblici di SequenceNode
  l'implementazione di sequence fa un "new SequenceNode" nel costruttore ed un "delete pointer" nel distruttore, i metodi sono tutti forward a SequenceNode
  NB è simile ma diverso al caso di usare la factory + pure abstract class per ovviare alla compatibiltà delle dll tra diversi compilatori
- cast da/verso service
- uniformare buffer e vector, anzi meglio ottimizzare buffer sui char ed una reingegnerizzazione da zero di vector
- pensare alla "platform independent rappresentation" degli elem e conversione da/verso i tipi elementari del c++, java, ecc. (language and os independent)
- strongly typed seqs
- seq-exec (sequenze eseguibili): ha tipo=seq-exec e contiene il nome di un srv-comando ed i params da passare, il metodo "exec" la esegue (eccezione per altri tipi). 
  pensare ad una shell (con pipe, variabili ambiente, ecc.) per l'utilizzo di queste seq eseguibili.
- seq-dyn (sequenze dinamiche): ha tipo=seq-dyn e contiene un comando o una query ad un'altra seq (analogo dei database). 
  il loro contenuto è determinato dinamicamente, analogo dei db, ma utile anche per le user interfaces (es. status, ecc.)
- pensare all'eventualità di una sequence factory con config di sistema per memorie da usare per seq (ram, hd, net cloud-space) e tramite seq-exec e seq-dyn
  avere delle seq infinite (limitate solo dalle memorie che configuro nel sistema) con indici infiniti (feature nascosta dentro buffer ed il nuovo vector)
- un container base deve fornire <resize, size, get/[]> tutte le altre funzioni possono essere ricondotte a queste -> template Container per le funzioni avanzate
- il concetto di sequence astrae dal tipo che rappresenta, una convenzione ci fa interpretare le seq come typed seq => definire quella convenzione
- una volta definite le typed sequence, allora è possibile definire delle operazioni e relazioni su di esse
- seq-type è una normale seq dove i primi elem rappresentano il tipo memorizzato, in quelli successivi il dato 
  con eventuali costruttori/metodi per conversioni da/verso tipi base. 
  questo perchè cosa rappresenta un dato è una convenzione (es. 20 è un numero o il carattere spazio? i numeri come sono codificati? 
  i caratteri come sono codificati? un alieno come codifica il suo alfabeto?)...
  seq è un'astrazione di oggetti dell'universo, seq-type rappresenta gli oggetti secondo le codifiche umane
  NB in teoria potrei anche non usare seq-type ed usare una codifica univoca per tutto (es. tutto testo, anche i numeri, codificato in utf8)
- pensare codifica universale per numeri infiniti (a precisione arbitraria) e testo ad alfabeto infinito
- pensare implementazione per ottimizzare le elaborazioni (in particolare calcoli in virgola mobile a precisione singola)
- internamente posso anche usare i tipi delle architetture hw su cui lavoro, ma quando esporto i dati o remote invokation, allora converto in modo universale
- sequence che contiene service* si deve comportare come uno shared pointer (con le seq linkable è lo shared ptr è gratis...perchè il ptr sta nel buffer che sta nello shared ptr)
- funzioni avanzate containers/sequence:
  ins(index, seq): inserisce una seq (solo elements, no subsequences) ad uno specifico index
  ins(seq): append
  del(index, index): removes range (it's the only container function that really should be replaced for utf8 strings)
  contains(seq):
  find(seq):
  starts(seq):
  ends(seq):
  replace(seq, seq, index, maxoccurrences):
  subsequence(index, index):
  query (su nodi): mentre find è sul container lineare, query è sulla struttura nodo...oppure è meglio unirli? ...per performance, no
- funzioni sequence: de/serialize (elements and subseqs), ins/del/move (more elems subseqs), subset, 
- user defined literals per convertire dati avanzati (es. sequence s = "aaa@aaa.com"_email) facendo un controllo approfondito 
  (eccezioni su errori, o annullamento del dato inserito? es.: s = "aaa@aaa_com"_email -> s = ""), 
  così una volta che ho una seq di tipo email, so che il tipo è corretto (run-time type-safety) a meno di errori hardware o interventi esterni o manomissioni
- sequence = number, text, vector, tree, shared pointer to service. 
  rimane da renderlo più leggero (difficile) e soprattutto number portabile per rpc ed in/out dati binari -> posso risolvere usando dei miei typedef. 
  in tal modo posso usare i typedef portable_int e portable_float quando serve, ma sequence la posso usare internamente come mi pare
  inoltre potrebbe essere un problema da demandare a rpc e in/out di convertire i dati da una piattaforma ad un'altra (size, endian, etc.)
  rimane il problema dell'implementazione dei metodi to/from text
- << link, a>>b move into (extract first n=size(b) elems from a and equals/fill to b), <<= copy, a>>=b (copy first n=size(b) elems from a and equals/fill to b). 
  NB << links only persistent objects that support linking (by means ofshared pointers), otherwise "performs a copy"...meaning that 
  a<<(long)b -> a<<Container((long)b) ...that is non linkable objects are transformed to Container by copy and then linked to the "temporary" Container((long)b), 
  so that << should not specialize to non linkable objects, conversions are performed by the compiler. 
  this is valid for Container only, Buffer will only copy/serialize other buffers, because << have a different meaning: 
  Buffer a << Buffer b -> append elements
  Container a << Container b -> append b as 1 element object to a
  ...that is << for elements is different from << for links
- make thread safe version by using transactions for modify -> 
  modify: if not transaction active, begin transaction, modify, end transaction
  read: wait until transaction end, read
- typed sequences: posso inserire deglio oggetti type che fanno il check e che estraggono degli elementi complessi (cioè [] wrappa [] del type) e ridefinisce to_text()
  come ad es. utf-8 che ha i caratteri di lunghezza variabile. posso aggiungere diversi type es. utf-8 + email/xml/ecc. ma alcuni potrebbero essere incompatibili -> 
  pensare bene, magari solo un tipo che deriva da altri tipi es. xml:utf-8 ...ma xml come viene mappato?
  questa modalità può andare bene solo se trovo un modo di generalizzare i type e renderli serializzabili -> problemi: 
  rappresentare la struttura (il grafo) di basic types (se fissa, si potrebbe replicare la struttura contenente solo il valore di basic data type, se condizionale -> mess), 
  rappresentare i controlli di validazione (replicare la struttura con regex per ogni sequence??? => no check for undefined (es.utf-8)), 
  definire il metodo di estrazione di elementi complessi
  quindi type = sequence<seq di bdt, seq di regex, ???TBD???>
- anzi sequence senza type avanzati, ma usare delle convenzioni e classi di supporto:
  funzione che compara due sequence, una dati ed un'altra template (con dati nulli) e controlla se struttura a tipi sono uguali
  funzione che legge il valore (root) di una sequence, se è long lo confronta con una enum di tipi standardizzati, altrimenti deve essere char con il nome del tipo custom
  funzioni che dato il tipo controllano la struttura e poi il contenuto
  per i tipi standardizzati vengono fornite funzioni nella core dll, per i tipi non standard è la dll del srv che ha al suo interno (pubbliche?) le funzioni di validazione

---

- una sequenza è un oggetto dove dentro posso mettere qualunque cosa con un ordine lineare (1D). 
- cioè è un nodo con diversi oggetti, la presenza di sotto-sequenze da un punto di vista astratto la può far vedere come un grafo. 
- anche un essere umano può essere ricondotto ad un grafo di triplette di codoni (elem base: tripletta di codoni ~ byte ~ mattone ~ ecc.). 
- elem base: byte; seq: insieme ordinato di byte e seq. -> 
- def matematica ricorsiva: seq = <singleton base> OR <insieme ordinato di seq>. in questa def anche il byte è una seq. 
- una seq deve essere castabile da/verso i tipi c++ (int, long, char, string, ecc.)
- le seq sono progettate puramente in modo ricorsivo (costr. e met. ricevono e restituiscono solo seq) con l'aggiunta di cast delle seq base da/verso i tipi elementari. 
- def:
  elem: elemento base essenziale e non scindibile (byte). 
  seq: insieme ordinato di elem e/o seq. 
- indici delle seq sono delle seq essi stessi (per avere delle seq indirizzabili all'infinito! -> pensare bene...)
- seq come array di union (byte, long, float, pointer, ecc.)? -> problemi per le stringhe ascii, ok per unicode
