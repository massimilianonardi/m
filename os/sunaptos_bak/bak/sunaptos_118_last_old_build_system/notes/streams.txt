STREAMS

attualmente:
- stream (s3m): srv con un'interfaccia t.c. consenta di passare flussi di info da processare
  NB sequence è l'informazione usata per le funzioni, processata per intero ad ogni chiamata, può essere arbitrariamente grande, ma determinabilmente finita
  NB uno stream è un flusso continuo di sequence, processato a pacchetto o a blocchi, teoricamente infinita e di cui a priori non si conosce inizio e/o fine

- stream packet: =data, eventuali info del paccketto necessarie alla sincronizzazione, alla multicanalità, ecc. sono rimandate ad altri sottostandard. 
  questo per non aggiungere overhead inutile alla definizione base (es. come udp e tcp)

- stream iface: unsynchronized, thread safe, fastest, data rece issues are delegated, no jitter, throughput not guarranteed
  subscribe: attaches specified output stream (os3m) to this input stream. on new input available this calls os3m.write(packet)
  unsubscribe: removes specified os3m from attached list
  write: this os3m receives packet from calling input stream (is3m)

- stream base class: nella core library, si implementa una classe non astratta con i meccanismi suddetti. 
  i srv che vogliono comportarsi come stream, possono derivare la stream base in modo da avere un comportamento certificato e robusto. 
  gli is3m (generano loro lo stream), alla fine della generazione dei pacchetti, richiamono il loro "write"
  gli os3m/ios3m (processano un is3m), reimplementano "write" ed alla fine richiamano "stream::write(processed_packet)"
  NB il tempo di elaborazione di un pacchetto è dato dalla somma dei tempi dei "write" di tutti gli s3m connessi in serie
  NB i metodi "write" vanno progettati pensando alle performance estreme
  NB l'uso delle code e thread di elaborazione per velocizzare write, in realtà rallenterebbe tutto per via della sincronizzazione di scrittura nella coda
  NB ogni stream consente molti input e molti output

- stream iface (alternative): synchronized, thread safe, slow, jitter on flood, throughput guarranteed
  available:                      blocking, returns true when buffer>0, waits when buffer=0, returns false if params!=seq() and buffer=0
  available (faster alternative): blocking, returns new packet when arrives, returns seq() if params!=seq() and buffer=0
  read: not blocking, returns oldest packet in buffer with link to next packet when buffer>0, returns seq() when buffer=0
  write: writes packet synchronously into the circular queue removing the oldest packet

- gli stream sono monodirezionali e basta, buffered (eventualmente buffer=1packet).
  se fossero bidirezionali vuol dire che: (1) non hanno bisogno di un buffer perchè poggiano su una memoria (es. file) (2) sono limitati (start, end) (3) stream=fiume
  un fiume non torna indietro!

--------------------------------------------------------------------------------

- streaming -> serializzazione e trasmissione di sequence
- per gli stream c'è il problema di entrare in synch con la trasmissione (all'inizio leggo una seq di cui la trasmissione è precedentemente iniziata)
  (caso in cui uno stream trasmette indipendentemente e poi un altro stream si attacca per leggere la trasmissione)
- uno stream -> una sequenza di sequenze (pacchetti). ciascuna di queste può incapsulare più seq (canali)
- definire (quando necessaria) una base tempo per il synch? ...canali con diversa base tempo?
- modello simile alle socket

ATTENZIONE!!! la velocità di trasferimento dello stream deve essere scelta tale da consentire che tutti i canali 
vengano trasmessi almeno alla propria velocità ed inoltre deve consentire un mux che anche se dinamico quando i 
canali hanno velocità non multiple tra loro, che in ogni momento non metta in competizione due canali (ad es se 
alcuni canali hanno campioni con un gran numero di bit potrebbe facilmente capitare che se metto un pacchetto di 
un certo canale poi un altro canale arriva in ritardo o viceversa), inoltre la velocità di trasferimento implica 
anche il delay minimo che impone il primo campione...
ios quindi dovrebbe essere legato al trasporto fisico il quale deve poter garantire una velocità minima, una certezza 
ed una correttezza del trasferimento...attualmente nei pc non esiste tutto ciò...è tutto asincrono e si spera che 
arrivi in tempo...per questo nacquero gli os real-time...ora è vero che io non posso garantire niente perchè in genere 
non starò su os real-time, ma lo gestisco lo stesso perchè sarà una parte importante che si riflette sul hw e sulle 
semplificazioni e standardizzazioni che implicherebbe in hw compliant con gli standard sunaptos...

signal o stream: flusso di dati unidirezionale asincrono o sincrono con caratteristiche (temporizzazione, dimensione 
campione e codifica) prefissate sul quale viaggiano sia pacchetti dati che pacchetti info su richiesta (???) o 
temporizzati...per i segnali sincroni serve la freq di campionamento mentre per i segnali asincroni il max-delay 
accettabile...lo stream si occupa di impacchettare e ricostruire l'informazione durante la trasmissione (tipo il tcp) 
ovvero che i pacchetti arrivino nell'ordine giusto (quando richiesto), mentre nel caso asincrono (oggetti di 
dimensioni anche molto variabili) è sicuramente richiesto che i pacchetti siano riordinati quando un oggetto è 
suddiviso in più pacchetti...
in pratica sullo stream passano "oggetti" che possono venire o meno raggruppati ed ordinati ogni oggetto viene 
impacchettato (anche se un oggetto entra in un pacchetto, mentre se ad un oggetto corrispondono più pacchetti il 
raggruppamento ed ordinamento è obbligato!) l'header del pacchetto contiene info sul pacchetto indispensabili allo 
spacchettamento, una volta spacchettato l'oggetto ha come header la codifica (cioè che cosa è, e come è memorizzato...
ad es. campione video rgb, campione audio pcm16, buffer di sequenza complessa, ecc.)...
NB queste codifiche devono essere più generiche possibile...pensare bene!!! ...ad esempio potrebbero essere: sequenza 
(ovvero ogni tipo di oggetto), update di substruttura di sequenza (ovvero pezzo di sequenza che è cambiato con 
associato un id per sapere a quale root seq fa riferimento...), campione completo di un flusso continuo (sincrono o 
asincrono es. audio/video/mouse/tastiera/ecc.) questo non è altro che una seq con dentro anche la codifica del 
campione...

