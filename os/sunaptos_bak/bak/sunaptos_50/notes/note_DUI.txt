DUI: Data User Interface

- c'è un "root canvas" che rappresenta la "window" o lo "screen" principale dentro cui disegnare.
  questo può essere una finestra del os o un desktop del os.
  insomma il root canvas è quello più esterno che si interfaccia con un sistema diverso da DUI.
  nella versione finale DUI è un componente del os (il desktop manager, cioè tipo explorer, kde, gnome, xfce, ecc.).

- nella versione base il root canvas identifica un'applicazione e la sua finestra principale restituita dal os.

- in futuro si baserà su opengl per sfruttare l'accelerazione della scheda grafica.

- in futuro si presterà ad essere un framework di GUI per i giochi (tipo cegui).

- ogni canvas è identificato da un layout con diverse proprietà che definiscono come gestire gli elementi presenti.
  ogni elemento presente in un canvas può essere un sotto canvas o un elemento gui base.
  in pratica il root canvas è un albero di canvas.

- il "canvas tree" non è fisso a runtime! ad es cambiando la visualizzazione da "icone" a "detailed", si 
  distrugge il ramo "icone" e si crea un ramo "detailed"; altro es una qualunque app MDI (ad es notepad++).
  l'importante è che siano definiti tutti i possibili rami nei punti di aggancio.

- l'associazione tra canvas e le parti elementari del CDT (vedi dopo) è un'operazione elaborata poichè gli elementi 
  grafici sono di solito studiati per una classe di dati (ad es tabelle) ma che non hanno struttura esattamente identica 
  in ogni applicazione (ad es diverso numero di colonne).

- CDT (complex data tree) è una struttura dati autodefinita, cioè contiene al suo interno sia la definizione 
  della specifica struttura, che i dati.
  CDT è composta da un CDN (complex data node) detto "root data node" (RDN).
  ogni CDN contiene un CDS (complex data set) ed un set NON ordinato di 
  "named nodes" (oppure forse è meglio che sia una lista/vettore ordinato di nodi).
  cioè ogni CDN = (cds + nodes-vector).
  ogni app può avere uno o più "root data nodes".
  averne più di uno permette di avere gui dinamiche dove si possono creare innumerevoli canvas (ad es una MDI app 
  che ha più sottofinestre tipo notepad++ non definite a priori)

- CDS è l'insieme di un container di elementi omogenei e la definizione della struttra del container.
  cioè CDS = (cds-specification + cds-container-with-data).
  cds-specification = (elementary-cell-record-type-specification + hypercube-container-specification).
  cell-spec = (num-of-cell-fields + vector-of-field-type-id).
  hypercube-spec = (num-of-hcube-coordinates + vector-of-each-coord-max-num-elems).
  cioè l'ipercubo per ogni coordinata può avere un numero fisso di elementi (ad es un num fisso di 
  righe o colonne) oppure può essere variabile (cioè tipo una lista dinamica).
  in pratica CDS-Spec = (n, (T1, ..., Tn), c, (D1, ..., Dc)).
  se Di == 0 allora la coordinata "i" ha un numero variabile di elementi, altrimenti ha un numero 
  fisso di elementi pari a Di.
  cds-spec sono FISSE A RUNTIME, forse solo i vari Di possono essere variati a runtime (anzi no nemmeno quelli!!!).

- CDSST (cds specification tree) è il cds senza dati ed è il doc da pubblicare quando uno sviluppatore 
  fa un'applicazione "console" cioè fa la parte senza gui, rilasciando il cdsst (come file xml o altro) 
  chiunque altro (o lui stesso) è in grado di sviluppare una dui.
  ovviamente un documento cdsst deve riportare anche info aggiuntive, cioè i nomi dei campi (N1, ...,Nn) 
  e relative descrizioni ALMENO (OBBLIGATORIO IN DUI)! una doc aggiuntiva non obbligatoria spiega cosa 
  significano i dati, come vengono generati, ecc. in pratica descrive come funziona il comando che genera il CDT.
  il cdsst è necessariamente e logicamente anche embedded nel codice dell'applicazione, dove per ogni CDN ci 
  sarà associato qualcosa (percorso del filesystem, query sql, ecc.) che riempie il cds con i dati.

- ogni CDT ha in se l'hash-code (CDTHS) del suo CDSST che serve per distunguerlo univocamente da ogni altro.

- BGE (base gui element) è un canvas in grado di renderizzare e gestire UN CAMPO DI UNA CELLA (di un tipo 
  specifico) E BASTA!

- AGE (advanced gui element) è un canvas in grado di renderizzare e gestire un CDS con uno specifico cds-spec.

- CGE (complex gui element) è un canvas in grado di renderizzare e gestire un CDN con uno specifico CDSST.

- le ultime tre definizioni sono forse superflue (ne basterebbe una), ma chiariscono meglio.

- ogni GE (gui element) si può sottoscrivere alla ricezione di uno o più "input events".
  gli input events possono essere di "qualunque" tipo di quelli gestiti dal DUI framework.
  in pratica sicuramente mouse e tastiera, ma potrebbe essere anche la webcam, un ricevitore ad infrarossi, ecc.
  DUI per il momento gestisce solo mouse e tastiera, ma l'interfaccia di gestione eventi deve prevedere qualunque cosa.
  vedere MIGAF per gli input events.

- ogni GE in base ad ogni specifico input, può prendere delle azioni tra cui sparare eventi al canvas padre.
  la lista delle possibili azioni gestibili da DUI è predefinita -> PENSARE BENE A QUESTA LISTA!!!!!!!!!!!!

- azioni per GE: 
  * move, resize, change z-order, destroy, create a canvas branch; NB il "create" ha bisogno di specificare un RDN o un CDN 
    cioè si può basare su una parte di dati già esistente di partenza, ma non visualizzata (oppure già visualizzata ma in maniera diversa), 
    oppure essere il frutto di un nuovo albero dati appena creato (vedere il discorso delle MDI app nella def di CDT); 
    NB un CDT/CDN/RDN può essere assegnato a due canvas distinti e non ci sono problemi poichè i dati sono in singola copia e 
    le visualizzazioni possono mantenersi sincronizzate (se si vuole) mediante il sistema di notifica di modifica dati.
  * execute a dui-command -> TODO: pensare meglio (problema su come comporre il cdt-params (vedi dopo))
  * manage dui-command pipes -> TODO: pensare meglio
  * fire specific event to specific canvas -> TODO: pensare meglio
  * change a canvas rendering resources (image, colour, text, etc.) -> TODO: pensare meglio (è il fulcro di tutto! non deve essere codice c/c++)

- una DUI app può partire lanciando subito uno o più DUI commands (ad es dir c:\) e/o lanciare successivamente 
  altri comandi a runtime eventualmente non definiti a priori, purchè insieme al comando si lanci la relativa 
  DUI associata (che sia in grado di gestire il relativo CDT) ma nel contesto della DUI che l'ha lanciata.
  anzi NO, non è necessario lanciare la relativa DUI (serve solo se si vuole monitorare lo status), quello che serve 
  è che la DUI che lancia un comando ne deve conoscere il CDT-param (i parametri), il CDT-in (il formato dello 
  stream dati in ingresso) ed il CDT-out (il formato dello stream dati in uscita).
  questa architettura consente di fare l'analogo del "pipe" da linea di comando sotto linux.
  NB più si riescono a definire dei cdt-in/cdt-out standard in DUI, più si riesce a trarre vantaggio da questa architettura.

- nella prima versione il rendering, move, resize, z-order, create, destroy dei canvas (finestre) è gestito dal os, 
  successivamente sarà gestito tutto da DUI e quindi l'output potrà essere la memoria video della scheda grafica, 
  oppure qualsiasi altra cosa (ad es uno stream su una connessione di rete).

- CMD (command) è un eseguibile che esegue un processo finito che a parte segnali di cancel/abort/terminate non accetta 
  segnali/comandi/interazione se non quelle per cui lui stesso ne fa richiesta (ad es il comndo delete ti può chiedere 
  se sei sicuro quando un file è in sola lettura).
  in realtà cancel/abort/terminate è una cosa gestita a livello di sistema non da DUI direttamente.
  un cmd può restituire dei cdt alla dui sia durante l'esecuzione (status/monitor/stream processing) che alla fine.
  ANZI NO LO STREAM PROCESSING NO! PERCHè è QUELLO CHE FANNO I SRV!!!
  un cmd accetta: cdt-config, cdt-profile, cdt-params (NO cdt-data perchè sarebbe uno stream processing che lo fanno i srv) 
  e restituisce: CDT-STATUSi (ad es una dir) dove "i" dipende da config/profile/params (ad es delete può restituire il 
  numero dei files cancellati o la lista dei files cancellati).
  NB in profile ci sono tutte le opzioni del cmd (ad es "-la") mentre in param, gli oggetti su cui agire (ad es un path del filesystem).
  un canvas se invoca un cmd con config/profile fissi, sa quale cdt-status gli arriva e quindi quale canvas-branch invocare, 
  altrimenti usa l'hash CDTHS per scegliere il canvas-branch corretto.
  un cmd prevede dei CDT-USER-Qi e dei CDT-USER-Aj per l'interazione con l'utente.
  di solito le Q sono molte di più delle A, però ad ogni Q è specificato quale A va associato.
  nel framework sono definiti dei A di sistema (Y/N/CANCEL, Y/Y-ALL/N/N-ALL, 1/2/3, 1/2/3/4, ecc.) che sono generici e quindi 
  riutilizzabili, altri invece specifici del cmd (ad es "/home"/"/root"/custom-path) dove la risposta può essere compicata.
  NB le opzioni "Y/N/CANCEL" e relativo testo localizzato (o ad es i vari path tra cui scegliere) stanno in Q, mentre A di 
  solito è semplicemente un intero che specifica quale opzione è stata scelta; A di solito è compicato solo quando 
  richiede un input particolare da parte dell'utente (ad es un path da specificare sul momento, password, ecc.).
  NB PENSARE A COME EVITARE DUI CON CUI FREGARE LE PASSWORD (probabilmente il dialog relativo va embedded e criptato nell'app).

- SRV (service) è un eseguibile che esegue uno o più processi in loop e non termina se non per espresso comando; 
  accetta comandi...
  PENSARE SUCCESSIVAMENTE. I VERI SRV NON SERVONO ORA, ORA SERVONO LE APP CHE ANCHE LORO COME I SRV TERMINANO SOLO 
  A COMANDO, MA IN REALTà SONO SOLO DEI LOOP DI ATTESA EVENTI INPUT. UN'APP è SOLO UN INSIEME DI COMANDI LANCIATI 
  ASINCRONAMENTE DURANTE IL LOOP DI ATTESA EVENTI INPUT.
  ANZI NO!!! AD ES EMULE è UN INSIEME DI SERVIZI IN SENSO STRETTO, QUINDI BISOGNA PENSARE AI SRV ORA!
  quindi dal lato DUI un srv accetta solo i comandi start/stop/pause/resume, mentre da altri cmd/srv può accettare 
  altri comandi.

- ogni BGE ha un suo specifico CDN-Resources (o forse meglio cdn-params) che determina tutto il suo rendering.

- GraphicBox è il più semplice BGE ed è costituito da:
  * relative position
  * size
  * background color
  * image with transparency
  * overall transparency

- GraphicTextBox è il più versatile BGE che consente di fare quasi tutto ed è costituito da:
  * relative position
  * size
  * background color
  * background image with transparency
  * text string
  * text color
  * text font
  * text size
  * text style (normale, corsivo, grassetto, corsivo+grassetto) NB l'underline si ottiene con l'immagine di overlay
  * text transparency
  * overlay image with transparency
  * overall transparency

- le risorse (images e text strings) possono essere preloaded (parte della dui) o caricate dinamicamente da CDN.

- il GraphicTextBox potrebbe anche essere implementato come un GraphicBox che carica l'immagine da un comando che fa il font-rendering.

- un "Canvas" è fatto così:
  * un bge.
  * cdn-resources (creato e gestito dalla dui: icone, stringhe, colori, ecc.).
  * cdn-data (risultato dall'esecuzione di qualche cmd, NB ha una struttura precisa e definita e non dipende dal particolare CMD 
              esso viene ottenuto dalla mappatura fatta in DUI tra il cdn-out del cmd verso il cdn-data dello specifico canvas).
  * <scripts>: lista di "script" che mappano parti di cdn-resources e cdn-data in cdn-params per il bge/canvas che c'è sotto; 
               questi script determinano da fatto delle api avanzate, cioè questi script trasformano un semplice "TextButton" 
               di win 95 in un bottone avanzato di xp che reagisce al mouse evidenziandosi e colorandosi,cambiando testo ecc. 
               il fatto di poter attingere sia da risorse predefinite dalla app (o skin), sia da dati dinamici, rende di fatto 
               infinite possibilità, sia perchè ogni script è una nuova funzionalità o proprietà, sia perchè cdn-data è 
               estremamente dinamico poichè può provenire da qualunque parte.
               in pratica questi non sono veri script, ma MAPPE! quindi non implicano nessun codice e sono estremamente veloci 
               a runtime (NB forse potrebbe essere necessaria una minima conversione di dati).

- un "Layout Element" è fatto così:
  * un canvas.
  * cdn-context-props (position, size) specific della periferica di output e non convenientemente astraibili (es. position potrebbe 
    essere riportato in audio, ma solo un punto e sarebbe comunque una forzatura).
  * cdn-props (z-order, active/inactive, focus, iconized, maximized, etc.) proprietà astratte e riportabili a "qualunque" periferica di output.
  * eventuale CMD o SRV con:
    + script-map-get-params.
    + modalità di update del cdn-out: no-update, timed-interval (dui manually queries cmd/srv each time), 
                                      upon-data-change (solo per i srv e gestito dai srv stessi) con 2 modalità: full cdn, o solo updated branches.
    + script-get-profile/config -> TODO: pensare meglio, perchè i profili e le config dovrebbero essere gestite a livello app.
    + script-map per mappare lo specifico cdn-out del cmd/srv in questione vesro il cdn-data del Canvas di questo layout element.

- "Input Events":
  TODO: PENSARE BENE!!! bisogna astrarre gli eventi dal tipo di input e generare cose tipo EVT_EXECUTE, EVT_OK, ecc; si mappano in base cdn-props dei layout elements.

--------------------------------------------------------------------

RIASSUNTO:
----------
parte l'eseguibile "dui" con parametro il nome/file della dui da lanciare (xml)
root canvas branch
possible sub-canvas-branches
un canvas esiste per gestire altri canvas (quindi senza cdt), o per gestire un comando ad esso associato e relativo cdt
BGE corrisponde ad una lib/dll specifica per il os, mentre AGE e CGE sono costruiti a partire da vari BGE
