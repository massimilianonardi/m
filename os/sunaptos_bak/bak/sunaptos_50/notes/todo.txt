service macro for defining interface methods add definition of const bool specifing that suc method is implemented...maybe a method in base class overridden
static const bool is_ ## method_name ## _implemented = true; \
inline static const bool is_ ## method_name ## _implemented(){return true;}; \
user interface <in, elems, out> + runtime bindings + elems structure. def inputs for elems (eg edit, click, select, etc.), def outputs of elems (eg render, play, etc.)
closing external srv may be automatic at ServiceClient object destruction when exiting scope, or manual like pointers
sequence type based on elem buffer, sequence structure based on elem buffer and on each subseq with order
support scripting from command line, or create a specific service for scripting support.
exception on configurable output/logger, rethink whole structure particularly based on sequence
check exception print and return (print after catch or before end? if i return print is not done)
service client/server proper dispatch of exceptions
srvs and ifaces methods have a ufname (universal full name) and in practise omitted part is identified by current context (like cd and relative paths ./, ../, etc.)
system namespace and modules namespaces parametric
system log based on streamoutput with loglevel etc.
system debug based on system log?
revise streams and operators on Service
enforce const methods and enforce passing variables by const reference to allow temporaries construction
cross platform system gui class as external srv
Object with a to_string() virtual method

sequence text format:
$:t:<content as text>:[$:i:<5>;]:[$:f:<5.6>;];
NB $:f:<5.6>; is a floating point, while $:t:<5.6>; is a text!!!

definition of the ufn standard:
- path separator = . (eg. com.google.srv1)
- every string between two dots is a name of any possible thing in every possible universe: eg. local.srv1, me.mycat, phylosophy.socrates, etc.
- blanks are substituted to/from "_" by ui
- absolute name (root = /, root level = 0): /name_at_level_1.name_at_level_2
- relative path (current context path = .): .name1.name2
- cannot exist a terminator because each node can generate another (decide if terminating with dot . is facoltative, forbidden, required)
- / is the root of the name server not a real absolute because if anyone in some universe can have another name server
- assuming at some point many dns exists, they may accept to be governed by another master dns (like internet) so /srv1 -> /ns1.srv1
- rules must be defined for dns grouping...the simplest: never use /, but . instead -> absolute paths are only theorical and never accepted! -> beginning . can be omitted
- not every node is a name server, but only those who can create nodes
- every node is represented by a sequence
- srv node is the reference to the srv object, method node is the sequence it returns as result of a runtime invokation of the method on a specific params seuence
- instead the method node after a srv class node is the name of the method
- => methods must be named like the following: iface1.method1 => invokation of an iface method on a srv instance obj becomes: srv.iface1.method1 -> implement as macros
- => ifaces as macros => i can avoid extra classes and user defined "f" by macros defines wich ifaces or specific methods the user is implementing
- define set of valid characters for names
- NB since paths may have closed loops and thus are not trees, it makes no sense the .. (upper directory) resolution because you may have arrived from many nodes
- NB instead of the .. you have to specify the "previous" node as the next in name, eg. if n1->n2 then to specify the previous n1 from n2 is n2.n1 (you have to name it!)
- path to srv classes (physical dlls): eg. local.srv_name
- path to srv instances is the instantiation path: eg. local.srv1.srv2.srv1

services default general methods:
- listen
- accept
- connect
- put
- update
- convert
- map
- sort
- order
- begin
- end
- new
- delete
- edit
- clear
- reset
- dispatch
- fill
- generate
- merge
- save
- undo
- position
- type
- set_type



inlcude rules:

- header: minimal self sufficient to compile
-- standard library headers
-- system os specific headers
-- third party libraries
-- this project minimal self sufficient headers

- body: minimal self sufficient to compile
-- first of all its own header to confirm the self sufficiency at compile time
-- standard library headers
-- system os specific headers
-- third party libraries
-- this project minimal self sufficient headers
