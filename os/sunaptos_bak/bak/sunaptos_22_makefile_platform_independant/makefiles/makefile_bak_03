#
#  There exist several targets which are by default empty and which can be 
#  used for execution of your targets. These targets are usually executed 
#  before and after some main targets. They are: 
#
#     .build-pre:              called before 'build' target
#     .build-post:             called after 'build' target
#     .clean-pre:              called before 'clean' target
#     .clean-post:             called after 'clean' target
#     .clobber-pre:            called before 'clobber' target
#     .clobber-post:           called after 'clobber' target
#     .all-pre:                called before 'all' target
#     .all-post:               called after 'all' target
#     .help-pre:               called before 'help' target
#     .help-post:              called after 'help' target
#
#  Targets beginning with '.' are not intended to be called on their own.
#
#  Main targets can be executed directly, and they are:
#  
#     build                    build a specific configuration
#     clean                    remove built files from a configuration
#     clobber                  remove all built files
#     all                      build all configurations
#     help                     print help mesage
#  
#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and
#  .help-impl are implemented in nbproject/makefile-impl.mk.
#
#  Available make variables:
#
#     CND_BASEDIR                base directory for relative paths
#     CND_DISTDIR                default top distribution directory (build artifacts)
#     CND_BUILDDIR               default top build directory (object files, ...)
#     CONF                       name of current configuration
#     CND_PLATFORM_${CONF}       platform name (current configuration)
#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)
#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)
#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)
#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)
#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)
#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)
#
# NOCDDL

################################################################################
### PARAMETRIC PROJECT OPTIONS
################################################################################

#ProjectOptions/C++Compiler/IncludeDirectories: ${CND_CPPINCLUDES}
#ProjectOptions/Linker/Output: ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}
#ProjectOptions/Linker/Libraries: ${CND_LINKERLIBOPTS}



################################################################################
### WHOLE PROJECT OPTIONS
################################################################################

CND_PROJECTBIN=../_bin
CND_BUILDDIR=${CND_PROJECTBIN}/build/${CND_PROJECTNAME}
CND_DISTDIR=${CND_PROJECTBIN}/dist
#CND_BUILDDIR=${CND_BASEDIR}/../build/${CND_PROJECTNAME}
#CND_DISTDIR=${CND_BASEDIR}/../dist
CND_OUTPUTPATH=${CND_DISTDIR}/${CND_CONF}/${CND_PLATFORM}



################################################################################
### THIS PROJECT OPTIONS
################################################################################

CND_PROJECTNAME=process
CND_OUTPUTFILENAME=${CND_PROJECTNAME}

#CND_CPPINCLUDES=../dir1 -I../dir2 -I../dir3
CND_CPPINCLUDES=../core
#CND_LINKERLIBOPTS=-L${CND_OUTPUTPATH} -Ldir1 -Ldir2 -Ldir3 -lLib1 -dynamic -lLib2 -dynamic -lLib3 -dynamic
CND_LINKERLIBOPTS=-Wl,-rpath . -L${CND_OUTPUTPATH} -lcore -dynamic



################################################################################
### MAKE SCRIPT
################################################################################

# Variables
CND_BASEDIR=`pwd`
CND_BUILDDIR=build
CND_DISTDIR=dist
# Debug configuration
CND_PLATFORM_Debug=MinGW-Windows
CND_ARTIFACT_DIR_Debug=${CND_OUTPUTPATH}
CND_ARTIFACT_NAME_Debug=${CND_OUTPUTFILENAME}
CND_ARTIFACT_PATH_Debug=${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}
CND_PACKAGE_DIR_Debug=${CND_OUTPUTPATH}
CND_PACKAGE_NAME_Debug=${CND_OUTPUTFILENAME}.tar
CND_PACKAGE_PATH_Debug=${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}.tar
# Release configuration
CND_PLATFORM_Release=MinGW-Windows
CND_ARTIFACT_DIR_Release=${CND_OUTPUTPATH}
CND_ARTIFACT_NAME_Release=${CND_OUTPUTFILENAME}
CND_ARTIFACT_PATH_Release=${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}
CND_PACKAGE_DIR_Release=${CND_OUTPUTPATH}
CND_PACKAGE_NAME_Release=${CND_OUTPUTFILENAME}.tar
CND_PACKAGE_PATH_Release=${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}.tar

# Environment 
MKDIR=mkdir
CP=cp
CCADMIN=CCadmin

# Environment
MKDIR=mkdir
CP=cp
GREP=grep
NM=nm
CCADMIN=CCadmin
RANLIB=ranlib
CC=gcc
CCC=g++
CXX=g++
FC=gfortran
AS=as

# Macros
CND_PLATFORM=MinGW-Windows
CND_DLIB_EXT=dll
CND_CONF=Debug
CND_DISTDIR=dist
CND_BUILDDIR=build

# Object Directory
OBJECTDIR=${CND_BUILDDIR}/${CND_CONF}/${CND_PLATFORM}

# Object Files
OBJECTFILES= \
	${OBJECTDIR}/main.o

SOURCEFILES:=$(shell find -iname '*.cpp')
OBJECTFILES=$(SOURCEFILES:%.cpp=%.o)
OBJECTFILES:=$(shell find -iname '*.cpp' | sed 's/\.cpp$/.o/')

# C Compiler Flags
CFLAGS=

# CC Compiler Flags
CCFLAGS=
CXXFLAGS=

# Fortran Compiler Flags
FFLAGS=

# Assembler Flags
ASFLAGS=

# Link Libraries and Options
LDLIBSOPTIONS=${CND_LINKERLIBOPTS}

# Build Targets
.build-conf: ${BUILD_SUBPROJECTS}
	"${MAKE}"  -f nbproject/Makefile-${CND_CONF}.mk ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}.exe

${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}.exe: ${OBJECTFILES}
	${MKDIR} -p ${CND_OUTPUTPATH}
	${LINK.cc} -o ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME} ${OBJECTFILES} ${LDLIBSOPTIONS}

${OBJECTDIR}/main.o: main.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES} -I../core -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/main.o main.cpp

# Subprojects
.build-subprojects:
	cd ../core && ${MAKE}  -f Makefile CONF=Debug
	cd ../simple && ${MAKE}  -f Makefile CONF=Debug
	cd ../KernelMaster && ${MAKE}  -f Makefile CONF=Debug
	cd ../boot && ${MAKE}  -f Makefile CONF=Debug

# Clean Targets
.clean-conf: ${CLEAN_SUBPROJECTS}
	${RM} -r ${CND_BUILDDIR}/${CND_CONF}
	${RM} ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}.exe

# Subprojects
.clean-subprojects:
	cd ../core && ${MAKE}  -f Makefile CONF=Debug clean
	cd ../simple && ${MAKE}  -f Makefile CONF=Debug clean
	cd ../KernelMaster && ${MAKE}  -f Makefile CONF=Debug clean
	cd ../boot && ${MAKE}  -f Makefile CONF=Debug clean

# Enable dependency checking
.dep.inc: .depcheck-impl

include .dep.inc
# .dep.inc file. This code depends on make tool being used
DEPFILES=$(wildcard $(addsuffix .d, ${OBJECTFILES}))
ifneq (${DEPFILES},)
include ${DEPFILES}
endif



#
# Generated Makefile - do not edit!
#
# Edit the Makefile in the project folder instead (../Makefile). Each target
# has a -pre and a -post target defined where you can add customized code.
#
# This makefile implements configuration specific macros and targets.


# Environment
MKDIR=mkdir
CP=cp
GREP=grep
NM=nm
CCADMIN=CCadmin
RANLIB=ranlib
CC=gcc
CCC=g++
CXX=g++
FC=gfortran
AS=as

# Macros
CND_PLATFORM=MinGW-Windows
CND_DLIB_EXT=dll
CND_CONF=Debug
CND_DISTDIR=dist
CND_BUILDDIR=build

# Include project Makefile
include Makefile

# Object Directory
OBJECTDIR=${CND_BUILDDIR}/${CND_CONF}/${CND_PLATFORM}

# Object Files
OBJECTFILES= \
	${OBJECTDIR}/buffer.o \
	${OBJECTDIR}/dynamiclibraryloader.o \
	${OBJECTDIR}/dynamiclibrarymanager.o \
	${OBJECTDIR}/exception.o \
	${OBJECTDIR}/fileinputstream.o \
	${OBJECTDIR}/fileoutputstream.o \
	${OBJECTDIR}/functions.o \
	${OBJECTDIR}/kernel.o \
	${OBJECTDIR}/lock.o \
	${OBJECTDIR}/sequence.o \
	${OBJECTDIR}/service.o \
	${OBJECTDIR}/serviceclient.o \
	${OBJECTDIR}/serviceserver.o \
	${OBJECTDIR}/sharedmemory.o \
	${OBJECTDIR}/sharedmemorystream.o \
	${OBJECTDIR}/streamable.o \
	${OBJECTDIR}/streaminput.o \
	${OBJECTDIR}/streamoutput.o \
	${OBJECTDIR}/thread.o


# C Compiler Flags
CFLAGS=

# CC Compiler Flags
CCFLAGS=
CXXFLAGS=

# Fortran Compiler Flags
FFLAGS=

# Assembler Flags
ASFLAGS=

# Link Libraries and Options
LDLIBSOPTIONS=${CND_LINKERLIBOPTS}

# Build Targets
.build-conf: ${BUILD_SUBPROJECTS}
	"${MAKE}"  -f nbproject/Makefile-${CND_CONF}.mk ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}

${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}: ${OBJECTFILES}
	${MKDIR} -p ${CND_OUTPUTPATH}
	${LINK.cc} -o ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME} ${OBJECTFILES} ${LDLIBSOPTIONS} -shared

${OBJECTDIR}/buffer.o: buffer.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/buffer.o buffer.cpp

${OBJECTDIR}/dynamiclibraryloader.o: dynamiclibraryloader.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/dynamiclibraryloader.o dynamiclibraryloader.cpp

${OBJECTDIR}/dynamiclibrarymanager.o: dynamiclibrarymanager.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/dynamiclibrarymanager.o dynamiclibrarymanager.cpp

${OBJECTDIR}/exception.o: exception.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/exception.o exception.cpp

${OBJECTDIR}/fileinputstream.o: fileinputstream.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/fileinputstream.o fileinputstream.cpp

${OBJECTDIR}/fileoutputstream.o: fileoutputstream.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/fileoutputstream.o fileoutputstream.cpp

${OBJECTDIR}/functions.o: functions.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/functions.o functions.cpp

${OBJECTDIR}/kernel.o: kernel.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/kernel.o kernel.cpp

${OBJECTDIR}/lock.o: lock.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/lock.o lock.cpp

${OBJECTDIR}/sequence.o: sequence.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/sequence.o sequence.cpp

${OBJECTDIR}/service.o: service.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/service.o service.cpp

${OBJECTDIR}/serviceclient.o: serviceclient.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/serviceclient.o serviceclient.cpp

${OBJECTDIR}/serviceserver.o: serviceserver.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/serviceserver.o serviceserver.cpp

${OBJECTDIR}/sharedmemory.o: sharedmemory.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/sharedmemory.o sharedmemory.cpp

${OBJECTDIR}/sharedmemorystream.o: sharedmemorystream.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/sharedmemorystream.o sharedmemorystream.cpp

${OBJECTDIR}/streamable.o: streamable.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/streamable.o streamable.cpp

${OBJECTDIR}/streaminput.o: streaminput.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/streaminput.o streaminput.cpp

${OBJECTDIR}/streamoutput.o: streamoutput.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/streamoutput.o streamoutput.cpp

${OBJECTDIR}/thread.o: thread.cpp 
	${MKDIR} -p ${OBJECTDIR}
	${RM} "$@.d"
	$(COMPILE.cc) -g -DDEBUG -I${CND_CPPINCLUDES}  -MMD -MP -MF "$@.d" -o ${OBJECTDIR}/thread.o thread.cpp

# Subprojects
.build-subprojects:

# Clean Targets
.clean-conf: ${CLEAN_SUBPROJECTS}
	${RM} -r ${CND_BUILDDIR}/${CND_CONF}
	${RM} ${CND_OUTPUTPATH}/${CND_OUTPUTFILENAME}

# Subprojects
.clean-subprojects:

# Enable dependency checking
.dep.inc: .depcheck-impl

include .dep.inc



# build
build: .build-post

.build-pre:
# Add your pre 'build' code here...

.build-post: .build-impl
# Add your post 'build' code here...


# clean
clean: .clean-post

.clean-pre:
# Add your pre 'clean' code here...

.clean-post: .clean-impl
# Add your post 'clean' code here...


# clobber
clobber: .clobber-post

.clobber-pre:
# Add your pre 'clobber' code here...

.clobber-post: .clobber-impl
# Add your post 'clobber' code here...


# all
all: .all-post

.all-pre:
# Add your pre 'all' code here...

.all-post: .all-impl
# Add your post 'all' code here...


# build tests
build-tests: .build-tests-post

.build-tests-pre:
# Add your pre 'build-tests' code here...

.build-tests-post: .build-tests-impl
# Add your post 'build-tests' code here...


# run tests
test: .test-post

.test-pre:
# Add your pre 'test' code here...

.test-post: .test-impl
# Add your post 'test' code here...


# help
help: .help-post

.help-pre:
# Add your pre 'help' code here...

.help-post: .help-impl
# Add your post 'help' code here...



# include project implementation makefile
include nbproject/Makefile-impl.mk

# file nbproject/Makefile-impl.mk
# Building and Cleaning subprojects are done by default, but can be controlled with the SUB
# macro. If SUB=no, subprojects will not be built or cleaned. The following macro
# statements set BUILD_SUB-CONF and CLEAN_SUB-CONF to .build-reqprojects-conf
# and .clean-reqprojects-conf unless SUB has the value 'no'
SUB_no=NO
SUBPROJECTS=${SUB_${SUB}}
BUILD_SUBPROJECTS_=.build-subprojects
BUILD_SUBPROJECTS_NO=
BUILD_SUBPROJECTS=${BUILD_SUBPROJECTS_${SUBPROJECTS}}
CLEAN_SUBPROJECTS_=.clean-subprojects
CLEAN_SUBPROJECTS_NO=
CLEAN_SUBPROJECTS=${CLEAN_SUBPROJECTS_${SUBPROJECTS}}


# Project Name
PROJECTNAME=process

# Active Configuration
DEFAULTCONF=Debug
CONF=${DEFAULTCONF}

# All Configurations
ALLCONFS=Debug Release 


# build
.build-impl: .build-pre .validate-impl .depcheck-impl
	@#echo "=> Running $@... Configuration=$(CONF)"
	"${MAKE}" -f nbproject/Makefile-${CONF}.mk QMAKE=${QMAKE} SUBPROJECTS=${SUBPROJECTS} .build-conf


# clean
.clean-impl: .clean-pre .validate-impl .depcheck-impl
	@#echo "=> Running $@... Configuration=$(CONF)"
	"${MAKE}" -f nbproject/Makefile-${CONF}.mk QMAKE=${QMAKE} SUBPROJECTS=${SUBPROJECTS} .clean-conf


# clobber 
.clobber-impl: .clobber-pre .depcheck-impl
	@#echo "=> Running $@..."
	for CONF in ${ALLCONFS}; \
	do \
	    "${MAKE}" -f nbproject/Makefile-$${CONF}.mk QMAKE=${QMAKE} SUBPROJECTS=${SUBPROJECTS} .clean-conf; \
	done

# all 
.all-impl: .all-pre .depcheck-impl
	@#echo "=> Running $@..."
	for CONF in ${ALLCONFS}; \
	do \
	    "${MAKE}" -f nbproject/Makefile-$${CONF}.mk QMAKE=${QMAKE} SUBPROJECTS=${SUBPROJECTS} .build-conf; \
	done

# build tests
.build-tests-impl: .build-impl .build-tests-pre
	@#echo "=> Running $@... Configuration=$(CONF)"
	"${MAKE}" -f nbproject/Makefile-${CONF}.mk SUBPROJECTS=${SUBPROJECTS} .build-tests-conf

# run tests
.test-impl: .build-tests-impl .test-pre
	@#echo "=> Running $@... Configuration=$(CONF)"
	"${MAKE}" -f nbproject/Makefile-${CONF}.mk SUBPROJECTS=${SUBPROJECTS} .test-conf

# dependency checking support
.depcheck-impl:
	@echo "# This code depends on make tool being used" >.dep.inc
	@if [ -n "${MAKE_VERSION}" ]; then \
	    echo "DEPFILES=\$$(wildcard \$$(addsuffix .d, \$${OBJECTFILES}))" >>.dep.inc; \
	    echo "ifneq (\$${DEPFILES},)" >>.dep.inc; \
	    echo "include \$${DEPFILES}" >>.dep.inc; \
	    echo "endif" >>.dep.inc; \
	else \
	    echo ".KEEP_STATE:" >>.dep.inc; \
	    echo ".KEEP_STATE_FILE:.make.state.\$${CONF}" >>.dep.inc; \
	fi

# configuration validation
.validate-impl:
	@if [ ! -f nbproject/Makefile-${CONF}.mk ]; \
	then \
	    echo ""; \
	    echo "Error: can not find the makefile for configuration '${CONF}' in project ${PROJECTNAME}"; \
	    echo "See 'make help' for details."; \
	    echo "Current directory: " `pwd`; \
	    echo ""; \
	fi
	@if [ ! -f nbproject/Makefile-${CONF}.mk ]; \
	then \
	    exit 1; \
	fi


# help
.help-impl: .help-pre
	@echo "This makefile supports the following configurations:"
	@echo "    ${ALLCONFS}"
	@echo ""
	@echo "and the following targets:"
	@echo "    build  (default target)"
	@echo "    clean"
	@echo "    clobber"
	@echo "    all"
	@echo "    help"
	@echo ""
	@echo "Makefile Usage:"
	@echo "    make [CONF=<CONFIGURATION>] [SUB=no] build"
	@echo "    make [CONF=<CONFIGURATION>] [SUB=no] clean"
	@echo "    make [SUB=no] clobber"
	@echo "    make [SUB=no] all"
	@echo "    make help"
	@echo ""
	@echo "Target 'build' will build a specific configuration and, unless 'SUB=no',"
	@echo "    also build subprojects."
	@echo "Target 'clean' will clean a specific configuration and, unless 'SUB=no',"
	@echo "    also clean subprojects."
	@echo "Target 'clobber' will remove all built files from all configurations and,"
	@echo "    unless 'SUB=no', also from subprojects."
	@echo "Target 'all' will will build all configurations and, unless 'SUB=no',"
	@echo "    also build subprojects."
	@echo "Target 'help' prints this message."
	@echo ""


# include project make variables
include nbproject/Makefile-variables.mk


