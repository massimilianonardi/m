SEQUENZE

attualmente:
- elem: char
- seq: insieme di bytes (una seq per contenere un long, ha 4 elem che rappresentano i 4 byte del long: "return *(long*) elems.get()")
- una seq ha un buffer di elems, il tipo che rappresenta (int, float, string, pointer, ecc.) ed un buffer di puntatori a subseqs
- => due indici distinti per sub-elems e sub-seqs
- operator[i] accede ai sotto-elems, operator(i) alle sotto-seqs
- tenere presente che con i cast da/verso attuali, si è implicamente definito lo standard di rappresentazione interna dei numeri e caratteri (int, float, char, ecc.)
- sequence text format (metodi "from_text" e "to_text"):
  $:t:<content as text>:[$:i:<5>;]:[$:f:<5.6>;];
  NB $:f:<5.6>; is a floating point, while $:t:<5.6>; is a text!!!

---

todo:
- smart pointer per le subseqs
- pensare alla "platform independent rappresentation" degli elem e conversione da/verso i tipi elementari del c++, java, ecc. (language and os independent)
- strongly typed seqs
- seq-exec (sequenze eseguibili): ha tipo=seq-exec e contiene il nome di un srv-comando ed i params da passare, il metodo "exec" la esegue (eccezione per altri tipi). 
  pensare ad una shell (con pipe, variabili ambiente, ecc.) per l'utilizzo di queste seq eseguibili.
- seq-dyn (sequenze dinamiche): ha tipo=seq-dyn e contiene un comando o una query ad un'altra seq (analogo dei database). 
  il loro contenuto è determinato dinamicamente, analogo dei db, ma utile anche per le user interfaces (es. status, ecc.)
- un container base deve fornire <resize, size, get/[]> tutte le altre funzioni possono essere ricondotte a queste -> template Container per le funzioni avanzate
- container base -> container avanzato -> sequence base -> sequence con legami ad altre sequence -> typed sequence
- sequenza = insieme ordinato di elementi che può formare (un insieme ordinato di) legami con altre sequenze -> in pratica concetto di nodo
- il concetto di sequence astrae dal tipo che rappresenta, una convenzione ci fa interpretare le seq come typed seq => definire quella convenzione
- una volta definite le typed sequence, allora è possibile definire delle operazioni e relazioni su di esse
- gerarchia di concetti: sequenza (-> sequenza tipizzata?) -> nodo -> struttura dati tipizzata
- anche se sequence implementa le conversioni da/verso i tipi base, la sequenza tipizzata deve comunque reimplementarli per memorizzare il tipo

---

- una sequenza è un oggetto dove dentro posso mettere qualunque cosa con un ordine lineare (1D). 
- cioè è un nodo con diversi oggetti, la presenza di sotto-sequenze da un punto di vista astratto la può far vedere come un grafo. 
- anche un essere umano può essere ricondotto ad un grafo di triplette di codoni (elem base: tripletta di codoni ~ byte ~ mattone ~ ecc.). 
- elem base: byte; seq: insieme ordinato di byte e seq. -> 
- def matematica ricorsiva: seq = <singleton base> OR <insieme ordinato di seq>. in questa def anche il byte è una seq. 
- una seq deve essere castabile da/verso i tipi c++ (int, long, char, string, ecc.)
- le seq sono progettate puramente in modo ricorsivo (costr. e met. ricevono e restituiscono solo seq) con l'aggiunta di cast delle seq base da/verso i tipi elementari. 
- def:
  elem: elemento base essenziale e non scindibile (byte). 
  seq: insieme ordinato di elem e/o seq. 
- indici delle seq sono delle seq essi stessi (per avere delle seq indirizzabili all'infinito! -> pensare bene...)
- seq come array di union (byte, long, float, pointer, ecc.)? -> problemi per le stringhe ascii, ok per unicode
