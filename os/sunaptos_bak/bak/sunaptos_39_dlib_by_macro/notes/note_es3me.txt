- verificare la migliore e corretta inheritance tra ifaces e srv/libs rispetto alla classe base Object
- evitare il redefine in dlib.h per evitare il warning, poichè se il simbolo venisse ridefinito da altre parti il secondo (e pericoloso) warning passerebbe inosservato!!!
- una iface viene generata automaticamente da un xml che specifica i metodi virtuali ed alcuni file template che servono per generare la lib: in questi viene inserito il 
  nome della iface ed il corretto include al .h che viene generato per la iface con tutti i suoi metodi, questo è un .h pulito senza "define" (tipo IFACE_NAME) e che viene 
  copiato nella sdk globale del sistema
- stessa cosa per i srv: vengono generati i file "puliti" e poi il developer edita/integra il srv.h ed il srv.cpp NB attenzione che così un eventuale "refactor" va gestito 
  sempre con la utility che genera i file
- le iface vengono generate tramite un tool che consente di specificare il nome ed i metodi in modo che questi accettino solo un puntatore a DT (data tree) e restituiscano 
  solo puntatori a DT. i file .h per la sdk e le dll (1 dll per la iface + 2 wrapper per la comunicazione ipc trasparente) vengono generate e compilate tramite il tool di 
  creazione delle ifaces (cioè il tool necessita di una corretta installazione di gcc/mingw oppure deve includerne una standalone)
- le ifaces si distinguono in due categorie: quelle di sistema e quelle utente; per le prime ci deve essere un check a livello kernel per garantirne l'autenticità e possono 
  essere rilasciate solo insieme a tutto il OS; le seconde le può generare l'utente e le possono utilizzare tutti, magari sono scaricabili anche dal server es3me, ma non 
  hanno nessuna garanzia e di solito sono dedicate ad una classe ristretta di problemi...se fossero importanti e di carattere generale, ne dovrebbe esistere un equivalente 
  in quelle di sistema.
- l'ipc è fatta sempre via shared memory, poi si crea un servizio che ascolta via network e che wrappa verso i vari srv via shared memory, altrimenti il client dovrebbe 
  implementare sia la comunicazione via shared memory che via network che è sicuramente la soluzione più efficiente e più sicura, ma forse ha delle complicazioni 
  architetturali per la comunicazione tra srv su diversi pc...pensare bene!
- il modulo wizard assoluto si chiama "Consuelo" (o simili) perchè è un consultant che ti fa alcune domande e sulla base delle quali ti da un prodotto finito...

- architecture:
  - esiste un solo exe "client" che in tutti i casi istanzia il client_loader (cl) embedded nel codice del exe, carica ed istanzia la lib specifica, carica ed istanzia il 
    wrapper specifico della lib specifica
  - workflow:
    + qualcuno lancia "client.exe KernelLoader, params":
      * istanzia il cl che fallisce la connessione al ipc_server secondo i params
      * carica la lib "KernelLoader.lib"
      * istanzia la lib kl che durante l'init chiama un thread che fa il polling su "cl->reconnect()" finchè non va a buon fine
      * carica il srv_wrapper (sw) per la lib
      * instanzia il sw con il puntatore alla lib
      * instanzia il ipc_server con il puntatore a sw
      * ("cl->reconnect()" va a buon fine e kl chiama "cl->call("BootProcess", params)")

    + il client di cui sopra lancia "client.exe BootProcess, params":
      * istanzia il cl che si connette al ipc_server di kl secondo i params
      * carica la lib "BootProcess.lib"
      * istanzia la lib bp che durante l'init chiama tutte le lib che vuole (cioè fa il precesso di boot vero e proprio)
      * carica il srv_wrapper (sw) per la lib
      * instanzia il sw con il puntatore alla lib
      * instanzia il ipc_server con il puntatore a sw
      * (in realtà gli ultimi tre passi sono quasi inutili perchè un processo di boot a parte comandi di "abort", "wait", o simili, non ha senso di comunicare con altri)

    + in pratica kl avrebbe bisogno di gestire una config tale da scegliere quale boot eseguire (tipo grub), ma è molto insicuro! secondo me il precesso di boot deve essere 
      embedded nel kernel.
      bp avrebbe bisogno di gestire una config un po' più complicata per gestire il processo di boot (tipo SysV).
      ragionare sul fatto che il cl sta nello stesso codice della lib e se una lib fosse malevola potrebbe caricare qualsiasi cosa??? forse in realtà cl dovrebbe essere 
      una kernel api e così anche ipc_server e così anche dll_loader
