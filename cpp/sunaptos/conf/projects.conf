################################################################################
### WORKSPACE VARIABLES
################################################################################

PROJECTS_HI_PRI=_core _loader



################################################################################
### PROJECT VARIABLES
################################################################################

PROJECT_TYPE=cpp

CPP_TARGET_CONF=DEBUG
CPP_TARGET_OS=WIN
CPP_TARGET_ARCH=32

CXXFLAGS+=-std=c++11 -fvisibility=hidden

ifeq ($(TARGET_OS), LINUX)
  CPP_FILE_EXTENSION=
endif
ifeq ($(TARGET_OS), WIN)
  CPP_FILE_EXTENSION=.
endif

CPP_INCLUDES=$(addprefix -I, $(shell find ./src/_core -mindepth 0 -type d))
CPP_LIBRARIES_LINK=-l_core -dynamic
CPP_OUTPUT_TYPE=-shared
CPP_LIBRARIES_RUNTIME_PATH=.
#CPP_LIBRARIES_RUNTIME_PATH=./lib



#specific project variables

ifeq ($(PROJECT),_core)
  CPP_LIBRARIES_LINK=
  CPP_FILE_EXTENSION=.dll
endif

ifeq ($(PROJECT),process)
  CPP_OUTPUT_TYPE=
  CPP_FILE_EXTENSION=
endif

ifeq ($(PROJECT),test)
  CPP_OUTPUT_TYPE=
  CPP_FILE_EXTENSION=
endif

ifeq ($(PROJECT),_loader)
  CPP_FILE_EXTENSION=.dll
endif

ifeq ($(PROJECT),Loader)
  CPP_INCLUDES+=-I./src/_loader
  CPP_LIBRARIES_LINK+=-l_loader -dynamic
endif

ifeq ($(PROJECT),input_hid)
  CPP_INCLUDES+=-I./src/input
endif

ifeq ($(PROJECT),output_manager_window)
  CPP_LIBRARIES_LINK+=-lGdi32 -dynamic
endif

ifeq ($(PROJECT),output_manager_opengl)
  CPP_INCLUDES+=$(OPENGL_INCLUDES)
  CPP_LIBRARIES_LINK=-l:_core.dll -dynamic $(OPENGL_LIBRARIES_LINK)
endif



################################################################################
### PRE-BUILT VARIABLES
################################################################################
#
# - directories: BASE_DIR, SOURCE_DIR, BUILD_DIR, DIST_DIR
#   BASE_DIR is always fixed, the others depends on context (project, type, profiles, target, etc.)
#
# - project: PROJECT, PROFILE
#   the current building project and profile
#
# - system: SYS_OS, SYS_CPU, SYS_ARCH
#   detects WIN, LINUX, OSX, x86, AMD64, ARM, 32, 64
#
# - cpp target: CONF, TARGET_OS, TARGET_CPU, TARGET_ARCHITECTURE
#   set to the current building target
#
# - cpp compiler: CC, CXX, CPP, SYS_COMPILER, COMPILER_PREFIX
#   depending on the current building target, set to the proper compiler (GCC compatible)
#
# - cpp compiler options: CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS
#   depending on the current building target, set to the proper basic compiler options



################################################################################
### VARIABLES
################################################################################
#
# - workspace: PROJECTS_HI_PRI, PROJECTS_LO_PRI, PROJECTS_LIST
#
#   default project list is the list of directories under the src directory and they will be processed alphabetically. 
#   PROJECTS_HI_PRI and PROJECTS_LO_PRI are optional ordered lists to adjust the default order by placing 
#   specific projects on top or at bottom of list (with the specified order). 
#   PROJECTS_LIST will explicitly replace the ordered list of projects and they will be processed in the order specified.
#
# - project: PROJECT_TYPE, PROJECT_PROFILES
#
#   PROJECT_TYPE can be: cpp, java, javascript, java_web. if empty defaults to cpp. should be defined conditionally for each project. 
#   PROJECT_PROFILES can be a list of custom build profiles. 
#   different configuration can be provided depending on the current building profile (given by the PROFILE variable) 
#   can be defined at any level: workspace, project type, project; if empty or undefined, profiles are not used.
#
# - cpp: CPP_TARGET_CONF, CPP_TARGET_OS, CPP_TARGET_ARCH, 
#        CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS, 
#        CPP_INCLUDES, CPP_LIBRARIES_LINK, CPP_OUTPUT_TYPE, CPP_FILES_DIST, CPP_FILENAME, CPP_FILE_EXTENSION
#
#   files with .cpp extension will be compiled as c++, files with .c extension will be compiled as c. 
#   if CPP_TARGET_CONF, CPP_TARGET_OS, CPP_TARGET_ARCH are not defined, they default to all available values if empty, they default to the running system 
#   (eg removing/commenting CPP_TARGET_OS, will compile for windows and linux, setting it to an empty value, will compile for the invoking os). 
#   CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS, can be used to append custom flags to the pre-built defaults. 
#   CPP_INCLUDES define the include search path as follows: 
#   CPP_INCLUDES=-I../dir1 -I../dir2 -I../dir3 $(addprefix -I, $(shell find ../src/dir4 -mindepth 0 -type d)) ### detect dir4 subdirectories
#   CPP_LIBRARIES_LINK define the libraries to link as follows: 
#   CPP_LIBRARIES_LINK=-L$(EXTERN_LIBRARIES_SEARCH_DIR) -Ldir1 -Ldir2 -Ldir3 -lLib1 -dynamic -lLib2 -dynamic -lLib3 -static
#   CPP_INCLUDES and CPP_LIBRARIES_LINK should take advantage of libraries.conf to define variables specific to each library. 
#   if CPP_OUTPUT_TYPE is empty, an executable is built, if it is "-shared" then a shared library is built, if it is "-static" then a static library is built. 
#   (NB -static is currently not supported)
#   CPP_LIBRARIES_RUNTIME_PATH embeds into executables the search path for libraries. 
#   the output file will be: $(DIST_DIR)/$(CPP_FILENAME)$(CPP_FILE_EXTENSION)
#   if CPP_FILE_EXTENSION is empty, compiler default is used (executable, shared or static library), 
#   in windows if set to a dot '.', then no file extension will be used. 
#   if CPP_FILENAME is empty or undefined it defaults to $(PROJECT). 
#   CPP_FILES_DIST can be a list of files to be copied into the current $(DIST_DIR). it is implemented as: $(CP) $(CPP_FILES_DIST) $(DIST_DIR)
#
# - java: JAVA_MAIN_CLASS, JAVA_CLASSPATH_BUILD, JAVA_CLASSPATH_RUN, JAVA_FILES_DIST, JAVA_FLAGS
#
#   if JAVA_MAIN_CLASS is empty, the resulting jar can only be used as library, not executed. 
#   JAVA_CLASSPATH_BUILD is the classpath passed to java to build. 
#   NB java treats its format depending on the system (on windows should be: C:\lib1.jar;D:\lib2.jar on linux: /usr/lib1.jar:/usr/lib2.jar)
#   JAVA_CLASSPATH_RUN is a list of blank space separated list of libraries to be searched at runtime (eg: path1/lib1.jar path2/lib2.jar)
#   JAVA_FILES_DIST can be a list of files to be copied into the current $(DIST_DIR). it is implemented as: $(CP) $(JAVA_FILES_DIST) $(DIST_DIR)
#   JAVA_FLAGS can be used to pass extra flags to java compiler
#
# - javascript: JAVASCRIPT_LIBRARIES_DIST, JAVASCRIPT_JS_CONF_FILE, JAVASCRIPT_CSS_CONF_FILE, JAVASCRIPT_MINIFY, JAVASCRIPT_GZIP
#
#   JAVASCRIPT_LIBRARIES_DIST can be a list of directories where libraries resides (*.js and *.css are prepended, other files are copied)
#   if JAVASCRIPT_JS_CONF_FILE is empty, then automatic namespaced import is performed (folders are namespaces, filename is the symbol to export).
#   this file must be in json format with the following "module" structure: 
#   - "modules" property (required): it must be an array of objects of two acceptable formats: 
#     - another module object for defining a sub-namespace 
#     - a file object with a "file" property (required) specifing the file to include and a "symbols" property (optional) as a comma separated string of objects to make public. 
#   - "name" property (optional): if defined, creates a sub-namespace (with the provided name) surrounding the modules defined by the modules property. 
#   example:
#   {
#     "modules":
#     [
#       {"file": "lib1.js"},
#       {"file": "lib2.js", "symbols": ""},
#       {"file": "lib3.js", "symbols": "class3,var4"},
#       {
#         "name": "namespace1",
#         "modules":
#         [
#           {"name": "subnamespace1", "modules": [{"file": "subnamespace1", "symbols": "class1,class2"}]},
#           {"name": "subnamespace2", "modules": 
#           [
#             {"file": "lib4.js", "symbols": "class1,class2"},
#             {"file": "lib5.js", "symbols": "class5,class6"}
#           ]}
#         ]
#       }
#     ]
#   }
#   if JAVASCRIPT_CSS_CONF_FILE is empty, then automatic import is performed (all files are simply concatenated).
#   this file must be in json format with the "module" structure, but without "name" and "symbols"
#   if JAVASCRIPT_MINIFY is not empty activates the minification after the composition and its value must be WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS or ADVANCED_OPTIMIZATIONS. 
#   if JAVASCRIPT_GZIP is not empty activates the gzip compression at the end of the compilation chain
#
# - java_web: JAVA_WEB_CLASSPATH_BUILD, JAVA_WEB_LIBRARIES_DIST, JAVA_WEB_FILES_DIST, JAVA_WEB_FILES_DIST_DIR, JAVA_WEB_DEPLOY, JAVA_WEB_FLAGS
#
#   JAVA_WEB_CLASSPATH_BUILD is the classpath passed to java to build. 
#   NB java treats its format depending on the system (on windows should be: C:\lib1.jar;D:\lib2.jar on linux: /usr/lib1.jar:/usr/lib2.jar)
#   JAVA_WEB_LIBRARIES_DIST can be a list of files to be copied into the current $(BUILD_DIR)/WEB-INF/lib. 
#   it is implemented as: $(CP) $(JAVA_WEB_LIBRARIES_DIST) $(BUILD_DIR)/WEB-INF/lib
#   JAVA_WEB_FILES_DIST can be a list of files to be copied into $(JAVA_WEB_FILES_DIST_DIR)
#   JAVA_WEB_FILES_DIST_DIR if empty, defaults to war root
#   JAVA_WEB_DEPLOY if not empty, defines the application server dir where to deploy the built files
#   JAVA_WEB_FLAGS can be used to pass extra flags to java compiler



################################################################################
### WORKSPACE VARIABLES
################################################################################

#PROJECTS_HI_PRI=
#PROJECTS_LO_PRI=

#PROJECTS_LIST=



################################################################################
### PROJECT VARIABLES
################################################################################

#-------------------------------------------------------------------------------
# projects defaults for all types of project
#-------------------------------------------------------------------------------

# PROJECT_PROFILES defined at workspace level
#PROJECT_PROFILES=CONSOLE GUI
#
# PROJECT_PROFILES defined at project type level
#ifeq ($(PROJECT_TYPE),java)
#  PROJECT_PROFILES=JAVA_DEBUG JAVA_RELEASE
#endif
#
# PROJECT_PROFILES defined at project level
#ifeq ($(PROJECT),process)
#  PROJECT_PROFILES=PROFILE_1 PROFILE_2
#endif

#-------------------------------------------------------------------------------
# defaults cpp
#-------------------------------------------------------------------------------

#CPP_TARGET_CONF=
#CPP_TARGET_OS=
#CPP_TARGET_ARCH=

#CPP_TARGET_CONF=DEBUG RELEASE
#CPP_TARGET_OS=LINUX WIN
#CPP_TARGET_ARCH=64 32

#CPP_FILE_EXTENSION=
#CPP_FILE_EXTENSION=.
#ifeq ($(TARGET_OS), LINUX)
#  CPP_FILE_EXTENSION=
#endif
#ifeq ($(TARGET_OS), WIN)
#  CPP_FILE_EXTENSION=.
#endif

#CPP_FILE_EXTENSION=.so
#CPP_FILENAME=lib$(PROJECT)

#CPP_LIBRARIES_RUNTIME_PATH=.
#CPP_LIBRARIES_RUNTIME_PATH=./lib



#specific project variables
ifeq ($(PROJECT),myproject_cpp)
  PROJECT_TYPE=cpp
  CPP_FILE_EXTENSION=.dll
endif

#-------------------------------------------------------------------------------
# defaults java
#-------------------------------------------------------------------------------

#specific project variables
ifeq ($(PROJECT),myproject_java)
  PROJECT_TYPE=java
endif

#-------------------------------------------------------------------------------
# defaults java
#-------------------------------------------------------------------------------

#specific project variables
ifeq ($(PROJECT),myproject_javascript)
  PROJECT_TYPE=javascript
endif

#-------------------------------------------------------------------------------
# defaults java_web
#-------------------------------------------------------------------------------

#specific project variables
ifeq ($(PROJECT),myproject_java_web)
  PROJECT_TYPE=java_web
endif
