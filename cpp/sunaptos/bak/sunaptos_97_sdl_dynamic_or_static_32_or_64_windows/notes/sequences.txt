SEQUENZE

attualmente:
- sequenza = insieme ordinato di elementi che può formare (un insieme ordinato di) legami con altre sequenze -> in pratica concetto di nodo
- sequence = array dinamico + links ad altre sequences
- elem: char
- seq: insieme di bytes (una seq per contenere un long, ha 4 elem che rappresentano i 4 byte del long: "return *(long*) elems.get()")
- una seq ha un buffer di elems, ed un buffer di puntatori a subseqs => due indici distinti per sub-elems e sub-seqs -> operator[i]: elems; operator(i): sotto-seqs
- copy/move/link: le sequence sono linkabili (tramite comportamento interno da shared pointer che punta ai dati)
- type: le sequence gestiscono il tipo che rappresentano (astrazione umana), utilizzando il primo elem della seq (sequence[0]) per descrivere al max 253 tipi standard
  0 -> undefined, ..., 255 (0xFF) -> custom, in quest ultimo caso si possono usare infiniti custom types poichè il tipo è l'intera seq ed il dato sta solo nei link
  essendo la tipizzazione dei dati un'astrazione, il metodo type() che seq offre come facility, ritorna undefined nel caso di size=0
  ultieriore supporto all'astrazione dei dati tipizzati, sono i costruttori/operatori di cast ed eventuali operatori +-*/<>, ecc.
  particolare supporto al tipo service integrando e nascondendo la costruzione/distruzione con meccanismo di shared pointer usato per la link feature (loader globale)
  particolare supporto ai tipi seq-dyn e seq-exec
  NB i metodi di conversione to/from string devono supportare la conversione to/from per ogni tipo standard e custom ($:s:<content as text>:[$:n:<5>;]:[$:n:<5.6>;];)
  NB double=ieee754double è un formato standard di fatto per ogni architettura/os veloce almeno quanto float (tranne che sulle gpu)
  NB tutti i cast da/verso tipi numerici del c++ di fatto usano double per uniformare in un solo formato e perchè tale formato consente lo streaming da/verso arch diverse
  NB usare i pointer nelle seq a proprio rischio e pericolo poichè le seq ed i srv usati generalmente appartengono a processi/os diversi
     per i service ci sono integrate delle funzionalità di validazione che attraverso il loader consentono di avere su richiesta comunque un srv valido (seq=punt, seq(0)=loader_id)
     che può essere un rpc alla stessa identica istanza remota a cui il punt fa riferimento, oppure una nuova istanza locale -> scelta del loader (policy ecc.)
     ...pensare meglio a queta storia dei punt a service che vanno in streaming...
  NB pensare ad una codifica universale a precisione "arbitrariamente infinita" per numeri e testo. 
     una rappresentazione in virgola mobile per i numeri è generale, in quanto non esistono rappresentazioni esatte (che io sappia) per i numeri irrazionali.
     una rappresentazione testuale che preveda un alfabeto infinito, non è invece banale. 
     al momento double e utf8 vanno più che bene
  NB pensare bene a come rendere sequence perfettamente ereditabile (requisito per il punto successivo). 
  NB i tipi custom possono essere gestiti (costruzione, validazione, manipolazione) da classi derivate da sequence e definite nelle dll dei srv che definiscono tali tipi

- operators:
  = assignement/move/link
  == equality
  != not equality
  (cast) c++ basic data types cast
  [i] return elem
  (i) return seq
  () operation on itself as parameter (seq-dyn, seq-exec). returns new seq, leaves original unmodified
  & (unary address-of) built-in
  * act as a shared pointer of service
  -> act as a shared pointer of service
- seq-exec format: 
  (*this)(0) = srv pointer, 
  (*this)(1) = method, 
  (*this)(2) = method params. 
  (*this)() esegue la seq-exec
- cast da/verso service e seq-exec dipendono dall'implementazione della validazione dei service pointers da parte del loader

---

todo:
- implementare op per seq-dynamic
- implementare feature in loader richiesta da op per seq-exec: load accetta nome universale del srv, params del costruttore, eventuale handle e policies params
  handle e policies determinano se loader anzichè costruire un nuovo srv, ne restituisce uno esistente (eventualmente anche remoto). 
  la possibilità di connettersi ad un srv esistente, rende indispensabile che la distruzione/release di un srv venga richiesta al loader che tiene traccia degli handle restituiti
- integrare funzionalità di vector
- gestione circolarità dei links in to_string e seq streaming
- operators:
  [i] return elem
  (i) return seq
  << append elem/seq. return copy
  >> extract elem/seq. return copy
  <<= append link. return modified this
  >>= extract link. return modified this
  () operation on itself as parameter (seq-dyn, seq-exec). returns new seq, leaves original unmodified
  ~ operation on itself as parameter (seq-dyn, seq-exec). returns new seq, leaves original unmodified
  | 
  |= 
  ^ insert link on top. return inserted
  ^= insert link on top. return modified this
  & insert link on bottom. return inserted
  &= insert link on bottom. return modified this
  & (unary address-of) built-in
  * act as a shared pointer
  -> act as a shared pointer
- i vari cast (char*, to_text, from_text, ecc.) sono limitati dalla memoria contigua, 
  per le seq infinite danno eccezioni from_text va richiamato ricorsivamente splittando l'input
- compilation firewall: utile sia per nascondere l'implementazione, sia per aggiornare la dll contenente l'implementazione di sequence senza che gli sviluppatori di 
  services debbano ricompilare e redistribuire i loro srv ad ogni update della core dll
  la classe sequence ha nel suo header solo la forward declaration "class SequenceNode" (nel cpp c'è l'include al SequenceNode header) ed i metodi pubblici di SequenceNode
  l'implementazione di sequence fa un "new SequenceNode" nel costruttore ed un "delete pointer" nel distruttore, i metodi sono tutti forward a SequenceNode
  NB è simile ma diverso al caso di usare la factory + pure abstract class per ovviare alla compatibiltà delle dll tra diversi compilatori
- seq-exec (sequenze eseguibili): ha tipo=seq-exec e contiene il nome di un srv-comando ed i params da passare, il metodo "exec" la esegue (eccezione per altri tipi). 
  pensare ad una shell (con pipe, variabili ambiente, ecc.) per l'utilizzo di queste seq eseguibili.
- seq-dyn (sequenze dinamiche): ha tipo=seq-dyn e contiene un comando o una query ad un'altra seq (analogo dei database). 
  il loro contenuto è determinato dinamicamente, analogo dei db, ma utile anche per le user interfaces (es. status, ecc.)
- pensare all'eventualità di una sequence factory con config di sistema per memorie da usare per seq (ram, hd, net cloud-space) e tramite seq-exec e seq-dyn
  avere delle seq infinite (limitate solo dalle memorie che configuro nel sistema) con indici infiniti (feature nascosta dentro buffer ed il nuovo vector)
- pensare implementazione per ottimizzare le elaborazioni (in particolare calcoli in virgola mobile) -> double is the fastest with fpu, float with sse (verify)
- funzioni avanzate containers/sequence:
  ins(index, seq): inserisce una seq (solo elements, no subsequences) ad uno specifico index
  ins(seq): append
  del(index, index): removes range (it's the only container function that really should be replaced for utf8 strings)
  contains(seq):
  find(seq):
  starts(seq):
  ends(seq):
  replace(seq, seq, index, maxoccurrences):
  subsequence(index, index):
  query (su nodi): mentre find è sul container lineare, query è sulla struttura nodo...oppure è meglio unirli? ...per performance, no
- user defined literals per convertire dati avanzati (es. sequence s = "aaa@aaa.com"_email) facendo un controllo approfondito 
  (eccezioni su errori, o annullamento del dato inserito? es.: s = "aaa@aaa_com"_email -> s = ""), 
  così una volta che ho una seq di tipo email, so che il tipo è corretto (run-time type-safety) a meno di errori hardware o interventi esterni o manomissioni
- make thread safe version by using transactions for modify -> 
  modify: if not transaction active, begin transaction, modify, end transaction
  read: wait until transaction end, read

---

- una sequenza è un oggetto dove dentro posso mettere qualunque cosa con un ordine lineare (1D). 
- cioè un nodo con diversi oggetti, la presenza di sotto-sequenze da un punto di vista astratto la può far vedere come un grafo. 
- anche un essere umano può essere ricondotto ad un grafo di triplette di codoni (elem base: tripletta di codoni ~ byte ~ mattone ~ ecc.). 
- elem base: byte; seq: insieme ordinato di byte e seq. -> 
- def matematica ricorsiva: seq = <singleton base> OR <insieme ordinato di seq>. in questa def anche il byte è una seq. 
- una seq deve essere castabile da/verso i tipi c++ (int, long, char, string, ecc.)
- le seq sono progettate puramente in modo ricorsivo (costr. e met. ricevono e restituiscono solo seq) con l'aggiunta di cast delle seq base da/verso i tipi elementari. 
- def:
  elem: elemento base essenziale e non scindibile (byte). 
  seq: insieme ordinato di elem e/o seq. 
- indici delle seq sono delle seq essi stessi (per avere delle seq indirizzabili all'infinito! -> pensare bene...)
- seq come array di union (byte, long, float, pointer, ecc.)? -> problemi per le stringhe ascii, ok per unicode
