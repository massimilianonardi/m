.PHONY: all clean build install printallvars printenvvars printscriptvars $(PROJECT)

################################################################################
### THIS PROJECT OPTIONS
################################################################################

CND_PROJECTNAME=process
CND_OUTPUTFILENAME=${CND_PROJECTNAME}

CND_CPPINCLUDES=../dir1 -I../dir2 -I../dir3
CND_LINKERLIBOPTS=-L${CND_DISTDIR} -Ldir1 -Ldir2 -Ldir3 -lLib1 -dynamic -lLib2 -dynamic -lLib3 -dynamic



################################################################################
### GLOBAL VARIABLES
################################################################################

# system
SYS_ENV_VARS := $(.VARIABLES)
SYS_OS=
SYS_CPU=
ifeq ($(OS),Windows_NT)
  SYS_OS=WIN_UNDEFINED
  SYS_CPU=CPU_UNDEFINED
  ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
    SYS_OS=WIN64
    SYS_CPU=AMD64
  endif
  ifeq ($(PROCESSOR_ARCHITECTURE),x86)
    SYS_OS=WIN32
    SYS_CPU=AMD32
  endif
  ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
    SYS_OS=WIN64
    SYS_CPU=AMD64
  endif
else
  UNAME_S:=$(shell uname -s)
  ifeq ($(UNAME_S),Linux)
    SYS_OS=LINUX
  endif
  ifeq ($(UNAME_S),Darwin)
    SYS_OS=OSX
  endif
  UNAME_P:=$(shell uname -p)
  ifeq ($(UNAME_P),x86_64)
    SYS_CPU=AMD64
  endif
  ifneq ($(filter %86,$(UNAME_P)),)
    SYS_CPU=x86
  endif
  ifneq ($(filter arm%,$(UNAME_P)),)
    SYS_CPU=ARM
  endif
endif
SYS_COMPILER=GCC
ifeq ($(OS),Windows_NT)
	SYS_COMPILER=MinGW
endif
SYS_TARGET=${SYS_CPU}_${SYS_OS}_${SYS_COMPILER}
CND_PLATFORM=${SYS_TARGET}

# directories
CND_BASEDIR:=$(shell cd ..; pwd)
CND_SOURCEDIR=${CND_BASEDIR}/src
CND_BUILDDIR=${CND_BASEDIR}/build/${CND_CONF}/${CND_PLATFORM}/${CND_PROJECTNAME}
CND_DISTDIR=${CND_BASEDIR}/dist/${CND_CONF}/${CND_PLATFORM}
CND_PROJECTS=prj1 prj2
#CND_PROJECTS=prj1 prj2 $(shell ls ${CND_SOURCEDIR} -1) prj3 # to alter the project compilation order prepend project names in order
#CND_PROJECTS=$(shell ls ${CND_SOURCEDIR} -1)

# build environment
MKDIR=mkdir
CP=cp
GREP=grep
NM=nm
CCADMIN=CCadmin
RANLIB=ranlib
CC=gcc
CCC=g++
CXX=g++
FC=gfortran
AS=as

# C Compiler Flags
CFLAGS=
# CC Compiler Flags
CCFLAGS=
CXXFLAGS=
# Fortran Compiler Flags
FFLAGS=
# Assembler Flags
ASFLAGS=
# Link Libraries and Options
LDLIBSOPTIONS=${CND_LINKERLIBOPTS}

all:

clean:
	$(info project: $(PROJECT))

build: $(CND_PROJECTS)

$(CND_PROJECTS):
	make PROJECT=$@
#	make -f makefile build_prj PROJECT=$@

$(PROJECT):
	$(info project: $(PROJECT))

build_prj:
	$(info project: $(PROJECT))

install:

printallvars:
	@$(foreach V, $(sort $(.VARIABLES)), $(info $V=$($V)))

printenvvars:
	@$(foreach V, $(sort $(SYS_ENV_VARS)), $(info $V=$($V)))

printscriptvars:
	@$(foreach V, $(sort $(.VARIABLES)), $(if $(filter-out environment% default automatic, $(origin $V)), $(info $V=$($V))))
#	@$(foreach V, $(sort $(.VARIABLES)), $(if $(filter-out environment% default automatic, $(origin $V)), $(warning $V=$($V) ($(value $V)))))
#	$(foreach v, $(sort $(filter-out $(SYS_ENV_VARS) VARS_OLD,$(.VARIABLES))), $(info $(v) = $($(v))))
