STREAMS

- il protocollo di comunicazione deve essere uguale al protocollo di serializzazione delle seq. quindi, sugli stream viaggiano solo seq
- => definire il protocollo di serializzazione delle sequenze e mantenere sempre aggiornato il documento di specifica
- pensare a due protocolli complementari: uno binario, uno textual come già definito per le seq.
- per gli stream c'è il problema di entrare in synch con la trasmissione (all'inizio leggo una seq di cui la trasmissione è precedentemente iniziata)
  (caso in cui uno stream trasmette indipendentemente e poi un altro stream si attacca per leggere la trasmissione)
- uno stream -> una sequenza di sequenze (pacchetti). ciascuna di queste può incapsulare più seq (canali)
- definire (quando necessaria) una base tempo per il synch? ...canali con diversa base tempo?
- modello simile alle socket

ATTENZIONE!!! la velocità di trasferimento dello stream deve essere scelta tale da consentire che tutti i canali 
vengano trasmessi almeno alla propria velocità ed inoltre deve consentire un mux che anche se dinamico quando i 
canali hanno velocità non multiple tra loro, che in ogni momento non metta in competizione due canali (ad es se 
alcuni canali hanno campioni con un gran numero di bit potrebbe facilmente capitare che se metto un pacchetto di 
un certo canale poi un altro canale arriva in ritardo o viceversa), inoltre la velocità di trasferimento implica 
anche il delay minimo che impone il primo campione...
ios quindi dovrebbe essere legato al trasporto fisico il quale deve poter garantire una velocità minima, una certezza 
ed una correttezza del trasferimento...attualmente nei pc non esiste tutto ciò...è tutto asincrono e si spera che 
arrivi in tempo...per questo nacquero gli os real-time...ora è vero che io non posso garantire niente perchè in genere 
non starò su os real-time, ma lo gestisco lo stesso perchè sarà una parte importante che si riflette sul hw e sulle 
semplificazioni e standardizzazioni che implicherebbe in hw compliant con gli standard sunaptos...

signal o stream: flusso di dati unidirezionale asincrono o sincrono con caratteristiche (temporizzazione, dimensione 
campione e codifica) prefissate sul quale viaggiano sia pacchetti dati che pacchetti info su richiesta (???) o 
temporizzati...per i segnali sincroni serve la freq di campionamento mentre per i segnali asincroni il max-delay 
accettabile...lo stream si occupa di impacchettare e ricostruire l'informazione durante la trasmissione (tipo il tcp) 
ovvero che i pacchetti arrivino nell'ordine giusto (quando richiesto), mentre nel caso asincrono (oggetti di 
dimensioni anche molto variabili) è sicuramente richiesto che i pacchetti siano riordinati quando un oggetto è 
suddiviso in più pacchetti...
in pratica sullo stream passano "oggetti" che possono venire o meno raggruppati ed ordinati ogni oggetto viene 
impacchettato (anche se un oggetto entra in un pacchetto, mentre se ad un oggetto corrispondono più pacchetti il 
raggruppamento ed ordinamento è obbligato!) l'header del pacchetto contiene info sul pacchetto indispensabili allo 
spacchettamento, una volta spacchettato l'oggetto ha come header la codifica (cioè che cosa è, e come è memorizzato...
ad es. campione video rgb, campione audio pcm16, buffer di sequenza complessa, ecc.)...
NB queste codifiche devono essere più generiche possibile...pensare bene!!! ...ad esempio potrebbero essere: sequenza 
(ovvero ogni tipo di oggetto), update di substruttura di sequenza (ovvero pezzo di sequenza che è cambiato con 
associato un id per sapere a quale root seq fa riferimento...), campione completo di un flusso continuo (sincrono o 
asincrono es. audio/video/mouse/tastiera/ecc.) questo non è altro che una seq con dentro anche la codifica del 
campione...

