PROCESSI, IPC, SICUREZZA COMUNICAZIONE E GESTIONE, ARCHITETTURA

- un eseguibile lancia il primo srv tramite un dll-loader e tutti i srv autonomi (cioè con il loro process space)
- gli altri srv richiamati da altri srv nei propri process space, vengono istanziati da un dll-loader
- i due casi sono analoghi, perchè è sempre il dll-loader ad istanziare il srv
- per lanciare srv remoti qualcuno deve lanciare l'eseguibile con i giusti parametri e sul giusto pc e che stabilisca l'ipc con il chiamante
- il qualcuno di cui sopra deve avere la stessa iface del dll-loader per rendere il tutto trasparente -> loader
- quindi ci sono (per il momento) due loader: (1) same-process-loader, (2) separate-process-loader
- loader caso generale, un nuovo srv viene istanziato in:
  - stessa istanza OS, stessa istanza processo (cioè stesso pc, stesso processo)
  - stessa istanza OS, nuovo processo
  - altra istanza OS, nuovo processo
  (- stessa istanza OS, altro processo)
  (- altra istanza OS, altro processo)
NB qui non ha senso considerare i servizi, poichè i servizi sono dei srv particolari e le connessioni ad essi vanno considerate ad un livello di 
astrazione superiore alle connessioni ai processi!!! ...posso implementare la connessione ipc a srv in istanze di altri processi che equivarrebbe al caso 
in cui diverse classi di uno stesso processo utilizzano un'altra classe...quindi con i relativi problemi di sincronizzazione ed anche sicurezza dei dati 
per cui devo pensarci bene prima di prendere in considerazione questa eventualità anche se sembrerebbe giusto averla per generalità maggiore...

i discorsi di cui sopra evidenziano che ci sono due possibilità per il loader (o meglio per l'entità che prende le decisioni di loading) ovvero: 
un unico loader a cui tutti possono accedere, oppure più loader che interagiscono sulla base di un web of trust...

è un discorso molto importante perchè avviene anchein locale, cioè un processo parte con il suo loader e tutti i srv istanziati in quel processo possono 
utilizzare questo loader e fidarsi ciecamente di esso, ma appena considero di chiamare un srv come processo separato, allora ci sono due loader...se 
volgio mantenere il modello del loader unico allora faccio si che il loader sia sempre in un processo a se e devo stabilire una ipc con esso...
NB qui poi ritorna l'atavico problema che questo loader dovrebbe essere in grado di caricare srv in altri processi oppure un pezzo di esso deve far parte di 
ogni processo...
...in ogni caso anche avendo un solo loader nel OS, quando mi connetto ad un altro pc, necessariamente li ci deve essere un'altra istanza di loader su cui 
non ho nessuna giurisdizione!!! ...per cui forse mi converrebbe pensare di base ad un sistema comunque decentrato...anche perchè così comincerei ad 
affrontare i problemi che comunque dovrei affrontare per la rete decentrata in generale...

quindi lo scenario potrebbe essere: il primo può fare tutto => tutti possono fare tutto e serve un sistema per cui tutti insieme si limitino e controllino 
a vicenda...oppure ognuno è limitato e tutti insieme possono fare tutto => il primo deve poter fare il minimo indispensabile per generare il tutto...cioè 
serve un sistema di crescita...

il primo modello implica due poteri: "fare" e "veto"
il secondo modello implica che il potere è suddiviso in più parti necessarie

in realtà si può pensare ad un sistema misto, ovvero: un loader è la massima autorità (ed unica?) di tutti i children e tra pari stabilisce un trust...ma 
ancora non mi convince perchè rimane il problema che o il loader può istanziare da solo fuori dei propri confini (impossibile quando si va su altri pc), 
oppure il loader sta in parte dappertutto...per cui ancora una volta ritorna la conclusione che è meglio decentralizzarlo...ok!!!

quindi consideriamo la situazione ad albero/piramide/livelli-di-astrazione per cui i loader sono specializzati per il loro "universo" quindi possono 
istanziare in quell'ambito ma non in quelli sottostante od in quello soprastante (così sono confinati e limitati, ma tutti insieme fanno tutto, cioè 
sarebbe il secondo modello, quelloche avevo sottovalutato...).
quindi c'è un loader del processo e può far tutto nell'ambito di quel processo, ma non in altri processi, poi c'è il loader del OS che può istanziare 
nuovi processi, ma non può istanziare srv nell'ambito di qualche processo già esistente (però glielo può chiedere gentilmente e se il processo approva 
gli concede il favore...), altresì il loader di sitema non può istanziare processi in altri OS, ma lo può chiedere al loader di quel os...continuando nella 
ricorsione poi c'è il loader di os (da vedere come quando si istanziano delle virtual machines oppure più propriamente quando si accendono dei pc) che può 
accendere dei pc (o vm), ma non può istanziare dei processi negli os di quei pc (ma glielo può chiedere...)...in breve ogni loader può istanziare solo 
suoi pari!
NB il rimando ad altri loader diversi da quello locale avviene sempre tramite quello locale, perchè è lui che decide (eventualmente su gentile richiesta) 
se/come/quando istanziare srv su altri universi...ma il motivo forse più importante è che altrimenti il codice locale dovrebbe gestire lui il rimando ad 
altri loader ed avrebbe due loader da gestire...insomma un casino! se è invece il loader a gestire va bene visto che è già lui che gestisce le politiche!

così ho ottenuto il sistema perfetto! un sistema ibrido sia autarchico sia capace di web of trust!

quindi: 
- iface "loader" deve essere universale
- loader nel processo = classe c++ che può solo caricare le dll
- loader di sistema = processo a se stante che può istanziare altri processi, ma non può caricare dll dentro processi esistenti
- al di fuori del sistema si usa il web of trust (wot)
- pensare ai problemi nei casi che il wot sia assolutamente paritario, che esistano gerarchie e/o uno o più dominatori assoluti...

problema di ricorsione: 
- chi istanzia il loader del processo? -> il processo stesso
- chi istanzia il processo? -> il loader di sistema
- chi istanzia il loader si sistema? -> il sistema stesso
=> tutto il ragionamento fila!!!

=> bootsequence:
- qualcuno carica il sistema e lo esegue (il bios)
- il sistema lancia il loader il esegue nel suo spazio i srv a lui necessari
- il sistema impone al loader di lanciare tutti i srv (come processi separati) che costituiscono la boot sequence
problema: la boot sequence in questo modello è hardcoded nel sistema e non potrebbe essere diversamente visto che appena lanciato il sistema non esiste 
nessun altro srv...per cui uso l'escamotage (un po' meno sicuro...) di hardcodare il minimo indispensabile e poi delegare tutto ad un srv...

quindi, bootsequence:
- il bios carica il os
- os lancia il loader di sistema come processo separato
- os ordina al loader di lanciare il srv "boot" come processo separato
NB è importante che sia il loader di sistema a lanciare boot e non il os direttamente, perchè nel primo caso loader durante l'istanziazione da un riferimento 
a se stesso che poi boot utilizzerà per lanciare altri processi separati, nel secondo caso boot non sarebbe a conoscenza di loader superiori e potrebbe 
istanziare solo srv nel suo process space (tramite il suo loader interno), quindi di fatto nel sistema sarebe impossibile lanciare nuovi processi!!! 
lo stesso discorso vale ricorsivamente a tutti i livelli...in pratica loader è l'unico srv che non viene istanziato (mai) da altri loader!
NB è evidente che boot può anche chiedere al loader di caricare un altro loader di sistema e terminare se stesso (previa verifica dei criteri di sicurezza) 
che dimostra la dinamicità, la generalità e la versatilità del modello...ovviamente è un esempio che in pratica non verrà mai utilizzato/permesso...

NB nel modello non è stato ancora considerata la comunicazione tra srv cioè la ipc...
come regola generale ogni srv dello stesso livello utilizzano un determinato set di tecnologie per la comunicazione (memoria condivisa, pipe, ecc.) ed un altri 
determinati set per altri livelli...cioè in generale c'è una certa uniformità all'interno dello stesso livello, ma non necessariamente tra livelli...però tutto 
ciò deve essere trasparente!!! infatti ogni srv comunica con gli altri come se fossero all'interno dello stesso processo e poi tramite wrapper (eventualmente 
incapsulati) si passa su altri canali...

all'interno del processo si comunica direttamente tramite chiamata di metodi ed oggetti, tra processi (stesso os) si comunica tramite shared memory o socket, 
tra processi su diversi os si comunica tramite socket...quindi per semplicità mi conviene implementare seriamente per prima la comunicazione tramite socket 
perchè almeno la riutilizzo in due casi, la shared memory l'ho già fatta semplicemente, ma non è neanche lontanamente "seria"...però basta che la tengo 
presente per generalizzare il modello di comunicazione (che dovrebbe essere universale, ma almeno deve essere agevole per shared memory e socket)...

generalizzazione del modello di comunicazione:
- attualmente nel processo passo il puntatore al loader
- attualmente ai processi passo la chiave per la shared memory (se fossero socket, passerei ip e porta)
- inentrambi i casi è un valore
- in entrambi i casi non c'è sicurezza alcuna perchè sia il puntatore che la chiave hanno uno spazio di variabilità troppo limitato per poter essere 
considerate delle password e perchè la comunicazione è in chiaro!
- devo permettere la comunicazione criptata
- è necessario un indirizzamento
- quindi per la comunicazione nella fase di istanziazione devo fornire: tipo comunicazione (tecnologia, protocollo, ecc.), indirizzo, tipo encripting, chiave/i
- le quattro suddette informazioni devono essere standardizzate e forse anche hardcodate!!!
- magari più che hardcodate, basta usare una tabella standard che associa ad id di tipo (proto ed encripting) dei srv che li gestiscono...
- in realtà forse è più semplice e generale vederla in altro modo...
...quando il loader istanzia un nuovo processo possiamo vederlo come il os che lancia due cose il loader e boot...ora se facciamo la stessa cosa nei processi 
allora io hardcodo due chiamate e la seconda prende la config di boot che gli ha passato loader...questa si riduce a caricare il gestore di comunicazione 
con il loader, il srv da istanziare ed eventualmente il gestore di comunicazione tra il srv e qualcun altro...

ogni loader:
- carica i srv nel suo "universo"
- stabilisce i canali di comunicazione tra i srv che si invocano
- stabilisce i canali di comunicazione con il loader chiamante e con i loader degli "universi" inferiori (children)
- è responsabile delle politiche e della sicurezza

ogni srv:
- ha una stessa iface ed accede a tutte le funzioni tramite id-function
- pertanto gli stub client e server sono unici per tutti

organizzazione del codice:
- gli stub li metto nella core library
- il dll loader è un semplice wrapper, il sistema sottostante gestisce i counter per evitare di ricaricare la libreria
- il dll loader per colpa dei correnti os attinge dal file system del os sottostante, per cui la sua interfaccia nasconde ciò ed accetta solo i nomi/id univoci
- in futuro il dll loader attingerà da un qualunque storage...anzi forse meglio implementarlo subito...o comunque predisporlo...
- sia la creazione dei srv che la distruzione può essere operata solo dal loader...bisogna inventare meccanismi per impedire che lo possano fare altri...
- probabilmente basta indicare nella iface che costruttore e distruttore sono protected e loader è la friend class...
- forse il costruttore non può essere protected perchè altrimenti la funzione create del dll loader non compilerebbe...pensare bene...
- in realtà potrei fare il costruttore protected, ma non impedirebbe che ce ne siano altri, per cui evito...
- inoltre avendo una iface universale, chi crea un srv non deve pubblicare gli header e gli utilizzatori non hanno bisogno di header...
- loader non deve essre una iface bensì una classe perchè i remote loader vengono utilizzati tramite l'iface "service"!!!
- anzi no! il loaderclient implementa service e loader così è più flessibile...pensare bene...
- la cosa importante è che loader al contrario di tutti gli altri srv possa distinguere se la richiesta arrivi dal processo stesso o da remoto...
- loader client fa uso di dll-loader e di ipc
- ipc è suddivisa in due iface (server e client)...anzi è meglio se le considero dei srv!!! ...NB gli posso passare il puntatore a srv come sequence!
- quanto sopra è potenzialmente molto pericoloso per via dei puntatori, ma posso risolverlo facendo si che loader invoca ipc e poi ipc chiede a loader 
il srv tramite nome/id-istanza e loader gli ritorna il puntatore tramite getservice che è la cosa standard e sicura...è un po' complicato ma regge...
- creare degli operatori c++ in service per rendere più agevole il fatto di avere res sia come risultato che passato come reference tra i parametri...
- serve un singleton che gestisca le eccezioni
- serve una mappa di tutti i srv istanziati con le relative lib (e hinstance)
- potrei far si che sequence overloadi gli op . e -> facendo si che prenda l'elem 0 lo casti a service ed invochi il metodo f e nascondere così il 
puntatore a srv...ma nb dovrei far si allora che i services non siano creati con new ma come temporary...(ma allora verrebbero deallocati?) oppure devo 
gestire le seq-srv impostando un flag interno? ...oppure mi basta usare il template casting?
- generalizzando il concetto precedente io posso pensare a delle particolari seq che sostituiscono le classi e cioè una seq che al posto 0 ha una sottoseq 
che ragruppa tutti gli oggetti della classe, negl altri el invece memorizzo dei puntatori a funzioni di un unico tipo standard (ma potrebbero anche essere 
più di uno) che accetta come primo parametro il riferimento alla seq stessa e come secondo parametro i parametri della funzione...così ho reimplementato la 
programmazione ad oggetti, ma ora è estremamente dinamica (forse troppo) perchè non ci sono più vincoli e controlli di compilazione. creando un enum posso 
fare chiamate non più solo tramite indice, ma anche per nome!!! questo ultimo aspetto in effetti annulla le controindicazioni di questa implementazione...
così potrebbe essere forse anche possibile pensare di identificare le zone di memoria dove per ognuna di queste funzioni c'è il codice cosicchè potrei 
anche serializzare e trasmettere il codice!!! ...ma quest'ultima cosa è solo nel lontano futuro, perchè ora avendo sotto diversi os con troppe diversità 
anche nelle diverse istallazioni dello stesso os, non è una cosa tanto praticabile...
- siccome il c++ non supporta il ritornare oggetti byref, devo inventare un sistema che tenga il conto degli utilizzatori delle seq utilizzando i distruttori 
di oggetti per decrementarli...oltre ad essere complicato e non sicuro, potrebbe utilizzare molta memoria per la gestione...devo allora trovare un modo 
semplice per gestire il ciclo di vita degli oggetti...cioè qualcosa di analogo agli smart shared pointer, ma con la lifetime decisa dal'architettura così 
che lo sviluppatore non se ne debba preoccupare...cioè degli smart pointer pensati per sunaptos e le sequence!
- tutto sta nelle politiche di inserimento e copia di puntatori di sequenze nelle sequenze...cioè se creo una seq scoped, allora tutto il contenuto 
dovrebbe seguirne la sorte, se creo una seq con new no...cioè di regola le sottoseq dovrebbero essere distrutte con la master...ma non sempre! cioè è semplice 
mettere un flag nelle seq per dire se devono distruggere i sottooggetti, ma dovrei definire delle regole automatiche in modo da non lasciare la totale 
responsabilità allo sviluppatore, ma lasciandogli solo la possibilità di gestire casi particolari...
- una semplice implementazione con sideeffect positivi (forse la migliore) potrebbe essere quelle di tenere una mappa dei parent, cioè una mappa globale 
<seq-pointer, set-parents> più la mappa (che reimplementi la variante non deterministica esistente) interna ad ogni seq che dice se ad ogni posizione c'è 
una seq (o un elem generico, cioè un number...), quindi quando termino una seq tolgo la relative chiave e termino il set-parents associato, quando invece 
rimuovo una sottoseq da una seq, ricerco nella mappa con chiave=seq e dal set rimouvo il puntatore=sottoseq, SE set-parents diventa vuoto, allora termino 
proprio seq e rimuovo la chiave dalla mappa (e termino set-parents)!!! questo mi sembra il modo più sicuro ed inoltre ho gratis i link inversi ai parent...
ovviamente ogni volta che inserisco una sottoseq aggiungo il riferimento nei parent (pensare a cosa deve succedere con la copia e se devo rendere privato 
il copy constructor...)
- aggiungere due metodi alle seq: toText e parseText

architettura:
- nodo è qualunque cosa che possa comunicare tramite un mezzo riconosciuto dal sistema sunaptos ed una iface/protocollo standard ed unico
- nodo è un oggetto a cui viene data vita (viene acceso, gli si da lo start, ecc.) e diviene pertanto dinamico ed interattivo...
- un nodo può avere degli organi (hardware) ed in teoria solo lui potrebbe delegarne l'utilizzo che altrimenti nessuno potrebbe accedervi...
- un nodo se non è elementare può creare dei sottonodi, se è così il primo è il kernel ed ha potere sulle istanze, storage e comunicazione...
il secondo è il netgen (boot) colui che da il big bang alla sottorete...
- gli altri sottonodi (netgen incluso) appena creati possono comunicare solo con il kernel...poi tramite lui possono connetersi tra pari...
- ogni kernel agisce solo nel suo universo, ovvero usa gli organi del suo nodo...ma NB gli organi del suo nodo potrebbero essere accessibili anche da 
altri nodi...questo permette che i processi accedano al hd per avviare srv...ma la cosa del hw condiviso non mi piace molto...pensare bene...
- in pratica il kernel è il solo che non ha limiti di sistema, mentre tutti gli altri srv sono totalmente limitati ed ogni cosa chiesta è sottoposta a policy...
- il kernel è, da un punto di vista astratto, unico (come programma) ma poi l'implementazione può essere fatta in diversi linguaggi e sistemi...
- è possibile avere dei srv che fungono da driver per un certo hw, infatti il kernel dentro il srv concorda con gli altri kernel superiori (in pratica con 
il kernel del os) se il srv in questione può gestire l'hw richiesto, se si il kernel del srv accede lui direttamente al hw per conto del srv...ovviamente 
assicurandosi che l'utilizzo rientri in quanto concesso...
- in pratica ogni kernel ha fiducia totale e tutti insieme applicano le policy...ma ovviamente...più ogni kernel viene limitato fisicamente nelle sue 
possibilità, più il sistema è sicuro...pensare bene...
- storage, communication e hw-access devono avere l'iface srv, o hanno delle iface proprietarie come loader? in teoria anche loader dovrebbe avere l'iface 
srv...in realtà sarebbe più flessibile, generale ed espandibile, ma poco pratica...forse usando degli operatori potrei far si che l'iface srv sia molto 
usabile, rimarrebbe solo il costo dell'overhead di avere dei metodi dedicati, ma forse è talmente basso che conviene...pensare bene...

da rivedere nel codice:
- sequences rivisitazione totale e soprattutto gestione della persistenza e della copia ed in particolare come ritorno di funzione
- implementare le insert come memcpy altrimenti intervengono le conversioni di tipo operate dal compilatore!!!
- pensare ai puntatori nelle seq (in particolare service), come ritornarli in modo da facilitare l'uso
- aggiungere due metodi alle seq: toText e parseText, in particolare toText fatta apposta per il logging
- pensare alle seq come sostitute delle classi con puntatori di funzioni e sottoseq di oggetti...ed il polimorfismo? forse diventa inutile...pensare...
- pensare ad un gestore delle istanze di sequenze che specifichi i tipi/codifica (integer/float/testo/ascii/utf-8, ecc.) di ogni seq/elem
- service standardizzazione delle chiamate tramite enum in modo che l'header pur se facoltativo, è utile per evitare i "magic number" nel codice
- service standardizzazione delle chiamate tramite enum anche per i params (es. params[enum::name]="name", ecc.) eventualmente anche con macro...
- service distruttore e costruttore protected per garantire che il ciclo di vita sia gestito unicamente dal instance manager
- ipc bidirezionale, in particolare con il km (KernelMaster)
- ipc server su un srv viene attivato solo su richiesta asincrona (e non all'avvio del processo) e magari più di una connessione con svariati srv
- gestione eccezioni
- log sia permanente nel codice che log di debug (macro preprocessore, ifdef ecc.)
- risistemare la nomenclatura del singleton
- creare un header "sunaptos" globale
- pensare alla sincronizzazione tra processi in generale ed in particolare per stabilire le connessioni ipc con il chiamante (implementare waitEvent)
- riprogettare l'ipc ed includere l'ipc esterna (socket, o simili...)
- srv dll solo con create e "Sequence info()" (iface, version, name ecc.)...mi piacerebbe di più come funz del srv, ma serve un'istanza (static not possible)
- srv dll create: passare kernel come service e non come kernel...tanto è comunque slegato dagli enum di kernel che li posso usare indipendentemente...
- srv dll create ritorna Object* e non Service* per maggiore generalità (ad es se faccio le seq adattabili ai puntatori allora mi serve sempre Object*)
- pensare se si possono inviare params per l'istanziazione di un srv
- km deve prendere da quanche parte i params per connettersi con kn (KernelNetwork)...curiosità: local, master, net -> kl, km, kn...
fatti:
- service rivisitazione evitando il return by reference...sono di più i casini introdotti che il guadagno di performance che il futuro compilatore ottimizzerà
- passare al linking dinamico di core.dll anzichè statico
