SERVIZI

attualmente:
- dlib.h esporta le funzioni: create/destroy e try_create/try_destroy
- serviceloader deriva dynamiclibraryloader, esponendo i metodi: create/destroy e try_create/try_destroy
- service l'interfaccia "f" ed operator() che richiama "f", più metodi generalizzati
- service offre un set (piccolo) di metodi generalizzati che coprono il 90% della tipologia di metodi utilizzati nella programmazione e per tali metodi, 
  la trasparenza rispetto alla invocazione remota è totale poichè i server/client della ipc wrappano questi metodi da/verso "f". 
  tale trasparenza è totale anche rispetto al particolare srv, infatti service è la base class comune. per eventuali altri metodi, 
  si usa "f" con interi/enums/stringhe per nome metodo che è leggermente più lento, ma è universale. 
  tali metodi nella classe base sono implementati, ma generano un'eccezione "not found", i srv che usano un metodo lo reimplementano, 
  i metodi non utilizzati tramite la clausola "using" utilizzano la versione della classe base con le eccezioni, così chi usa per sbaglio un 
  metodo non implementato dal srv, si ritrova un'eccezione che glielo dice...NB controllo dell'esistenza di un metodo in una classe è passato dal 
  compile time, a runtime (piccolisima controindicazione a fronte degli enormi vantaggi). 
  lista metodi generalizzati:
  create
  destroy
  get
  set
  start
  stop
  notify
  lock
  unlock
  try_lock
  wait_unlock
  open
  close
  read
  write
  flush
  insert
  remove
  copy
  move
  size
  resize
  search
  replace
  prev
  next
  show
  hide

- load come global function, loader come global e serviceloader come local object inizializzati da _core.dll
- per default un srv parte e rimane attivo (tramite "loader.wait_unlock") finchè non viene chiamato "loader.stop" dal srv stesso, 
  i srv che agiscono come comandi devono richiamare esplicitamente stop() alla fine del loro costruttore per terminare subito.
- eccezioni gestite nella macro def di "f" con il throw se method not found...verificare funzionamento!

---

todo:
- ripensare il meccanismo di mantenere in vita il processo e chi si occupa della sua terminazione (server vs command)
- ripensare tutta la struttura e la faccenda delle macro: basta un iface con molti metodi e che danno eccezione (metodo non implementato), 
  quelli che il srv esporta li deve ovviamente reimplementare, il metodo f può rimanere per garantire infiniti metodi esportabili
  per la rpc ci pensa un srv dedicato come è già attualmente
  l'unica macro che serve è quella per l'export delle funzioni di dll dllmain/create/destroy
  oppure service è pure abstract ed offro due implementazioni ServiceNull e ServiceException che impostano i metodi non implementati che ritornano null o eccezione
  oppure service ha solo f e dei metodi get_ifaceXYZ() che fanno il cast a particolari iface ciascuna con pochi metodi
- eccezioni attraverso i confini delle dll: creazione/distruzione srv, chiamate di metodi dei srv. anche attraverso ipc!!! ...quindi anche eccezioni serializzate!
- eccezioni basate su sequence su un  logger configurabile
- in dlib.h riflettere su "return (Service*) SERVICE_ERROR;\"
- pensare se come params e res, anzichè usare delle classi sequence, non sia meglio utilizzare delle interfacce serializable
- de/serializzare seq per ipc a blocchi per seq molto grandi
- utilizzo di shared pointer per ovviare a memory leaks
- srv da pensare ed implementare: log, config, filesystem, storage, network, ui, input
- alcuni srv names sono virtuali (interfacce) come ad es config, log, ecc. ed il loader in base alla sua config decide quale srv reale associare
  cioè se chiamo "config" (che non deve esistere alcun srv con questo nome), il loader decide se restituirmi "config_simple", o "config_advanced". 
  NB le iface implementate sono definite dalla config del loader, non serve che il srv dichiari quali ifaces implementa (ulteriore libertà)

---

services default other general methods:
- listen
- accept
- connect
- put
- update
- convert
- map
- sort
- order
- begin
- end
- new
- delete
- edit
- clear
- reset
- dispatch
- fill
- generate
- merge
- save
- undo
- position
- type
- set_type

srvs and ifaces methods have a ufname (universal full name) and in practise omitted part is identified by current context (like cd and relative paths ./, ../, etc.)
revise streams and operators on Service

pensare ogni params dei vari srv nella stessa ottica delle shell dove input/output sono degli stream che possono essere scritti o passati tramite pipe
