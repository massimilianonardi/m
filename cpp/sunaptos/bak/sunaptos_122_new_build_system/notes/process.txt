PROCESSI, LOADER, IPC, SICUREZZA COMUNICAZIONE E GESTIONE, ARCHITETTURA

- process lancia un loader specificato ed un srv specificato (accetta parametri per il loader e per il srv da lanciare da linea di comando). 
  questo rappresenta la massima generalità perchè il loader da caricare può essere molto evoluto ed avere una configurazione che stabilisce tutte le policy
  per quel srv (ad es. quale implementazione di config restituirgli)
- al momento ogni srv può accedere alle api del sistema sottostante, pensare se è possibile un'architettura per cui determinati srv hanno un uso esclusivo 
  di dterminate prerogative (es. solo loader può lanciare altri processi). in pratica, è possibile sviluppare un tale os? ...penso di si.
- definire il boot process anche pensando al futuro os
- definire interfaccia stream e stream di sistema stdout, stderr, sharedmemorystream, file stream, netstream, ecc.
- pensare architettura loader avanzato: client/server, wot (web of trust)
- attualmente il loader è insito in ogni processo, in futuro sarà un modulo del kernel richiamabile come api di sistema
- ogni loader può istanziare nel suo subuniverso (processo->srvs, os->processi, net->os)
- se esiste un sistema di comunicazione tra diversi livelli di universo, allora si può chiedere istanziazione ad un super/sub universo
- al di fuori del sistema si usa il web of trust (wot)
- pensare ai problemi nei casi che il wot sia assolutamente paritario, che esistano gerarchie e/o uno o più dominatori assoluti...
- attualmente il local loader carica dal file system, nel futuro os attingerà da un qualunque storage (anche rete, ecc.)
- pensare alla sincronizzazione tra processi in generale ed in particolare per stabilire le connessioni ipc con il chiamante (implementare waitEvent)
- srv lock che funzioni attraverso processi separati (client server architecture?)
- ipc come stream
