una sequenza è un oggetto dove dentro posso mettere qualunque cosa con un ordine lineare (1D). 
cioè è un nodo con diversi oggetti, la presenza di sotto-sequenze da un punto di vista astratto la può far vedere come un grafo. 
teoria: può contenere qualunque cosa; pratica: devo imporre o alcuni tipi, o un'interfaccia comune. 
scelta: seq contiene elementi base, o sotto-seq...non si perde di generalità perchè anche un essere umano può essere ricondotto 
        ad un grafo di triplette di codoni (elem base: tripletta di codoni ~ byte ~ mattone ~ ecc.). 
elem base: byte; seq: insieme ordinato di byte e seq. -> 
def matematica ricorsiva: seq = <singleton base> OR <insieme ordinato di seq>. 
in questa def anche il byte è una seq
NB in questa visione (la più corretta naturalmente cfr. essere umano) anche un int sarebbe una seq e potrebbe sembrare poco pratico, 
ma usando i metodi template (T1 res = seq.get<T1>(T2)) ed i cast verso i numeri stringhe base, mantengo sia il concetto astratto 
che la praticità quotidiana. ovviamente T2 deve essere seq base, mentre T1 se è base allora è castabile a numeri o stringhe, 
altrimenti a seq (seq castabile a tipi complessi tipizzati quando saranno implementate le seq tipizzate, altrimenti cast a seq e basta). 
NB dalla def "insieme ordinato", considerando che l'ordine è per definizione lineare e che deriva dalla linearità ed ordinalità del tempo, 
l'indice di ricerca deve essere lineare. 

quindi: le seq sono progettate puramente in modo ricorsivo (costruttori e metodi ricevono e restituiscono solo seq) con l'aggiunta di 
cast delle seq base da/verso i tipi elementari. 
def:
  elem: elemento base essenziale e non scindibile (byte). 
  number: insieme ordinato di elem base (byte[n] castabile a int, long, char*). 
  seq: insieme ordinato di number e/o seq. 
NB problemi con number: 
- la dimensione. per coerenza con la natura (es. codoni) deve essere definita in "elem" cioè bytes. 
- anche questa definizione comporta un limite intrinseco (seppur altissimo). 
-> anzi la dimensione è infinita e quindi non gestita esplicitamente, ma solo tramite seq che nei casi pratici può essere castata a numeri
quindi: in generale ci sono solo elem e seq!!! sta a chi accede ad una seq fornire una corretta seq-indice (con le seq tipizzate sarà più sicuro)! 
NB anche se usassi gli indici interi il discorso sarebbe lo stesso: chi accede, deve sempre fornire un indice corretto! 
restringere il tipo non cambia questo fatto, quindi tanto vale ampliarlo. 

NB seq pensata così è "lenta" per via della conversione degli indici da/verso seq (soprattutto nei cicli for) e per le operazioni matematiche 
(es. incremento di un indice, espressione algebrica, ecc.), ma va bene così perchè seq deve essere usata come standard di memorizzazione ed 
interfaccia di comunicazione, per le elaborazioni possono anche essere usate le strutture basilari del linguaggio utilizzato, basta che siano 
solo interne (es. prendo parametri come seq, casto a vector (veloce), faccio il ciclo for, ritorno la seq(vector)). 

alternativa: Sequence = union dei tipi base più puntatore Sequence* e tutte le operazioni sono funzioni, non metodi! cioè elimino la classe. 
però così perdo il distruttore che dealloca la memoria. potrei costruire la classe con dentro la union...ma sarebbe tutto come prima. 

implemento seq come classe costruita intorno ad un buffer di larghezza pari al massimo sizeof sui tipi base (compreso void*), così in pratica 
è veloce come un array o quasi. in realtà l'implementazione deve essere molteplice ed adattiva. 

def: element = anything (char, number, sequence*, service*, ecc.)
def: sequence = insieme ordinato di elements <element>
- in questa visione element fa le conversioni di tipo (costruttori ed operatori di cast) e sequence è solo un array dinamico. 
- l'uso di template operators per le seq previene l'utilizzo degli operatori di default che fanno altre cose e serve a nascondere un cast esplicito degli argomenti. 

NB seq(2) = 5; cosa fa? rimpiazza tutta la seq all'indice 2, o ne cambia il contenuto? nel secondo caso i puntatori a quella seq puntano al valore cambiato. 

TODO: 
- riconoscimento dei puntatori a seq (per la serializzazione delle sottoseq) 
- gestione del ciclo di vita e scope delle seq almeno per le seq inserite come sottoseq. 

NB: possibile implementazione della persistenza delle sottoseq potrebbe essere che appena inserisco una seq in un'altra questa fa una new seq e gli assegna il puntatore 
del buffer uguale a quella passata e a quest'ultima, pone il puntatore a zero. così facendo le seq contenitore "ruba" il buffer di quella passata che così diventa svuotata 
ed è garantito che ogni buffer allocato sia persistente il necessario e non ci sono duplicati in giro...in realtà il meccanismo si può aggirare e quindi non è 
completamente sicuro, oltre al fatto che di per se già non è il massimo. 
