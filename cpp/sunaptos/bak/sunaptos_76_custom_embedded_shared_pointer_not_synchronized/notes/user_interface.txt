USER INTERFACE

- srv base che offre le funzioni di basso livello uniformate e può switchare il driver (es. da api di sistema (win32, x, gtk, ecc.) ad opengl, direct3d, ecc.)

- GraphicBox è il più semplice elemento ed è costituito da:
  * relative position
  * size
  * background color
  * image with transparency
  * overall transparency

- GraphicTextBox è il più versatile elemento che consente di fare quasi tutto ed è costituito da:
  * relative position
  * size
  * background color
  * background image with transparency
  * text string
  * text color
  * text font
  * text size
  * text style (normale, corsivo, grassetto, corsivo+grassetto) NB l'underline si ottiene con l'immagine di overlay
  * text transparency
  * overlay image with transparency
  * overall transparency

--------------------------------------------------------------------

- ci sono tre tipi di device: solo input, solo output, sia input che output
- ui è una cosa che prende flussi (stream) di input da utenti in tempo reale e fornisce ad essi dei flussi di output (non necessariamente strettamente correlati)
- una ui è uno stream-processor, in contrapposizione al concetto di "funzione" (esecuzione continua VS esecuzione one shot)
- es. gui è uno stream-processor che quando parte gli vengono automaticamente connessi mouse e tastiera come input e video ed audio come output
- una delle prime cose è individuare delle interfacce raw sia per l'input che per l'output
- una ui deve astrarre il più possibile dai device su cui poggia di modo che ad es. sia possibile switchare da una gui ad una aui (audio ui) solo cambiando i devices
- ad esempio posso astrarre diverse interfacce per l'output a seconda delle dimensioni (1D, 2D, 3D, 4D, ecc.), ma pensare ad unificarle
- input ed output come stream di modo che posso connettere le cose più impensabili (rete, video, audio, hdmi, hd, dvd, ecc.)

comandi di output specifici per alcuni output:
- render_image: può anche essere mappato come suono anche se non è pratico
- render_sound: può anche essere mappato come immagine anche se non è pratico
- render_video: può splittato e mappato su due device diversi (stereo e monitor) o intero (tv)
- render_3D_video: come sopra (3D->2D), o può essere mandato ad un generatore di ologrammi (3D->3D)
NB in generale per l'output andrebbero considerati i 5 sensi umani, poichè essendo l'utente un umano 
   i device out servono proprio per dare feedback all'utente quindi possono essere implementati anche 
   render_taste e render_smell...NB per il tatto c'è già il 3D al quale vanno aggiunte tutte le variabili 
   tattili non grafiche come ad esempio temperatura, umidità, vento, ecc.
NB andrebbero considerate anche pressione, gravità ecc. e qualunque cosa il corpo umano possa percepire...
NB viceversa input mappa i 5 sensi e qualunque cosa nell'universo in text/number
NB i comandi render_text/number/image/sound/video/3D vanno usati solo quando rappresentano i dati per il resto si 
usano le properties cioè si separano i dati dalla presentazione (skin). la differenziazione deriva dal fatto che 
le skin sono date a priori e fanno parte dell'app (anche se se ne possono scaricare altre, ecc.) mentre i 
dati derivano dai srv utilizzati. infatti il compito degli ui_elem è proprio quello di splittare output complessi 
derivanti dai srv e mapparli nei 5 sensi, cioè ui è la mappatura: user_interface = sequence -> human_senses
cioè la ui contestualizza i dati astratti conferendogli una particolare semantica
NB per i text/number va considerato che sono dati astratti che possono essere mappati teoricamente in ognuno dei 
5 sensi, quindi più i dati hanno senso come text/number e meglio è perchè mi lasciano libertà di scelta su 
come rappresentarli, quando invece voglio mappare text/number in uno dei 5 sensi per una migliore percezione 
(come ad es una percentuale in una barra di completamento, istogramma ecc.), questo va contemplato nelle 
properties proprio perchè mantenendo questo disaccoppiamento totale tra dati e presentazione, io comunque ho 
la massima portabilità dell'app su ogni output (a meno dei dati che per loro natura non sono text/number), 
scrivere le app è estremamente semplice e non richiede di scrivere la ui perchè viene automatica dalla 
logica della app e poi possono essere definite varie configurazioni di output che perfezionano l'esperienza 
di interazione (ad es usando audio/video come out, creo una skin multimediale che trasforma una semplice gui 
con solo controlli e bottoni con testo in un'app strabiliante)

NB per i comandi di input si presuppone che la ui permetta di accedere a tutti i dati gestiti dall'app per 
poterli de/selezionare, sempre la ui deve permettere di accedere a controlli che eseguano comandi sui dati 
selezionati, quindi un solo comando execute (senza parametri perchè cosa esguire e dato dal binding verso un srv) 
e comandi di de/selezione

comandi di input:
- execute: esegue il comando correntemente preparato e parametrizzato con le var interne del ui_elem
- select: seleziona il ui_elem
- deselect: deseleziona il ui_elem
- clear_selection:
- invert_selection:
- edit:
- clear:
- save_edit:
- cancel_edit:
- focus:
- highlight:
- create:
- destroy:
- show:
- hide:
- axis_??: coordinata percentuale (definire i valori standard...)
- character_??: "carattere" che può essere ascii, unicode ecc.
- value: numero
NB sono solo un esempio di tutti quelli che mi vengono in mente, le idee più chiare me le posso fare solo poi

NB esempi per ribadire che non si perde in flessibilità o potenzialità:
- un image viewer come xnview che cacha l'immagine successiva e che renderizza progressivamente in 
alta qualità è fattibile così: per la cache renderizzo l'immagine successiva in un controllo 
doppione settato come hidden, poi quando vado avanti swappo la visibilità dei due controlli e 
sull'altro cacho; per la progressiva hq, è analogo in uno ingrandisco fast e sull'altro dopo un timer 
renderizzo hq...NB qui emerge il tema del timing/sincronizzazione/real-time/ecc. che deve essere gestito 
dalla user_interface o dai srv sottostanti? ...pensare!!!
- altro esempio è un player video: posso mandare i frames decodificati dal srv, oppure mando lo stream 
h264 al renderer il quale a sua volta lo manda alla scheda grafica per la decodifica hardware...
anche qui ci sono due controlli (e due output renderer) distinti e qui la logica del disaccoppiamento 
comincia a venire un po' meno perchè la configurazione di decoding nel secondo caso sta nel renderer 
e non nel srv player che ora fa solo da dispacciatore dello stream preso dal file, oppure ancora posso 
fornire al renderer l'id di connessione al srv di storage ed il renderer prende lo stream da solo...
insomma l'accesso alle funzionalità o accelerazioni hardware avanzate creano problemi in questo contesto, 
devo solo assicurarmi di non precludermi la possibilità di utilizzarle pur mantenendo un alto (se non totale) 
disaccoppiamento

NB il concetto di fondo è che ogni cosa può essere un input od un output che di solito vengono utilizzati dai 
vari srv nei loro formati standardizzati...però ogni input/output generico può essere collegato ad una ui a 
patto di avere un opportuno srv di mappatura che converta input/output da/per comandi ui (render, select, 
ecc.)

NB problema: l'interazione utente avviene tramite lo specifico output utilizzato, quindi non 
posso considerare che l'input arrivi direttamente alla struttura "ui_seq", ma deve essere tradotto 
dal modulo di uscita utilizzato, cioè anzichè in->ui->out => in->out->ui perchè l'utilizzo delle 
caratterestiche dello specifico out fanno parte dell'esperienza di interfaccia e non della logica che 
sta letteralmente "sotto" cioè vi si arriva dopo tutti i filtri!

quindi: gli ui_elem sono unità logiche di in e/o di out ("rendering"); quelli "out" sono definiti da una 
query sui dati forniti da un srv/comando; quelli "in" richiamano srv/comandi, controllano altre parti della 
ui e modificano delle variabili interne usate per comporre i parametri da inviare ai srv/comandi

piccolo riepilogo:
- ogni classe di output ha un predefinito set di comandi che accetta in ingresso (es. mouse_move, ecc.)
- ogni classe di input ha un predefinito set di comandi che invia in uscita (es. vk_esc, mouse_click, ecc.)
- si usa un srv mapper per tradurre i comandi input in comandi output (es. multitapping, joy2mouse, ecc.)
- nelle properties di output (skin) non si definiscono strutture o riferimenti a srv, ma ci sono solo 
definizioni di oggetti generalmente bindati ad id di ui_elem, ma possono esserci anche oggetti in più 
che controllano solo la ui e non hanno niente a che fare con la logica dell'app...quindi l'ui ha dei 
controlli strettamente legati a cosa fa l'app, mentre l'out può aggiungere dei controlli fini al 
controllo del contesto di output (es. i bottoni maximize/minimize o i bordi per ridimensionare)

NB quella che nel gergo comune chiamano ui per me è il modulo di output; dragndrop, mouse gestures, ecc. 
sono cose peculiari di alcuni specifici input/output e che esistono confinati nei rispettivi moduli

status e ui_elem:
nel caso di comandi è semplice: un elem richiama un srv/comando che ritorna un risultato che viene 
bindato ad un altro elem.
in generale nelle app non ci interessa un "log" di cosa è accaduto (come l'esempio precedente), ma un 
monitoring dello status di operazioni lunghe in corso EEEEEE interruzioni di operazioni per chiedere 
all'utente cosa fare in determinate casi (es. il file X è di sola lettura, cancellare? si/no/cancel)...
quindi ho due "problemi" da risolvere: "status monitoring" (status) e "user intervention" (uiv)...
entrambi i problemi implicano che il chiamante (ui_elem) sia in ascolto dal srv chiamato; ciò è vero 
particolarmente per uiv perchè per status potrei pensare anche ad una scheduled call. 
il chiamante-listener non mi piace come soluzione perchè implica un notevole incremento di complessità 
del codice del chiamante e la gestione bidirezionale delle connessioni tra srv e conseguentemente 
anche maggiore complessità del modello di sicurezza.
per lo status è semplice perchè lancio il srv che ritorna subito e subito dopo richiamo il 
comando bloccante del srv in loop per aggiornamenti sullo status...ma NB io posso mettere la 
rihiesta di uiv nello status (con associato un id)...il srv può essere progettato con uiv bloccanti 
e quindi rimane una solo uiv in sospeso che blocca tutto, oppure le uiv posso essere messe in coda 
ed intanto si prosegue con il resto...in realtà quello che mi serve è solo un paradigma in c++ per 
semplificare ed irrobustire il codice nel srv poichè deve gestire thread e sincronizzazione.

NB la soluzione di cui sopra per evitare la connessione bidirezionale complica il codice del chiamante 
e del srv ed è potenzialmente più lenta (per via dello status e uiv nello stesso loop del chiamante, 
ma se li splitto in due thread o elem, la cosa è risolta), ma implica anche una gestione avanzata delle 
uiv...in realtà con un buon paradigma risolvo tutto perchè "monitorare uno status" implica comunque in 
ogni soluzione l'esistenza di un apposito thread, per cui rendendo autonomo uiv rispetto a status 
rimane solo il loop di uiv...NB è importante evitare che il srv abbia una connessione o un puntatore al 
chiamante perchè se il srv fosse malevolo dal puntatore tramite dynamic_cast può risalire alla classe 
totale e rubare informazioni o fare danni, tramite connessione inversa può intrufolarsi anche in maniera 
più pericolosa aggirando la sicurezza...per cui niente connessioni bilaterali!!!

riepilogando "status monitoring" (status) e "user intervention" (uiv):
- il chiamante richiama lo start di un srv che ritorna subito
- il chiamante tramite paradigma lancia il metodo/thread di "status monitoring"
- il chiamante fa un loop sul metodo bloccante del srv per rispondere ad uiv in sospeso
- alternativamente il chiamante tramite paradigma può far partire un metodo/thread per la gestione 
real-time della coda delle uiv (nel caso il srv sia abilitato alle uiv non bloccanti)

NB quanto sopra si mappa semplicemente negli ui_elem

riepilogando:
- alcuni ui_elem eseguono comandi ui (es un bottone per creare una nuova tab vuota -> il ui_elem "tab" 
alla sua creazione invoca il srv per creare un nuovo documento vuoto e lo binda alla tab)
- alcuni ui_elem immagazzinano dati immessi dall'utente
- un ui_elem genera dei params componendo i dati immessi insieme ad altri predefiniti
- un ui_elem chiama lo start di un srv passandogli i params di cui sopra e crea i due ui_elem qui sotto
- un ui_elem che loopa sullo status
- un ui_elem (eventualmente avviato hidden) che si attiva se ci sono uiv
- ci sono uiv invocate dai srv, ma ci sono pure uiv relative alla ui (ad es. chiudo un doc e chiedo 
se salvare i cambiamenti)
- analogamente c'è uno status della ui (es. dati editati e non salvati, il ui_elem ??? nascosto, ecc.)

- una ui per un solo srv (che racciude tutta l'app)
- per ogni comando esposto, si specificano gli ui_execute, ui_status e uiv (ed il file params 
  con i valori non esposti nominato in un modo standard univoco, quindi non serve specificarlo)
- ui_execute non richiede ulteriori specifiche
- ui_status ed uiv sono definiti con un liguaggio specifico

NB ideona!!! per ovviare al problema del rendering hw tipo videoplayer, ecc. invece di creare un 
controllo e gli dico di prendere l'out del srv, io tra i params del srv gli specifico come 
pipe di output quella di ui_out...così si sfrutta pure l'accelerazione hw senza troppi 
problemi...verificare che il ragionamento fili...

il piping in-out tra srv è il fulcro di tutto il sistema, il fatto che poi un certo in-out li 
uso nell'ambito di una ui è un caso particolare...quindi in una ui out viene usato come ui ed 
anche come pipe-out per sfruttare l'accelerazione

NB forse devo passare ad una diversa concezione, forse veramente mi serve la comunicazione bilaterale 
perchè un srv fornisce i dati appena ce li ha disponibili, non è che li deve immagazzinare finchè 
qualcuno si degna di prenderli...quindi torniamo al concetto di stream per tutto, anche lo status...
però così forza il chiamante a dover gestire tutto l'out...pensare meglio! ...magari tutte e due le 
possibilità...

params sono cose abbastanza fisse, possono anche avere struttura variabile, ma fondamentalmente 
sono "un insieme finito" e mi serve unicamente per configurare il srv e vanno inviati una sola 
volta, mentre l'input è una cosa estremamente variabile, "non prevedibile", continua e potenzialmente 
infinita, cioè uno "stream" e rappresentano concettualmente "dati"...
quindi:
- params: limited-one-time-data, determinano come elaborare l'input ai params non corrisponde un output
- input/output: unlimited-continous-streaming-data, vengono elaborati (secondo i params) per 
produrre un output

cioè out=f(in) e f=g(params), con f=stream_function e g=point_function

differenza tra funzione e stream-processor è che per le funzioni c'è una corrispondenza sincrona tra 
input ed output, mentre per gli stream io fornisco input asincronamente e poi asincronamente e se 
voglio prendo gli output...NB se serve sincronia per gli stream questa deve essere contemplata 
all'interno dello stream, oppure previsto da timers nello stream processor (con almeno un delay 
tra in e out), ma in ogni caso non c'è la corrispondenza come nella chiamata di funzioni.

lo user input viene tradotto dalla ui in uno input stream di comandi per uno specifico srv.

riflessioni: un srv prende passivamente uno stream in e fornisce un stream out, fornisce lo 
status, chiede user intervention (uiv), accetta parametri, accetta comandi, offre funzioni, 
interagisce con altri srv...
...da quanto sopra, si evincono le seguenti similitudini: params/config sono inseribili come 
comandi, i comandi sono assimilabili ad un stream di input...aggregare tutto insieme crea solo 
casino ed overhead inutile, bisogna separare con criterio ed intelligenza...probabilmente così: 
config/params iniziali presi internamente da srv dallo storage di sistema per la config, 
un metodo per passare comandi tra cui "set params" e "set config" ed a parte un metodo per lo 
streaming di dati in input...NB è corretto perchè ai comandi non corrisponde un output, bensì 
agiscono internamente al srv variandone lo stato e quindi come viene elaborato l'input...NB non 
sono comandi in senso classico infatti a quelli in genere corrisponde un output! infatti sono 
più assimilabili allo user input

riflessioni:
- se l'input passato e l'output associato sono scorrelati da tutti gli altri in ed out allora 
il modello da utilizzare è la chiamata di funzione
- se l'input passato è un pezzo di un input più grande e l'output pure viene fornito a pezzi e 
l'out complessivo dipende da tutto l'in complessivo (es. codifica video a doppia passata) allora 
il modello da utilizzare è quello delle streamed read/write indipendenti
- in entrambi i casi servono altri thread per gestire status, uiv ed anche comandi (anche per la 
chiamata di funzione che può chiedere sia intervento all'utente, che impiegare molto tempo e quindi 
va monitorata con lo status, oppure va inviato un comando di interrupt)
- il vero problema è che uno stream processor proprio per sua natura implica un buffering di in ed 
out e quindi la gestione di tali buffer che devono garantire (entro certi limiti) la non perdita 
di pacchetti in o out, il buffering è necessario perchè in una catena di stream processors, il più 
lento non è sempre lo stesso ma è variabile a causa degli input istantanei che possono richiedere 
più o meno potenza di calcolo (NB la velocità di una catena è data dal processore più lento!), 
quindi se non ci fosse buffering tutti i processor starebbero sempre in attesa del più lento, 
mentre col buffering hanno sempre dati da processare...NB il tutto va considerato in "clouding", 
cioè i processors possono stare su pc distribuiti in rete, o sullo stesso pc ma diversi core, ecc.
- io vorrei che il buffering non fosse gestito dallo specifico srv, ma da backends messi prima e 
dopo, ma non sono sicuro sia fattibile...o almeno è facile bufferizzare l'input dall'esterno, 
ma l'output? ...dovrei prevedere un buffer veloce e il processor dovrebbe bloccarsi se c'è un 
pacchetto in out non ancora preso...forse così regge...
- in ogni caso il srv, anche nel caso "funzione", ha al suo interno "molta" sincronizzazione 
(semafori, wait, ecc.) che per sua natura è "pericolosa"...l'alternativa implica la comunicazione 
bidirezionale e quindi un'interfaccia ulteriore che deve implementare il chiamante, oltre al 
puntatore che va passato al srv o al suo stub e gestito da lui in sua vece...tutto ciò implica 
però anche che l'affidabilità del srv dipende anche dal suo chiamante...pessima cosa! ...e poi 
almeno le read andrebbero sincronizzate, per cui mi conviene usare il modello unidirezionale 
sincronizzato e progettare bene la classe base dei srv con tutta la sincronizzazione al suo 
interno...
- un srv ha metodi singoli per ogni cosa...cioè un solo metodo read, un solo write ed un solo 
"function"...cioè per mettere a disposizione molte funzioni queste sono un parametro del metodo 
function...questo perchè in c++ non posso sapere a runtime quanti metodi, quali e che nome hanno 
e non avrei un'interfaccia unica...stessa cosa per read/write: il srv può implementare più di 
un processore di stream, per accedervi basta scrivere nel canale corispondente...cioè read e 
write trattano in e out multicanale, dove ogni canale può anche essere processato diversamente...
- per i comandi invece potrei fare così: quelli generici e di sicura utilità possono essere 
esplicitati dall'interfaccia come metodi a se e poi un metodo unico per i comandi specifici del 
srv...
- stabilito tutto ciò, per la ui il tutto si riduce a due problemi: come comporre parametri da 
inviare ai metodi e come splittare e trattare ciò che i metodi restituiscono...ovviamente il 
tutto va specializzato a seconda del metodo...ovviamente quelli problematici sono read/write e 
function perchè le strutture dati sono estremamente variabili...



-------------------
punti fermi:
- una ui serve per interfacciare l'utente con un srv ed i suoi comandi, quindi:
  - una ui riceve dall'utente dei parametri per un srv-cmd
  - una ui riceve dall'utente lo start del srv-cmd di cui sopra con i params impostati
  - una ui fornisce prima (pronto), durante (in corso %) e dopo (finito) lo status del cmd
  - una ui fornisce notifica della necessità di ulteriore input utente e lo recepisce
  - una ui riorganizza l'output in modo da facilitarne la fruizione
- una ui interfaccia verso uno ed un solo srv
- il piping tra più srv viene ottenuto tramite scripting/compiling ed in ogni caso il risultato 
  è esso stesso riconducibile ad un srv...questo poi può essere usato in una ui...cioè ho 
  ulteriormente disaccoppiato i problemi...questo layering non dovrebbe inficiare il riutilizzo 
  di piccoli moduli di ui (es. listbox per i file, il open file dialog, ecc.), ma bisogna pensarci
- per i srv va creato un paradigma dove per ogni comando offerto ci sono i seguenti metodi:
  - start: ritorna subito dopo l'inizializzazione e l'avvio del thread
  - start: ritorna solo dopo l'interruzione del thread
  - status: ritorna la seq complessa con tutto lo status o solo gli update (a scelta) 
    può funzionare da "result" nel caso sia bloccante durante tutta l'esecuzione 
    (a richiesta può essere: bloccante fino alla prima modifica, 
    ritorna subito con tutto lo status, 
    o timed cioè ritorna dopo un timer...comodo per il chiamante, per il srv è gestito dal paradigma)
  - user_choice (uiv): con le modalità bloccante/subito/timed fornisce le eventuali domande ed eventuali 
    vincoli di risposta (internazionalizzati! quindi sia domanda che possibili risposte sono id 
    che vengono tradotti nel linguaggio selezionato dal modulo di skinning)
  - stream_in: accetta i pacchetti dello stream in ingresso da processare
  - stream_out: ritorna i pacchetti dello stream in uscita processato
- una ui è composta così: ui_in -> ui_out <-> ui_srv
- ui_srv:
  - riceve ui_cmd da ui_out generati dall'input utente elaborato da ui_in e poi da ui_out
  - definisce un albero logico di layout dove vengono distribuiti i vari srv-cmd, status, uiv e 
    ui_elem
  - la struttura è dinamica sia per comandi ui di determinati ui_elem, sia per status e uiv
- ui_in: traduce gli input (implementando, tra le altre cose, gestures, hotkeys, multitapping, ecc.)
- ui_out:
  - usa molti ui_input che filtra per l'utilizzo avanzato dei controlli che offre
  - genera ui_cmd verso ui_srv
  - genera la ui con impostazioni di default
-------------------



srv prototype:
- constructor
- destructor
- stream_in_put: accepts multichannel data packet to process 
  (rules and checks to avoid buffer overruns, blocked until output is taken)
- stream_out_get: returns multichannel data packet processed 
  (blocked until data available, double buffered?)
- stream_cmd o meglio solo cmd: executes a stream command (set config, reset, start, stop, etc.)
- function: executes a function specified in params and returns the function result
- status: returns the status or part of it by means of how specified by params
- user_intervention: returns choices the user has to take in order to complete the execution 
of a function or the processing of a stream packet

NB per la modularizzazione delle ui ogni modulo deve avere degli in e degli out, ma qui si apre un 
mondo...ed NB la modularizzazione delle ui è antagonista del linguaggio di scripting per creare 
un nuovo srv dalla composizione di più srv, perchè implica che la ui va sempre riscritta tutta!!! 
e questo lo devo evitare, quindi devo pensare alla modularizzazione della ui...

azioni possibili:
- chiamata di funzione con argomento (parte di seq, classe/nome/id di controlli, ecc.)
- creazione controllo (anche come child di un altro che fa da container): classe, nome, id-ordinale (seq di controlli)
- distruzione controllo (e relativi children)
- istanziazione srv
- distruzione srv
- chiamata metodo srv ed assegnazione result
- istanziazione seq
- distruzione seq
- assegnazione seq/number->controllo (dove seq/number sono riferiti tramite sintassi "seqname:1,20,5;n.")
- assegnazione controllo->seq/number
- iterazioni su una seq (da definire!!!) o controlli

un compito di ui è quello di ristrutturare tutti gli output di srv in una seq di seq dove ci sono solo i dati 
che si vogliono offrire all'utente (senza tutte le info "inutili" che il srv produce per completezza) più 
un typing/format per dire ogni dato come va rappresentato (numero, testo, immagine, video, percentuale, data, ecc.) 
...quindi: srv-out(status, stream, func, uiv, ecc.) -> filtro dati + ristrutturazione + typing/format = ui-out

domanda: e lo status della ui (selected, focused, ecc.)? e l'input?
una possibile soluzione sarebbe di far si che ogni specifica ui offre queste cose come comandi accessibili da xui 
tramite il metodo "cmd" di quella ui...in pratica ogni ui offre quello che gli pare...poi col tempo vedrò se 
posso generalizzare ed uniformare...insieme al fatto delle ui compilate mi sembra un buon compromesso per andare avanti...

quindi ui offre lo status ristrutturando e filtrando lo status di srv, con cmd/function offre i suoi comandi specifici 
(move_up, select, ecc.) tra cui "get_typing_and_format" che ritorna la stessa struttura di status/uiv/ecc ma con 
il "type/format" anzichè i dati...NB xui generalmente richiede ad ui una sottoparte dello status (quella che gli 
interessa in quel dato momento), ma per il typing/format credo che convenga dare sempre tutto (che lo si chiede solo 
all'avvio della xui), ma posso anche prevedere di chiederne solo una sottoparte (magari per xui immense, il typing 
può da solo occupare più memoria di quella disponibile)...ovviamente ritorna tutta la struttura con puntatori nulli 
nei rami che non serve approfondire perchè il nodo iniziale deve essere sempre lo stesso!!!
ui ritorna lo stesso uiv del srv ovviamente...

-------------------

srv prototype:
- constructor
- destructor
- stream_in_put
- stream_out_get
- function
- status
- user_intervention

-------------------

ui:
- constructor
- destructor
- stream_in_put (not used)
- stream_out_get (not used)
- function: comandi specifici della ui + almeno "get_types" (sia di status che di uiv)
- status: può essere lo stesso del srv interfacciato o una sua ristrutturazione
- user_intervention: lo stesso del srv interfacciato

NB uiv è uno scambio di id che fanno riferimento a significati specificati dalla doc del srv...questi id 
vengono tradotti in messaggi verso l'utente dalla specifica xui utilizzata tramite le risorse specificate 
nella "skin"...cioè: per la xui grafica ci saranno stringhe (una skin per ogni linguaggio messo a disposizione) 
ed immagini associate a ciascun id, per la xui audio ci saranno stringhe e file audio associati a ciascun id...
ovviamente xui e poi ui rispondono alle uiv con id associati alle scelta fatta dall'utente, quindi al srv 
arriva solo l'id...cioè tutta la semantica del linguaggio utilizzato e tutta la specificità dell'interazione 
utente viene astratta con id e rimane fuori dai srv...QUINDI NEI SRV NON ESISTERANNO MAI PIù STRINGHE!!! 
questa è una vera rivoluzione!!! ...nei srv solo codice (in c++) universale!!!

-------------------

xui:
ogni xui di uno specifico srv si deve occupare della skin, dell'internazionalizzazione, ecc. che in generale 
sono specifici di quel srv, poi si può prevedere che alcune "resources" siano prese da un repository 
generico...ad es. immagini e messaggi utilizzati di frequente è stupido replicarli ogni volta!
in pratica stringhe, immagini, suoni, ecc. sono risorse di quella app per quella xui, quindi ad es. per una 
gui l'internazionalizzazione è fatta con stringhe, per una xui audio con file audio...quindi il linguaggio è 
una risorsa della specifica xui anche se il contenuto deriva dal srv che si utilizza...

xui ha un'interfaccia unica per gli input, ma per gli output dipende dal tipo...cioè ogni xui ha un suo standard 
output...NB mentre ogni ui è specifica del srv che interfaccia, di srv che implementano l'interfaccia xui ce ne 
sono diverse classi (differenziate dallo standard di output) scelta una classe di xui, poi si scrive il config 
file che implementa l'app di un certa coppia di srv+ui...

il "main" di una xui comincia definendo la ui da caricare e poi una serie di comandi xui...ora tutto sta nel 
definire i possibili comandi xui (almeno per la xui grafica)...anche qui potrei usare l'escamotage di non 
definire un metalinguaggio, ma utilizzare direttamente codice c++...quello che potrei fare è creare una o più 
funzioni/classi che offrano dei controlli basilari astraendo dal os utilizzato e poi da questi creare tutti i 
controlli possibili ed immaginabili, partendo ovviamente da quelli minimali richiesti da una xui...così facendo 
posso sfruttare al massimo le potenzialità degli out perchè la parte xui sarebbe ancora terra selvaggia (solo 
ui e srv sono universali, ordinati e perfetti), infatti ad esempio nella xui grafica posso aggiungere un 
controllo opengl 3d anche se con i controlli base non lo avrei potuto ottenere...così il mondo xui sarebbe 
selvaggio ma confinato da tutto il resto...questo per il momento mi potrebbe bastare...

-------------------

srv + ui + xui, senza metalinguaggi e compilati in c++...ecco cosa ho ottenuto:
- codice srv completamente disaccoppiato, universale, senza stringhe, linguaggio umano, ecc.
- ui e xui possono essere implementate subito senza compromettere in alcun modo gli intenti di partenza
- ui e xui rimangono ognuna confinate nel loro mondo selvaggio, ma garantiscono il disaccoppiamento 
  grazie all'interfaccia e pure se i comandi sono selvaggi, un giorno potrò standardizzare tutto!
- ui si occupa di ristrutturare dati ed input utente E NAVIGARE TRA I DATI, SELEZIONI, COMANDI E FUNZIONI!
- xui si occupa di renderizzare nel modo più opportuno, "cool", funzionale ed ergonomico  dati, input ed output 
  e di tradurre lo user input in comandi e dati da passare alla ui
- il rendering di xui astrae dallo specifico device, per cui il suo out è uno stream di cui è solo definito il formato
- gli input di xui astraggono dallo specifica device, ma gli arrivano in input da streams specificamente formattati
- si possono creare innumerevoli srv di input con diversi formati sia associati a device di input che ad input virtuali
- serve poi un srv che permetta di tradurre gli input di una tipologia ad un'altra (es 2 assi analogici -> 4 freccie)

-------------------

per implementare status ed uiv in service posso stabilire a priori degli id (es 0, 1, oppure 1001, 1002) e trattarle come dei 
metodi ordinari (cioè richiamati tramite srv->f(id, params)). tali metodi possono così essere facoltativi...non è la soluzione 
ottimale, bisogna trovare un modello migliore.

