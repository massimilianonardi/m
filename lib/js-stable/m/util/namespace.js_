//------------------------------------------------------------------------------
// Class -----------------------------------------------------------------------
//------------------------------------------------------------------------------

function Namespace(root)
{
  this.root = root;
}

//------------------------------------------------------------------------------
// Enums -----------------------------------------------------------------------
//------------------------------------------------------------------------------

//Widget.my_enum = Object.freeze(
//{
//  VAL_1: 1, 
//  VAL_2: 2, 
//});

//------------------------------------------------------------------------------
// Methods ---------------------------------------------------------------------
//------------------------------------------------------------------------------

Namespace.prototype.get = function(path)
{
  this.root = this.root || {};
  var root = this.root;
  
  if(path === null)
  {
    return root;
  }
  
  if(typeof path !== "string")
  {
    throw new TypeError();
  }
  
  if(path === "")
  {
    return root;
  }
  
  var iterator = root;
  var pathArray = path.split(".");
  for(var i = 0; i < pathArray.length; i++)
  {
    iterator[pathArray[i]] = iterator[pathArray[i]] || {};
    iterator = iterator[pathArray[i]];
  }
  
  return iterator;
};

//------------------------------------------------------------------------------

Namespace.prototype.load = function(namespace, url, symbols)
{
};

//------------------------------------------------------------------------------

Namespace.prototype.unload = function(namespace)
{
};

//------------------------------------------------------------------------------
